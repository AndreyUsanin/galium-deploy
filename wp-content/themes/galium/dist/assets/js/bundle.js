!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){!function(e,n,i){"use strict";var o=function(){function t(t){var o,r,a=function(t){x.length>0&&(isNaN(t)?x.forEach(function(t){y[t].close()}):y[t].close())},s=function(){l(E,g)},l=function(t,e){t.classList?t.classList.add(e):t.className=(t.className+" "+e).trim()},c=function(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")},u=function(t,e,n){t.addEventListener(e,n)},d=function(t,e,n){t.removeEventListener(e,n)},f=function(t){return t instanceof HTMLElement?[t]:Array.isArray(t)?t:"string"==typeof t&&Array.apply(null,n.querySelectorAll(t))},h=function(t,e){var n=t.indexOf(e);return n>-1&&n};for(o in r={slidingElementsSelector:".offside-sliding-element",disableCss3dTransforms:!1,debug:!1},t)r.hasOwnProperty(o)&&(r[o]=t[o]);var v="offside-js",p=v+"--init",m="offside-sliding-element",g=v+"--interact",y=[],b=!0,w=!r.disableCss3dTransforms&&function(){if(!e.getComputedStyle)return!1;var t,o=n.createElement("p"),r={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var a in n.body.insertBefore(o,null),r)o.style[a]!==i&&(o.style[a]="translate3d(1px,1px,1px)",t=e.getComputedStyle(o).getPropertyValue(r[a]));return n.body.removeChild(o),t!==i&&t.length>0&&"none"!==t}(),x=[],E=n.body,C=f(r.slidingElementsSelector),T=r.debug;function A(t,e,n){var i,o;for(i in o={buttonsSelector:"",slidingSide:"left",init:function(){},beforeOpen:function(){},afterOpen:function(){},beforeClose:function(){},afterClose:function(){},beforeDestroy:function(){},afterDestroy:function(){}},e)o.hasOwnProperty(i)&&(o[i]=e[i]);var r=t,p=f(o.buttonsSelector),m=o.slidingSide,g="offside--"+m,w=v+"--is-open",C=v+"--is-"+m,A=n||0,L=function(){!1===h(x,A)?S():M()},S=function(){o.beforeOpen(),b&&(b=!1,s()),a(),l(E,w),l(E,C),l(r,"is-open"),x.push(A),o.afterOpen()},M=function(){var t=h(x,A);!1!==t&&(o.beforeClose(),c(E,w),c(E,C),c(r,"is-open"),x.splice(t,1),o.afterClose())},k=function(t){t.preventDefault(),L()},O=function(){r||console.error('Offside alert: "offside" selector could not match any element'),p.length||console.error('Offside alert: "buttonsSelector" selector could not match any element')};this.toggle=function(){L()},this.open=function(){S()},this.close=function(){M()},this.closeAll=function(){a()},this.destroy=function(){o.beforeDestroy(),M(),p.forEach(function(t){d(t,"click",k)}),c(r,"offside"),c(r,g),delete y[A],o.afterDestroy()},T&&O(),l(r,"offside"),l(r,g),p.forEach(function(t){u(t,"click",k)}),o.init()}return C.forEach(function(t){l(t,m)}),w||l(n.documentElement,"no-csstransforms3d"),l(E,p),{closeOpenOffside:function(){a()},getOffsideInstance:function(t,e){var n=y.length||0,o=function(t,e,n){var o=f(t!==i?t:".offside");return!1!==o?new A(o[0],e,n):null}(t,e,n);if(null!==o)return y[n]=o}}}var o={getInstance:function(e,n){return o.getInstance.factory||(o.getInstance.factory=t(n)),o.getInstance.factory.getOffsideInstance(e,n)}};return o}();t.exports?t.exports=o.getInstance:e.offside=o.getInstance}(window,document)},function(t,e,n){(function(n){var i,o,r;"undefined"!=typeof window&&window,o=[],void 0===(r="function"==typeof(i=function(){return function t(e,n){"use strict";var i=Object.create(t.prototype),o=0,r=0,a=0,s=0,l=[],c=!0,u=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)},d=null,f=window.cancelAnimationFrame||window.mozCancelAnimationFrame||clearTimeout,h=window.transformProp||function(){var t=document.createElement("div");if(null===t.style.transform){var e=["Webkit","Moz","ms"];for(var n in e)if(void 0!==t.style[e[n]+"Transform"])return e[n]+"Transform"}return"transform"}();i.options={speed:-2,center:!1,wrapper:null,relativeToWrapper:!1,round:!0,vertical:!0,horizontal:!1,callback:function(){}},n&&Object.keys(n).forEach(function(t){i.options[t]=n[t]}),e||(e=".rellax");var v="string"==typeof e?document.querySelectorAll(e):[e];if(!(v.length>0))throw new Error("The elements you're trying to select don't exist.");if(i.elems=v,i.options.wrapper&&!i.options.wrapper.nodeType){var p=document.querySelector(i.options.wrapper);if(!p)throw new Error("The wrapper you're trying to use don't exist.");i.options.wrapper=p}var m=function t(){for(var e=0;e<l.length;e++)i.elems[e].style.cssText=l[e].style;l=[],r=window.innerHeight,s=window.innerWidth,y(),function(){for(var t=0;t<i.elems.length;t++){var e=g(i.elems[t]);l.push(e)}}(),c&&(window.addEventListener("resize",t),c=!1),w()},g=function(t){var e=t.getAttribute("data-rellax-percentage"),n=t.getAttribute("data-rellax-speed"),o=t.getAttribute("data-rellax-zindex")||0,a=i.options.wrapper?i.options.wrapper.scrollTop:window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;if(i.options.relativeToWrapper){var l=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;a=l-i.options.wrapper.offsetTop}var c=i.options.vertical&&(e||i.options.center)?a:0,u=i.options.horizontal&&(e||i.options.center)?window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft:0,d=c+t.getBoundingClientRect().top,f=t.clientHeight||t.offsetHeight||t.scrollHeight,h=u+t.getBoundingClientRect().left,v=t.clientWidth||t.offsetWidth||t.scrollWidth,p=e||(c-d+r)/(f+r),m=e||(u-h+s)/(v+s);i.options.center&&(m=.5,p=.5);var g=n||i.options.speed,y=b(m,p,g),w=t.style.cssText,x="";if(w.indexOf("transform")>=0){var E=w.indexOf("transform"),C=w.slice(E),T=C.indexOf(";");x=T?" "+C.slice(11,T).replace(/\s/g,""):" "+C.slice(11).replace(/\s/g,"")}return{baseX:y.x,baseY:y.y,top:d,left:h,height:f,width:v,speed:g,style:w,transform:x,zindex:o}},y=function(){var t=o,e=a;if(o=i.options.wrapper?i.options.wrapper.scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset,a=i.options.wrapper?i.options.wrapper.scrollLeft:(document.documentElement||document.body.parentNode||document.body).scrollLeft||window.pageXOffset,i.options.relativeToWrapper){var n=(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset;o=n-i.options.wrapper.offsetTop}return!(t==o||!i.options.vertical)||!(e==a||!i.options.horizontal)},b=function(t,e,n){var o={},r=n*(100*(1-t)),a=n*(100*(1-e));return o.x=i.options.round?Math.round(r):Math.round(100*r)/100,o.y=i.options.round?Math.round(a):Math.round(100*a)/100,o},w=function(){for(var t,e=0;e<i.elems.length;e++){var n=(o-l[e].top+r)/(l[e].height+r),c=(a-l[e].left+s)/(l[e].width+s),u=(t=b(c,n,l[e].speed)).y-l[e].baseY,d=t.x-l[e].baseX,f=l[e].zindex,v="translate3d("+(i.options.horizontal?d:"0")+"px,"+(i.options.vertical?u:"0")+"px,"+f+"px) "+l[e].transform;i.elems[e].style[h]=v}i.options.callback(t)};return i.destroy=function(){for(var t=0;t<i.elems.length;t++)i.elems[t].style.cssText=l[t].style;c||(window.removeEventListener("resize",m),c=!0),f(d),d=null},m(),function t(){y()&&!1===c&&w(),d=u(t)}(),i.refresh=m,i}})?i.apply(e,o):i)||(t.exports=r)}).call(this,n(4))},function(t,e,n){t.exports=n(8)},function(t,e){t.exports=jQuery},function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":n(window))&&(i=window)}t.exports=i},function(t,e){var n=document.querySelectorAll(".doc-card-page__button"),i=document.querySelector(".doc-output"),o=document.getElementById("patient-form");o.addEventListener("submit",function(t){t.preventDefault();var e,n,i=document.getElementById("patient-name");/^[A-Za-zА-Яа-я]{3,20}$/.test(i.value)?(i.classList.remove("is-invalid"),e=!0):i.classList.add("is-invalid");var r=document.getElementById("patient-phone");/[0-9]/.test(r.value)?(r.classList.remove("is-invalid"),n=!0):r.classList.add("is-invalid");if(!n||!e)return!1;console.log(n,e),o.submit()}),n.forEach(function(t){t.addEventListener("click",function(e){!function(t){fetch("../docs.json").then(function(t){return t.json()}).then(function(e){var n;return e.forEach(function(e){e.id===t&&(n=e)}),function(t){i.innerHTML="\n    <h3>".concat(t.name,'</h3>\n    <img src="').concat(t.imgSrc,'"/> \n    <input type="hidden" name="Доктор" value="').concat(t.name,'" />\n  ')}(n),e})}(t.dataset.doc),e.preventDefault()})})},,,function(t,e,n){"use strict";n.r(e);n(3);var i=window,o=i.requestAnimationFrame||i.webkitRequestAnimationFrame||i.mozRequestAnimationFrame||i.msRequestAnimationFrame||function(t){return setTimeout(t,16)},r=window,a=r.cancelAnimationFrame||r.mozCancelAnimationFrame||function(t){clearTimeout(t)};function s(){for(var t,e,n,i=arguments[0]||{},o=1,r=arguments.length;o<r;o++)if(null!==(t=arguments[o]))for(e in t)i!==(n=t[e])&&void 0!==n&&(i[e]=n);return i}function l(t){return["true","false"].indexOf(t)>=0?JSON.parse(t):t}function c(t,e,n,i){if(i)try{t.setItem(e,n)}catch(t){}return n}function u(){var t=document,e=t.body;return e||((e=t.createElement("body")).fake=!0),e}var d=document.documentElement;function f(t){var e="";return t.fake&&(e=d.style.overflow,t.style.background="",t.style.overflow=d.style.overflow="hidden",d.appendChild(t)),e}function h(t,e){t.fake&&(t.remove(),d.style.overflow=e,d.offsetHeight)}function v(t,e,n,i){"insertRule"in t?t.insertRule(e+"{"+n+"}",i):t.addRule(e,n,i)}function p(t){return("insertRule"in t?t.cssRules:t.rules).length}function m(t,e,n){for(var i=0,o=t.length;i<o;i++)e.call(n,t[i],i)}var g="classList"in document.createElement("_"),y=g?function(t,e){return t.classList.contains(e)}:function(t,e){return t.className.indexOf(e)>=0},b=g?function(t,e){y(t,e)||t.classList.add(e)}:function(t,e){y(t,e)||(t.className+=" "+e)},w=g?function(t,e){y(t,e)&&t.classList.remove(e)}:function(t,e){y(t,e)&&(t.className=t.className.replace(e,""))};function x(t,e){return t.hasAttribute(e)}function E(t,e){return t.getAttribute(e)}function C(t){return void 0!==t.item}function T(t,e){if(t=C(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(e))for(var n=t.length;n--;)for(var i in e)t[n].setAttribute(i,e[i])}function A(t,e){t=C(t)||t instanceof Array?t:[t];for(var n=(e=e instanceof Array?e:[e]).length,i=t.length;i--;)for(var o=n;o--;)t[i].removeAttribute(e[o])}function L(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function S(t,e){"none"!==t.style.display&&(t.style.display="none")}function M(t,e){"none"===t.style.display&&(t.style.display="")}function k(t){return"none"!==window.getComputedStyle(t).display}function O(t){if("string"==typeof t){var e=[t],n=t.charAt(0).toUpperCase()+t.substr(1);["Webkit","Moz","ms","O"].forEach(function(i){"ms"===i&&"transform"!==t||e.push(i+n)}),t=e}for(var i=document.createElement("fakeelement"),o=(t.length,0);o<t.length;o++){var r=t[o];if(void 0!==i.style[r])return r}return!1}function N(t,e){var n=!1;return/^Webkit/.test(t)?n="webkit"+e+"End":/^O/.test(t)?n="o"+e+"End":t&&(n=e.toLowerCase()+"end"),n}var P=!1;try{var D=Object.defineProperty({},"passive",{get:function(){P=!0}});window.addEventListener("test",null,D)}catch(R){}var H=!!P&&{passive:!0};function B(t,e,n){for(var i in e){var o=["touchstart","touchmove"].indexOf(i)>=0&&!n&&H;t.addEventListener(i,e[i],o)}}function j(t,e){for(var n in e){var i=["touchstart","touchmove"].indexOf(n)>=0&&H;t.removeEventListener(n,e[n],i)}}function I(){return{topics:{},on:function(t,e){this.topics[t]=this.topics[t]||[],this.topics[t].push(e)},off:function(t,e){if(this.topics[t])for(var n=0;n<this.topics[t].length;n++)if(this.topics[t][n]===e){this.topics[t].splice(n,1);break}},emit:function(t,e){e.type=t,this.topics[t]&&this.topics[t].forEach(function(n){n(e,t)})}}}function z(t){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.keys||(Object.keys=function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});var R,_,q,F,W,K,Y,X,V,Q=function t(e){e=s({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0},e||{});var n=document,i=window,r={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},d={},g=e.useLocalStorage;if(g){var C=navigator.userAgent,P=new Date;try{(d=i.localStorage)?(d.setItem(P,P),g=d.getItem(P)==P,d.removeItem(P)):g=!1,g||(d={})}catch(t){g=!1}g&&(d.tnsApp&&d.tnsApp!==C&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(t){d.removeItem(t)}),localStorage.tnsApp=C)}var D=d.tC?l(d.tC):c(d,"tC",function(){var t=document,e=u(),n=f(e),i=t.createElement("div"),o=!1;e.appendChild(i);try{for(var r,a="(10px * 10)",s=["calc"+a,"-moz-calc"+a,"-webkit-calc"+a],l=0;l<3;l++)if(r=s[l],i.style.width=r,100===i.offsetWidth){o=r.replace(a,"");break}}catch(t){}return e.fake?h(e,n):i.remove(),o}(),g),H=d.tPL?l(d.tPL):c(d,"tPL",function(){var t,e=document,n=u(),i=f(n),o=e.createElement("div"),r=e.createElement("div"),a="";o.className="tns-t-subp2",r.className="tns-t-ct";for(var s=0;s<70;s++)a+="<div></div>";return r.innerHTML=a,o.appendChild(r),n.appendChild(o),t=Math.abs(o.getBoundingClientRect().left-r.children[67].getBoundingClientRect().left)<2,n.fake?h(n,i):o.remove(),t}(),g),R=d.tMQ?l(d.tMQ):c(d,"tMQ",function(){var t,e=document,n=u(),i=f(n),o=e.createElement("div"),r=e.createElement("style"),a="@media all and (min-width:1px){.tns-mq-test{position:absolute}}";return r.type="text/css",o.className="tns-mq-test",n.appendChild(r),n.appendChild(o),r.styleSheet?r.styleSheet.cssText=a:r.appendChild(e.createTextNode(a)),t=window.getComputedStyle?window.getComputedStyle(o).position:o.currentStyle.position,n.fake?h(n,i):o.remove(),"absolute"===t}(),g),_=d.tTf?l(d.tTf):c(d,"tTf",O("transform"),g),q=d.t3D?l(d.t3D):c(d,"t3D",function(t){if(!t)return!1;if(!window.getComputedStyle)return!1;var e,n=document,i=u(),o=f(i),r=n.createElement("p"),a=t.length>9?"-"+t.slice(0,-9).toLowerCase()+"-":"";return a+="transform",i.insertBefore(r,null),r.style[t]="translate3d(1px,1px,1px)",e=window.getComputedStyle(r).getPropertyValue(a),i.fake?h(i,o):r.remove(),void 0!==e&&e.length>0&&"none"!==e}(_),g),F=d.tTDu?l(d.tTDu):c(d,"tTDu",O("transitionDuration"),g),W=d.tTDe?l(d.tTDe):c(d,"tTDe",O("transitionDelay"),g),K=d.tADu?l(d.tADu):c(d,"tADu",O("animationDuration"),g),Y=d.tADe?l(d.tADe):c(d,"tADe",O("animationDelay"),g),X=d.tTE?l(d.tTE):c(d,"tTE",N(F,"Transition"),g),V=d.tAE?l(d.tAE):c(d,"tAE",N(K,"Animation"),g),Q=i.console&&"function"==typeof i.console.warn,G=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],$={};if(G.forEach(function(t){if("string"==typeof e[t]){var i=e[t],o=n.querySelector(i);if($[t]=i,!o||!o.nodeName)return void(Q&&console.warn("Can't find",e[t]));e[t]=o}}),!(e.container.children.length<1)){var J=e.responsive,U=e.nested,Z="carousel"===e.mode;if(J){0 in J&&(e=s(e,J[0]),delete J[0]);var tt={};for(var et in J){var nt=J[et];nt="number"==typeof nt?{items:nt}:nt,tt[et]=nt}J=tt,tt=null}if(Z||function t(e){for(var n in e)Z||("slideBy"===n&&(e[n]="page"),"edgePadding"===n&&(e[n]=!1),"autoHeight"===n&&(e[n]=!1)),"responsive"===n&&t(e[n])}(e),!Z){e.axis="horizontal",e.slideBy="page",e.edgePadding=!1;var it=e.animateIn,ot=e.animateOut,rt=e.animateDelay,at=e.animateNormal}var st,lt,ct="horizontal"===e.axis,ut=n.createElement("div"),dt=n.createElement("div"),ft=e.container,ht=ft.parentNode,vt=ft.outerHTML,pt=ft.children,mt=pt.length,gt=Nn(),yt=!1;J&&Jn(),Z&&(ft.className+=" tns-vpfix");var bt,wt,xt,Et,Ct,Tt,At,Lt,St=e.autoWidth,Mt=Bn("fixedWidth"),kt=Bn("edgePadding"),Ot=Bn("gutter"),Nt=Dn(),Pt=Bn("center"),Dt=St?1:Math.floor(Bn("items")),Ht=Bn("slideBy"),Bt=e.viewportMax||e.fixedWidthViewportWidth,jt=Bn("arrowKeys"),It=Bn("speed"),zt=e.rewind,Rt=!zt&&e.loop,_t=Bn("autoHeight"),qt=Bn("controls"),Ft=Bn("controlsText"),Wt=Bn("nav"),Kt=Bn("touch"),Yt=Bn("mouseDrag"),Xt=Bn("autoplay"),Vt=Bn("autoplayTimeout"),Qt=Bn("autoplayText"),Gt=Bn("autoplayHoverPause"),$t=Bn("autoplayResetOnVisibility"),Jt=(Lt=document.createElement("style"),At&&Lt.setAttribute("media",At),document.querySelector("head").appendChild(Lt),Lt.sheet?Lt.sheet:Lt.styleSheet),Ut=e.lazyload,Zt=(e.lazyloadSelector,[]),te=Rt?(Ct=function(){if(St||Mt&&!Bt)return mt-1;var t=Mt?"fixedWidth":"items",n=[];if((Mt||e[t]<mt)&&n.push(e[t]),J)for(var i in J){var o=J[i][t];o&&(Mt||o<mt)&&n.push(o)}return n.length||n.push(0),Math.ceil(Mt?Bt/Math.min.apply(null,n):Math.max.apply(null,n))}(),Tt=Z?Math.ceil((5*Ct-mt)/2):4*Ct-mt,Tt=Math.max(Ct,Tt),Hn("edgePadding")?Tt+1:Tt):0,ee=Z?mt+2*te:mt+te,ne=!(!Mt&&!St||Rt),ie=Mt?Ti():null,oe=!Z||!Rt,re=ct?"left":"top",ae="",se="",le=Mt?function(){return Pt&&!Rt?mt-1:Math.ceil(-ie/(Mt+Ot))}:St?function(){for(var t=ee;t--;)if(bt[t]>-ie)return t}:function(){return Pt&&Z&&!Rt?mt-1:Rt||Z?Math.max(0,ee-Math.ceil(Dt)):ee-1},ce=Mn(Bn("startIndex")),ue=ce,de=(Sn(),0),fe=St?null:le(),he=e.preventActionWhenRunning,ve=e.swipeAngle,pe=!ve||"?",me=!1,ge=e.onInit,ye=new I,be=" tns-slider tns-"+e.mode,we=ft.id||(Et=window.tnsId,window.tnsId=Et?Et+1:1,"tns"+window.tnsId),xe=Bn("disable"),Ee=!1,Ce=e.freezable,Te=!(!Ce||St)&&$n(),Ae=!1,Le={click:Di,keydown:function(t){t=qi(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);e>=0&&(0===e?Ve.disabled||Di(t,-1):Qe.disabled||Di(t,1))}},Se={click:function(t){if(me){if(he)return;Ni()}var e=Fi(t=qi(t));for(;e!==Ue&&!x(e,"data-nav");)e=e.parentNode;if(x(e,"data-nav")){var n=nn=Number(E(e,"data-nav")),i=Mt||St?n*mt/tn:n*Dt,o=Be?n:Math.min(Math.ceil(i),mt-1);Pi(o,t),on===n&&(un&&zi(),nn=-1)}},keydown:function(t){t=qi(t);var e=n.activeElement;if(!x(e,"data-nav"))return;var i=[r.LEFT,r.RIGHT,r.ENTER,r.SPACE].indexOf(t.keyCode),o=Number(E(e,"data-nav"));i>=0&&(0===i?o>0&&_i(Je[o-1]):1===i?o<tn-1&&_i(Je[o+1]):(nn=o,Pi(o,t)))}},Me={mouseover:function(){un&&(Bi(),dn=!0)},mouseout:function(){dn&&(Hi(),dn=!1)}},ke={visibilitychange:function(){n.hidden?un&&(Bi(),hn=!0):hn&&(Hi(),hn=!1)}},Oe={keydown:function(t){t=qi(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);e>=0&&Di(t,0===e?-1:1)}},Ne={touchstart:Xi,touchmove:Vi,touchend:Qi,touchcancel:Qi},Pe={mousedown:Xi,mousemove:Vi,mouseup:Qi,mouseleave:Qi},De=Hn("controls"),He=Hn("nav"),Be=!!St||e.navAsThumbnails,je=Hn("autoplay"),Ie=Hn("touch"),ze=Hn("mouseDrag"),Re="tns-slide-active",_e="tns-complete",qe={load:function(t){ai(Fi(t))},error:function(t){e=Fi(t),b(e,"failed"),si(e);var e}},Fe="force"===e.preventScrollOnTouch;if(De)var We,Ke,Ye=e.controlsContainer,Xe=e.controlsContainer?e.controlsContainer.outerHTML:"",Ve=e.prevButton,Qe=e.nextButton,Ge=e.prevButton?e.prevButton.outerHTML:"",$e=e.nextButton?e.nextButton.outerHTML:"";if(He)var Je,Ue=e.navContainer,Ze=e.navContainer?e.navContainer.outerHTML:"",tn=St?mt:$i(),en=0,nn=-1,on=On(),rn=on,an="tns-nav-active",sn="Carousel Page ",ln=" (Current Slide)";if(je)var cn,un,dn,fn,hn,vn="forward"===e.autoplayDirection?1:-1,pn=e.autoplayButton,mn=e.autoplayButton?e.autoplayButton.outerHTML:"",gn=["<span class='tns-visually-hidden'>"," animation</span>"];if(Ie||ze)var yn,bn,wn={},xn={},En=!1,Cn=ct?function(t,e){return t.x-e.x}:function(t,e){return t.y-e.y};St||Ln(xe||Te),_&&(re=_,ae="translate",q?(ae+=ct?"3d(":"3d(0px, ",se=ct?", 0px, 0px)":", 0px)"):(ae+=ct?"X(":"Y(",se=")")),Z&&(ft.className=ft.className.replace("tns-vpfix","")),function(){Hn("gutter");ut.className="tns-outer",dt.className="tns-inner",ut.id=we+"-ow",dt.id=we+"-iw",""===ft.id&&(ft.id=we);be+=H||St?" tns-subpixel":" tns-no-subpixel",be+=D?" tns-calc":" tns-no-calc",St&&(be+=" tns-autowidth");be+=" tns-"+e.axis,ft.className+=be,Z?((st=n.createElement("div")).id=we+"-mw",st.className="tns-ovh",ut.appendChild(st),st.appendChild(dt)):ut.appendChild(dt);if(_t){var t=st||dt;t.className+=" tns-ah"}if(ht.insertBefore(ut,ft),dt.appendChild(ft),m(pt,function(t,e){b(t,"tns-item"),t.id||(t.id=we+"-item"+e),!Z&&at&&b(t,at),T(t,{"aria-hidden":"true",tabindex:"-1"})}),te){for(var i=n.createDocumentFragment(),o=n.createDocumentFragment(),r=te;r--;){var a=r%mt,s=pt[a].cloneNode(!0);if(A(s,"id"),o.insertBefore(s,o.firstChild),Z){var l=pt[mt-1-a].cloneNode(!0);A(l,"id"),i.appendChild(l)}}ft.insertBefore(i,ft.firstChild),ft.appendChild(o),pt=ft.children}}(),function(){if(!Z)for(var t=ce,n=ce+Math.min(mt,Dt);t<n;t++){var o=pt[t];o.style.left=100*(t-ce)/Dt+"%",b(o,it),w(o,at)}ct&&(H||St?(v(Jt,"#"+we+" > .tns-item","font-size:"+i.getComputedStyle(pt[0]).fontSize+";",p(Jt)),v(Jt,"#"+we,"font-size:0;",p(Jt))):Z&&m(pt,function(t,e){t.style.marginLeft=function(t){return D?D+"("+100*t+"% / "+ee+")":100*t/ee+"%"}(e)}));if(R){if(F){var r=st&&e.autoHeight?qn(e.speed):"";v(Jt,"#"+we+"-mw",r,p(Jt))}r=jn(e.edgePadding,e.gutter,e.fixedWidth,e.speed,e.autoHeight),v(Jt,"#"+we+"-iw",r,p(Jt)),Z&&(r=ct&&!St?"width:"+In(e.fixedWidth,e.gutter,e.items)+";":"",F&&(r+=qn(It)),v(Jt,"#"+we,r,p(Jt))),r=ct&&!St?zn(e.fixedWidth,e.gutter,e.items):"",e.gutter&&(r+=Rn(e.gutter)),Z||(F&&(r+=qn(It)),K&&(r+=Fn(It))),r&&v(Jt,"#"+we+" > .tns-item",r,p(Jt))}else{fi(),dt.style.cssText=jn(kt,Ot,Mt,_t),Z&&ct&&!St&&(ft.style.width=In(Mt,Ot,Dt));var r=ct&&!St?zn(Mt,Ot,Dt):"";Ot&&(r+=Rn(Ot)),r&&v(Jt,"#"+we+" > .tns-item",r,p(Jt))}if(J&&R)for(var a in J){a=parseInt(a);var s=J[a],r="",l="",c="",u="",d="",f=St?null:Bn("items",a),h=Bn("fixedWidth",a),g=Bn("speed",a),y=Bn("edgePadding",a),x=Bn("autoHeight",a),E=Bn("gutter",a);F&&st&&Bn("autoHeight",a)&&"speed"in s&&(l="#"+we+"-mw{"+qn(g)+"}"),("edgePadding"in s||"gutter"in s)&&(c="#"+we+"-iw{"+jn(y,E,h,g,x)+"}"),Z&&ct&&!St&&("fixedWidth"in s||"items"in s||Mt&&"gutter"in s)&&(u="width:"+In(h,E,f)+";"),F&&"speed"in s&&(u+=qn(g)),u&&(u="#"+we+"{"+u+"}"),("fixedWidth"in s||Mt&&"gutter"in s||!Z&&"items"in s)&&(d+=zn(h,E,f)),"gutter"in s&&(d+=Rn(E)),!Z&&"speed"in s&&(F&&(d+=qn(g)),K&&(d+=Fn(g))),d&&(d="#"+we+" > .tns-item{"+d+"}"),(r=l+c+u+d)&&Jt.insertRule("@media (min-width: "+a/16+"em) {"+r+"}",Jt.cssRules.length)}}(),Wn();var Tn=Rt?Z?function(){var t=de,e=fe;t+=Ht,e-=Ht,kt?(t+=1,e-=1):Mt&&(Nt+Ot)%(Mt+Ot)&&(e-=1),te&&(ce>e?ce-=mt:ce<t&&(ce+=mt))}:function(){if(ce>fe)for(;ce>=de+mt;)ce-=mt;else if(ce<de)for(;ce<=fe-mt;)ce+=mt}:function(){ce=Math.max(de,Math.min(fe,ce))},An=Z?function(){var t,e,n,i,o,r,a,s,l,c,u;Ei(ft,""),F||!It?(Si(),It&&k(ft)||Ni()):(t=ft,e=re,n=ae,i=se,o=Ai(),r=It,a=Ni,s=Math.min(r,10),l=o.indexOf("%")>=0?"%":"px",o=o.replace(l,""),c=Number(t.style[e].replace(n,"").replace(i,"").replace(l,"")),u=(o-c)/r*s,setTimeout(function o(){r-=s,c+=u,t.style[e]=n+c+l+i,r>0?setTimeout(o,s):a()},s)),ct||Gi()}:function(){Zt=[];var t={};t[X]=t[V]=Ni,j(pt[ue],t),B(pt[ce],t),Mi(ue,it,ot,!0),Mi(ce,at,it),X&&V&&It&&k(ft)||Ni()};return{version:"2.9.1",getInfo:Ui,events:ye,goTo:Pi,play:function(){Xt&&!un&&(Ii(),fn=!1)},pause:function(){un&&(zi(),fn=!0)},isOn:yt,updateSliderHeight:vi,refresh:Wn,destroy:function(){if(Jt.disabled=!0,Jt.ownerNode&&Jt.ownerNode.remove(),j(i,{resize:Qn}),jt&&j(n,Oe),Ye&&j(Ye,Le),Ue&&j(Ue,Se),j(ft,Me),j(ft,ke),pn&&j(pn,{click:Ri}),Xt&&clearInterval(cn),Z&&X){var t={};t[X]=Ni,j(ft,t)}Kt&&j(ft,Ne),Yt&&j(ft,Pe);var o=[vt,Xe,Ge,$e,Ze,mn];for(var r in G.forEach(function(t,n){var i="container"===t?ut:e[t];if("object"===z(i)){var r=!!i.previousElementSibling&&i.previousElementSibling,a=i.parentNode;i.outerHTML=o[n],e[t]=r?r.nextElementSibling:a.firstElementChild}}),G=it=ot=rt=at=ct=ut=dt=ft=ht=vt=pt=mt=lt=gt=St=Mt=kt=Ot=Nt=Dt=Ht=Bt=jt=It=zt=Rt=_t=Jt=Ut=bt=Zt=te=ee=ne=ie=oe=re=ae=se=le=ce=ue=de=fe=ve=pe=me=ge=ye=be=we=xe=Ee=Ce=Te=Ae=Le=Se=Me=ke=Oe=Ne=Pe=De=He=Be=je=Ie=ze=Re=_e=qe=wt=qt=Ft=Ye=Xe=Ve=Qe=We=Ke=Wt=Ue=Ze=Je=tn=en=nn=on=rn=an=sn=ln=Xt=Vt=vn=Qt=Gt=pn=mn=$t=gn=cn=un=dn=fn=hn=wn=xn=yn=En=bn=Cn=Kt=Yt=null,this)"rebuild"!==r&&(this[r]=null);yt=!1},rebuild:function(){return t(s(e,$))}}}function Ln(t){t&&(qt=Wt=Kt=Yt=jt=Xt=Gt=$t=!1)}function Sn(){for(var t=Z?ce-te:ce;t<0;)t+=mt;return t%mt+1}function Mn(t){return t=t?Math.max(0,Math.min(Rt?mt-1:mt-Dt,t)):0,Z?t+te:t}function kn(t){for(null==t&&(t=ce),Z&&(t-=te);t<0;)t+=mt;return Math.floor(t%mt)}function On(){var t,e=kn();return t=Be?e:Mt||St?Math.ceil((e+1)*tn/mt-1):Math.floor(e/Dt),!Rt&&Z&&ce===fe&&(t=tn-1),t}function Nn(){return i.innerWidth||n.documentElement.clientWidth||n.body.clientWidth}function Pn(t){return"top"===t?"afterbegin":"beforeend"}function Dn(){var t=kt?2*kt-Ot:0;return function t(e){var i,o,r=n.createElement("div");return e.appendChild(r),o=(i=r.getBoundingClientRect()).right-i.left,r.remove(),o||t(e.parentNode)}(ht)-t}function Hn(t){if(e[t])return!0;if(J)for(var n in J)if(J[n][t])return!0;return!1}function Bn(t,n){if(null==n&&(n=gt),"items"===t&&Mt)return Math.floor((Nt+Ot)/(Mt+Ot))||1;var i=e[t];if(J)for(var o in J)n>=parseInt(o)&&t in J[o]&&(i=J[o][t]);return"slideBy"===t&&"page"===i&&(i=Bn("items")),Z||"slideBy"!==t&&"items"!==t||(i=Math.floor(i)),i}function jn(t,e,n,i,o){var r="";if(void 0!==t){var a=t;e&&(a-=e),r=ct?"margin: 0 "+a+"px 0 "+t+"px;":"margin: "+t+"px 0 "+a+"px 0;"}else if(e&&!n){var s="-"+e+"px";r="margin: 0 "+(ct?s+" 0 0":"0 "+s+" 0")+";"}return!Z&&o&&F&&i&&(r+=qn(i)),r}function In(t,e,n){return t?(t+e)*ee+"px":D?D+"("+100*ee+"% / "+n+")":100*ee/n+"%"}function zn(t,e,n){var i;if(t)i=t+e+"px";else{Z||(n=Math.floor(n));var o=Z?ee:n;i=D?D+"(100% / "+o+")":100/o+"%"}return i="width:"+i,"inner"!==U?i+";":i+" !important;"}function Rn(t){var e="";!1!==t&&(e=(ct?"padding-":"margin-")+(ct?"right":"bottom")+": "+t+"px;");return e}function _n(t,e){var n=t.substring(0,t.length-e).toLowerCase();return n&&(n="-"+n+"-"),n}function qn(t){return _n(F,18)+"transition-duration:"+t/1e3+"s;"}function Fn(t){return _n(K,17)+"animation-duration:"+t/1e3+"s;"}function Wn(){if(Hn("autoHeight")||St||!ct){var t=ft.querySelectorAll("img");m(t,function(t){var e=t.src;e&&e.indexOf("data:image")<0?(B(t,qe),t.src="",t.src=e,b(t,"loading")):Ut||ai(t)}),o(function(){ui(L(t),function(){wt=!0})}),!St&&ct&&(t=li(ce,Math.min(ce+Dt-1,ee-1))),Ut?Kn():o(function(){ui(L(t),Kn)})}else Z&&Li(),Xn(),Vn()}function Kn(){if(St){var t=Rt?ce:mt-1;!function e(){pt[t-1].getBoundingClientRect().right.toFixed(2)===pt[t].getBoundingClientRect().left.toFixed(2)?Yn():setTimeout(function(){e()},16)}()}else Yn()}function Yn(){ct&&!St||(pi(),St?(ie=Ti(),Ce&&(Te=$n()),fe=le(),Ln(xe||Te)):Gi()),Z&&Li(),Xn(),Vn()}function Xn(){if(mi(),ut.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+ii()+"</span>  of "+mt+"</div>"),xt=ut.querySelector(".tns-liveregion .current"),je){var t=Xt?"stop":"start";pn?T(pn,{"data-action":t}):e.autoplayButtonOutput&&(ut.insertAdjacentHTML(Pn(e.autoplayPosition),'<button data-action="'+t+'">'+gn[0]+t+gn[1]+Qt[0]+"</button>"),pn=ut.querySelector("[data-action]")),pn&&B(pn,{click:Ri}),Xt&&(Ii(),Gt&&B(ft,Me),$t&&B(ft,ke))}if(He){if(Ue)T(Ue,{"aria-label":"Carousel Pagination"}),m(Je=Ue.children,function(t,e){T(t,{"data-nav":e,tabindex:"-1","aria-label":sn+(e+1),"aria-controls":we})});else{for(var n="",i=Be?"":'style="display:none"',o=0;o<mt;o++)n+='<button data-nav="'+o+'" tabindex="-1" aria-controls="'+we+'" '+i+' aria-label="'+sn+(o+1)+'"></button>';n='<div class="tns-nav" aria-label="Carousel Pagination">'+n+"</div>",ut.insertAdjacentHTML(Pn(e.navPosition),n),Ue=ut.querySelector(".tns-nav"),Je=Ue.children}if(Ji(),F){var r=F.substring(0,F.length-18).toLowerCase(),a="transition: all "+It/1e3+"s";r&&(a="-"+r+"-"+a),v(Jt,"[aria-controls^="+we+"-item]",a,p(Jt))}T(Je[on],{"aria-label":sn+(on+1)+ln}),A(Je[on],"tabindex"),b(Je[on],an),B(Ue,Se)}De&&(Ye||Ve&&Qe||(ut.insertAdjacentHTML(Pn(e.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+we+'">'+Ft[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+we+'">'+Ft[1]+"</button></div>"),Ye=ut.querySelector(".tns-controls")),Ve&&Qe||(Ve=Ye.children[0],Qe=Ye.children[1]),e.controlsContainer&&T(Ye,{"aria-label":"Carousel Navigation",tabindex:"0"}),(e.controlsContainer||e.prevButton&&e.nextButton)&&T([Ve,Qe],{"aria-controls":we,tabindex:"-1"}),(e.controlsContainer||e.prevButton&&e.nextButton)&&(T(Ve,{"data-controls":"prev"}),T(Qe,{"data-controls":"next"})),We=yi(Ve),Ke=yi(Qe),xi(),Ye?B(Ye,Le):(B(Ve,Le),B(Qe,Le))),Un()}function Vn(){if(Z&&X){var t={};t[X]=Ni,B(ft,t)}Kt&&B(ft,Ne,e.preventScrollOnTouch),Yt&&B(ft,Pe),jt&&B(n,Oe),"inner"===U?ye.on("outerResized",function(){Gn(),ye.emit("innerLoaded",Ui())}):(J||Mt||St||_t||!ct)&&B(i,{resize:Qn}),_t&&("outer"===U?ye.on("innerLoaded",ci):xe||ci()),ri(),xe?ei():Te&&ti(),ye.on("indexChanged",di),"inner"===U&&ye.emit("innerLoaded",Ui()),"function"==typeof ge&&ge(Ui()),yt=!0}function Qn(t){o(function(){Gn(qi(t))})}function Gn(t){if(yt){"outer"===U&&ye.emit("outerResized",Ui(t)),gt=Nn();var i,o=lt,r=!1;J&&(Jn(),(i=o!==lt)&&ye.emit("newBreakpointStart",Ui(t)));var a,s,l=Dt,c=xe,u=Te,d=jt,f=qt,h=Wt,g=Kt,y=Yt,x=Xt,E=Gt,C=$t,T=ce;if(i){var A=Mt,L=_t,k=Ft,O=Pt,N=Qt;if(!R)var P=Ot,D=kt}if(jt=Bn("arrowKeys"),qt=Bn("controls"),Wt=Bn("nav"),Kt=Bn("touch"),Pt=Bn("center"),Yt=Bn("mouseDrag"),Xt=Bn("autoplay"),Gt=Bn("autoplayHoverPause"),$t=Bn("autoplayResetOnVisibility"),i&&(xe=Bn("disable"),Mt=Bn("fixedWidth"),It=Bn("speed"),_t=Bn("autoHeight"),Ft=Bn("controlsText"),Qt=Bn("autoplayText"),Vt=Bn("autoplayTimeout"),R||(kt=Bn("edgePadding"),Ot=Bn("gutter"))),Ln(xe),Nt=Dn(),ct&&!St||xe||(pi(),ct||(Gi(),r=!0)),(Mt||St)&&(ie=Ti(),fe=le()),(i||Mt)&&(Dt=Bn("items"),Ht=Bn("slideBy"),(s=Dt!==l)&&(Mt||St||(fe=le()),Tn())),i&&xe!==c&&(xe?ei():function(){if(!Ee)return;if(Jt.disabled=!1,ft.className+=be,Li(),Rt)for(var t=te;t--;)Z&&M(pt[t]),M(pt[ee-t-1]);if(!Z)for(var e=ce,n=ce+mt;e<n;e++){var i=pt[e],o=e<ce+Dt?it:at;i.style.left=100*(e-ce)/Dt+"%",b(i,o)}Zn(),Ee=!1}()),Ce&&(i||Mt||St)&&(Te=$n())!==u&&(Te?(Si(Ai(Mn(0))),ti()):(!function(){if(!Ae)return;kt&&R&&(dt.style.margin="");if(te)for(var t="tns-transparent",e=te;e--;)Z&&w(pt[e],t),w(pt[ee-e-1],t);Zn(),Ae=!1}(),r=!0)),Ln(xe||Te),Xt||(Gt=$t=!1),jt!==d&&(jt?B(n,Oe):j(n,Oe)),qt!==f&&(qt?Ye?M(Ye):(Ve&&M(Ve),Qe&&M(Qe)):Ye?S(Ye):(Ve&&S(Ve),Qe&&S(Qe))),Wt!==h&&(Wt?M(Ue):S(Ue)),Kt!==g&&(Kt?B(ft,Ne,e.preventScrollOnTouch):j(ft,Ne)),Yt!==y&&(Yt?B(ft,Pe):j(ft,Pe)),Xt!==x&&(Xt?(pn&&M(pn),un||fn||Ii()):(pn&&S(pn),un&&zi())),Gt!==E&&(Gt?B(ft,Me):j(ft,Me)),$t!==C&&($t?B(n,ke):j(n,ke)),i){if(Mt===A&&Pt===O||(r=!0),_t!==L&&(_t||(dt.style.height="")),qt&&Ft!==k&&(Ve.innerHTML=Ft[0],Qe.innerHTML=Ft[1]),pn&&Qt!==N){var H=Xt?1:0,I=pn.innerHTML,z=I.length-N[H].length;I.substring(z)===N[H]&&(pn.innerHTML=I.substring(0,z)+Qt[H])}}else Pt&&(Mt||St)&&(r=!0);if((s||Mt&&!St)&&(tn=$i(),Ji()),(a=ce!==T)?(ye.emit("indexChanged",Ui()),r=!0):s?a||di():(Mt||St)&&(ri(),mi(),ni()),!s&&Z||function(){for(var t=ce+Math.min(mt,Dt),e=ee;e--;){var n=pt[e];e>=ce&&e<t?(b(n,"tns-moving"),n.style.left=100*(e-ce)/Dt+"%",b(n,it),w(n,at)):n.style.left&&(n.style.left="",b(n,at),w(n,it)),w(n,ot)}setTimeout(function(){m(pt,function(t){w(t,"tns-moving")})},300)}(),!xe&&!Te){if(i&&!R&&(_t===autoheightTem&&It===speedTem||fi(),kt===D&&Ot===P||(dt.style.cssText=jn(kt,Ot,Mt,It,_t)),ct)){Z&&(ft.style.width=In(Mt,Ot,Dt));var _=zn(Mt,Ot,Dt)+Rn(Ot);!function(t,e){"deleteRule"in t?t.deleteRule(e):t.removeRule(e)}(Jt,p(Jt)-1),v(Jt,"#"+we+" > .tns-item",_,p(Jt))}_t&&ci(),r&&(Li(),ue=ce)}i&&ye.emit("newBreakpointEnd",Ui(t))}}function $n(){if(!Mt&&!St)return mt<=(Pt?Dt-(Dt-1)/2:Dt);var t=Mt?(Mt+Ot)*mt:bt[mt],e=kt?Nt+2*kt:Nt+Ot;return Pt&&(e-=Mt?(Nt-Mt)/2:(Nt-(bt[ce+1]-bt[ce]-Ot))/2),t<=e}function Jn(){for(var t in lt=0,J)t=parseInt(t),gt>=t&&(lt=t)}function Un(){!Xt&&pn&&S(pn),!Wt&&Ue&&S(Ue),qt||(Ye?S(Ye):(Ve&&S(Ve),Qe&&S(Qe)))}function Zn(){Xt&&pn&&M(pn),Wt&&Ue&&M(Ue),qt&&(Ye?M(Ye):(Ve&&M(Ve),Qe&&M(Qe)))}function ti(){if(!Ae){if(kt&&(dt.style.margin="0px"),te)for(var t="tns-transparent",e=te;e--;)Z&&b(pt[e],t),b(pt[ee-e-1],t);Un(),Ae=!0}}function ei(){if(!Ee){if(Jt.disabled=!0,ft.className=ft.className.replace(be.substring(1),""),A(ft,["style"]),Rt)for(var t=te;t--;)Z&&S(pt[t]),S(pt[ee-t-1]);if(ct&&Z||A(dt,["style"]),!Z)for(var e=ce,n=ce+mt;e<n;e++){var i=pt[e];A(i,["style"]),w(i,it),w(i,at)}Un(),Ee=!0}}function ni(){var t=ii();xt.innerHTML!==t&&(xt.innerHTML=t)}function ii(){var t=oi(),e=t[0]+1,n=t[1]+1;return e===n?e+"":e+" to "+n}function oi(t){null==t&&(t=Ai());var e,n,i,o=ce;if(Pt||kt?(St||Mt)&&(n=-(parseFloat(t)+kt),i=n+Nt+2*kt):St&&(n=bt[ce],i=n+Nt),St)bt.forEach(function(t,r){r<ee&&((Pt||kt)&&t<=n+.5&&(o=r),i-t>=.5&&(e=r))});else{if(Mt){var r=Mt+Ot;Pt||kt?(o=Math.floor(n/r),e=Math.ceil(i/r-1)):e=o+Math.ceil(Nt/r)-1}else if(Pt||kt){var a=Dt-1;if(Pt?(o-=a/2,e=ce+a/2):e=ce+a,kt){var s=kt*Dt/Nt;o-=s,e+=s}o=Math.floor(o),e=Math.ceil(e)}else e=o+Dt-1;o=Math.max(o,0),e=Math.min(e,ee-1)}return[o,e]}function ri(){Ut&&!xe&&li.apply(null,oi()).forEach(function(t){if(!y(t,_e)){var e={};e[X]=function(t){t.stopPropagation()},B(t,e),B(t,qe),t.src=E(t,"data-src");var n=E(t,"data-srcset");n&&(t.srcset=n),b(t,"loading")}})}function ai(t){b(t,"loaded"),si(t)}function si(t){b(t,"tns-complete"),w(t,"loading"),j(t,qe)}function li(t,e){for(var n=[];t<=e;)m(pt[t].querySelectorAll("img"),function(t){n.push(t)}),t++;return n}function ci(){var t=li.apply(null,oi());o(function(){ui(t,vi)})}function ui(t,e){return wt?e():(t.forEach(function(e,n){y(e,_e)&&t.splice(n,1)}),t.length?void o(function(){ui(t,e)}):e())}function di(){ri(),mi(),ni(),xi(),function(){if(Wt&&(on=nn>=0?nn:On(),nn=-1,on!==rn)){var t=Je[rn],e=Je[on];T(t,{tabindex:"-1","aria-label":sn+(rn+1)}),w(t,an),T(e,{"aria-label":sn+(on+1)+ln}),A(e,"tabindex"),b(e,an),rn=on}}()}function fi(){Z&&_t&&(st.style[F]=It/1e3+"s")}function hi(t,e){for(var n=[],i=t,o=Math.min(t+e,ee);i<o;i++)n.push(pt[i].offsetHeight);return Math.max.apply(null,n)}function vi(){var t=_t?hi(ce,Dt):hi(te,mt),e=st||dt;e.style.height!==t&&(e.style.height=t+"px")}function pi(){bt=[0];var t=ct?"left":"top",e=ct?"right":"bottom",n=pt[0].getBoundingClientRect()[t];m(pt,function(i,o){o&&bt.push(i.getBoundingClientRect()[t]-n),o===ee-1&&bt.push(i.getBoundingClientRect()[e]-n)})}function mi(){var t=oi(),e=t[0],n=t[1];m(pt,function(t,i){i>=e&&i<=n?x(t,"aria-hidden")&&(A(t,["aria-hidden","tabindex"]),b(t,Re)):x(t,"aria-hidden")||(T(t,{"aria-hidden":"true",tabindex:"-1"}),w(t,Re))})}function gi(t){return t.nodeName.toLowerCase()}function yi(t){return"button"===gi(t)}function bi(t){return"true"===t.getAttribute("aria-disabled")}function wi(t,e,n){t?e.disabled=n:e.setAttribute("aria-disabled",n.toString())}function xi(){if(qt&&!zt&&!Rt){var t=We?Ve.disabled:bi(Ve),e=Ke?Qe.disabled:bi(Qe),n=ce<=de,i=!zt&&ce>=fe;n&&!t&&wi(We,Ve,!0),!n&&t&&wi(We,Ve,!1),i&&!e&&wi(Ke,Qe,!0),!i&&e&&wi(Ke,Qe,!1)}}function Ei(t,e){F&&(t.style[F]=e)}function Ci(t){return null==t&&(t=ce),St?(Nt-(kt?Ot:0)-(bt[t+1]-bt[t]-Ot))/2:Mt?(Nt-Mt)/2:(Dt-1)/2}function Ti(){var t=Nt+(kt?Ot:0)-(Mt?(Mt+Ot)*ee:bt[ee]);return Pt&&!Rt&&(t=Mt?-(Mt+Ot)*(ee-1)-Ci():Ci(ee-1)-bt[ee-1]),t>0&&(t=0),t}function Ai(t){var e;if(null==t&&(t=ce),ct&&!St)if(Mt)e=-(Mt+Ot)*t,Pt&&(e+=Ci());else{var n=_?ee:Dt;Pt&&(t-=Ci()),e=100*-t/n}else e=-bt[t],Pt&&St&&(e+=Ci());return ne&&(e=Math.max(e,ie)),e+=!ct||St||Mt?"px":"%"}function Li(t){Ei(ft,"0s"),Si(t)}function Si(t){null==t&&(t=Ai()),ft.style[re]=ae+t+se}function Mi(t,e,n,i){var o=t+Dt;Rt||(o=Math.min(o,ee));for(var r=t;r<o;r++){var a=pt[r];i||(a.style.left=100*(r-ce)/Dt+"%"),rt&&W&&(a.style[W]=a.style[Y]=rt*(r-t)/1e3+"s"),w(a,e),b(a,n),i&&Zt.push(a)}}function ki(t,e){oe&&Tn(),(ce!==ue||e)&&(ye.emit("indexChanged",Ui()),ye.emit("transitionStart",Ui()),_t&&ci(),un&&t&&["click","keydown"].indexOf(t.type)>=0&&zi(),me=!0,An())}function Oi(t){return t.toLowerCase().replace(/-/g,"")}function Ni(t){if(Z||me){if(ye.emit("transitionEnd",Ui(t)),!Z&&Zt.length>0)for(var e=0;e<Zt.length;e++){var n=Zt[e];n.style.left="",Y&&W&&(n.style[Y]="",n.style[W]=""),w(n,ot),b(n,at)}if(!t||!Z&&t.target.parentNode===ft||t.target===ft&&Oi(t.propertyName)===Oi(re)){if(!oe){var i=ce;Tn(),ce!==i&&(ye.emit("indexChanged",Ui()),Li())}"inner"===U&&ye.emit("innerLoaded",Ui()),me=!1,ue=ce}}}function Pi(t,e){if(!Te)if("prev"===t)Di(e,-1);else if("next"===t)Di(e,1);else{if(me){if(he)return;Ni()}var n=kn(),i=0;if("first"===t?i=-n:"last"===t?i=Z?mt-Dt-n:mt-1-n:("number"!=typeof t&&(t=parseInt(t)),isNaN(t)||(e||(t=Math.max(0,Math.min(mt-1,t))),i=t-n)),!Z&&i&&Math.abs(i)<Dt){var o=i>0?1:-1;i+=ce+i-mt>=de?mt*o:2*mt*o*-1}ce+=i,Z&&Rt&&(ce<de&&(ce+=mt),ce>fe&&(ce-=mt)),kn(ce)!==kn(ue)&&ki(e)}}function Di(t,e){if(me){if(he)return;Ni()}var n;if(!e){for(var i=Fi(t=qi(t));i!==Ye&&[Ve,Qe].indexOf(i)<0;)i=i.parentNode;var o=[Ve,Qe].indexOf(i);o>=0&&(n=!0,e=0===o?-1:1)}if(zt){if(ce===de&&-1===e)return void Pi("last",t);if(ce===fe&&1===e)return void Pi("first",t)}e&&(ce+=Ht*e,St&&(ce=Math.floor(ce)),ki(n||t&&"keydown"===t.type?t:null))}function Hi(){cn=setInterval(function(){Di(null,vn)},Vt),un=!0}function Bi(){clearInterval(cn),un=!1}function ji(t,e){T(pn,{"data-action":t}),pn.innerHTML=gn[0]+t+gn[1]+e}function Ii(){Hi(),pn&&ji("stop",Qt[1])}function zi(){Bi(),pn&&ji("start",Qt[0])}function Ri(){un?(zi(),fn=!0):(Ii(),fn=!1)}function _i(t){t.focus()}function qi(t){return Wi(t=t||i.event)?t.changedTouches[0]:t}function Fi(t){return t.target||i.event.srcElement}function Wi(t){return t.type.indexOf("touch")>=0}function Ki(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function Yi(){return r=xn.y-wn.y,a=xn.x-wn.x,t=Math.atan2(r,a)*(180/Math.PI),n=ve,i=!1,(o=Math.abs(90-Math.abs(t)))>=90-n?i="horizontal":o<=n&&(i="vertical"),i===e.axis;var t,n,i,o,r,a}function Xi(t){if(me){if(he)return;Ni()}Xt&&un&&Bi(),En=!0,bn&&(a(bn),bn=null);var e=qi(t);ye.emit(Wi(t)?"touchStart":"dragStart",Ui(t)),!Wi(t)&&["img","a"].indexOf(gi(Fi(t)))>=0&&Ki(t),xn.x=wn.x=e.clientX,xn.y=wn.y=e.clientY,Z&&(yn=parseFloat(ft.style[re].replace(ae,"")),Ei(ft,"0s"))}function Vi(t){if(En){var e=qi(t);xn.x=e.clientX,xn.y=e.clientY,Z?bn||(bn=o(function(){!function t(e){if(!pe)return void(En=!1);a(bn);En&&(bn=o(function(){t(e)}));"?"===pe&&(pe=Yi());if(pe){!Fe&&Wi(e)&&(Fe=!0);try{e.type&&ye.emit(Wi(e)?"touchMove":"dragMove",Ui(e))}catch(t){}var n=yn,i=Cn(xn,wn);if(!ct||Mt||St)n+=i,n+="px";else{var r=_?i*Dt*100/((Nt+Ot)*ee):100*i/(Nt+Ot);n+=r,n+="%"}ft.style[re]=ae+n+se}}(t)})):("?"===pe&&(pe=Yi()),pe&&(Fe=!0)),Fe&&t.preventDefault()}}function Qi(t){if(En){bn&&(a(bn),bn=null),Z&&Ei(ft,""),En=!1;var n=qi(t);xn.x=n.clientX,xn.y=n.clientY;var i=Cn(xn,wn);if(Math.abs(i)){if(!Wi(t)){var r=Fi(t);B(r,{click:function t(e){Ki(e),j(r,{click:t})}})}Z?bn=o(function(){if(ct&&!St){var e=-i*Dt/(Nt+Ot);e=i>0?Math.floor(e):Math.ceil(e),ce+=e}else{var n=-(yn+i);if(n<=0)ce=de;else if(n>=bt[ee-1])ce=fe;else for(var o=0;o<ee&&n>=bt[o];)ce=o,n>bt[o]&&i<0&&(ce+=1),o++}ki(t,i),ye.emit(Wi(t)?"touchEnd":"dragEnd",Ui(t))}):pe&&Di(t,i>0?-1:1)}}"auto"===e.preventScrollOnTouch&&(Fe=!1),ve&&(pe="?"),Xt&&!un&&Hi()}function Gi(){(st||dt).style.height=bt[ce+Dt]-bt[ce]+"px"}function $i(){var t=Mt?(Mt+Ot)*mt/Nt:mt/Dt;return Math.min(Math.ceil(t),mt)}function Ji(){if(Wt&&!Be&&tn!==en){var t=en,e=tn,n=M;for(en>tn&&(t=tn,e=en,n=S);t<e;)n(Je[t]),t++;en=tn}}function Ui(t){return{container:ft,slideItems:pt,navContainer:Ue,navItems:Je,controlsContainer:Ye,hasControls:De,prevButton:Ve,nextButton:Qe,items:Dt,slideBy:Ht,cloneCount:te,slideCount:mt,slideCountNew:ee,index:ce,indexCached:ue,displayIndex:Sn(),navCurrentIndex:on,navCurrentIndexCached:rn,pages:tn,pagesCached:en,sheet:Jt,isOn:yt,event:t||{}}}Q&&console.warn("No slides found in",e.container)},G=n(0),$=n.n(G),J=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},U=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Z=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},tt=(R=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],_=function(){function t(e){var n=e.targetModal,i=e.triggers,o=void 0===i?[]:i,r=e.onShow,a=void 0===r?function(){}:r,s=e.onClose,l=void 0===s?function(){}:s,c=e.openTrigger,u=void 0===c?"data-micromodal-trigger":c,d=e.closeTrigger,f=void 0===d?"data-micromodal-close":d,h=e.disableScroll,v=void 0!==h&&h,p=e.disableFocus,m=void 0!==p&&p,g=e.awaitCloseAnimation,y=void 0!==g&&g,b=e.debugMode,w=void 0!==b&&b;J(this,t),this.modal=document.getElementById(n),this.config={debugMode:w,disableScroll:v,openTrigger:u,closeTrigger:f,onShow:a,onClose:l,awaitCloseAnimation:y,disableFocus:m},o.length>0&&this.registerTriggers.apply(this,Z(o)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}return U(t,[{key:"registerTriggers",value:function(){for(var t=this,e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];n.forEach(function(e){e.addEventListener("click",function(){return t.showModal()})})}},{key:"showModal",value:function(){this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add("is-open"),this.setFocusToFirstNode(),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.onShow(this.modal)}},{key:"closeModal",value:function(){var t=this.modal;this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement.focus(),this.config.onClose(this.modal),this.config.awaitCloseAnimation?this.modal.addEventListener("animationend",function e(){t.classList.remove("is-open"),t.removeEventListener("animationend",e,!1)},!1):t.classList.remove("is-open")}},{key:"scrollBehaviour",value:function(t){if(this.config.disableScroll){var e=document.querySelector("body");switch(t){case"enable":Object.assign(e.style,{overflow:"initial",height:"initial"});break;case"disable":Object.assign(e.style,{overflow:"hidden",height:"100vh"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(t){t.target.hasAttribute(this.config.closeTrigger)&&(this.closeModal(),t.preventDefault())}},{key:"onKeydown",value:function(t){27===t.keyCode&&this.closeModal(t),9===t.keyCode&&this.maintainFocus(t)}},{key:"getFocusableNodes",value:function(){var t=this.modal.querySelectorAll(R);return Object.keys(t).map(function(e){return t[e]})}},{key:"setFocusToFirstNode",value:function(){if(!this.config.disableFocus){var t=this.getFocusableNodes();t.length&&t[0].focus()}}},{key:"maintainFocus",value:function(t){var e=this.getFocusableNodes();if(this.modal.contains(document.activeElement)){var n=e.indexOf(document.activeElement);t.shiftKey&&0===n&&(e[e.length-1].focus(),t.preventDefault()),t.shiftKey||n!==e.length-1||(e[0].focus(),t.preventDefault())}else e[0].focus()}}]),t}(),q=null,F=function(t){if(!document.getElementById(t))return console.warn("MicroModal v0.3.1: ❗Seems like you have missed %c'"+t+"'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'+t+'"></div>'),!1},W=function(t,e){if(function(t){if(t.length<=0)console.warn("MicroModal v0.3.1: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>')}(t),!e)return!0;for(var n in e)F(n);return!0},{init:function(t){var e=Object.assign({},{openTrigger:"data-micromodal-trigger"},t),n=[].concat(Z(document.querySelectorAll("["+e.openTrigger+"]"))),i=function(t,e){var n=[];return t.forEach(function(t){var i=t.attributes[e].value;void 0===n[i]&&(n[i]=[]),n[i].push(t)}),n}(n,e.openTrigger);if(!0!==e.debugMode||!1!==W(n,i))for(var o in i){var r=i[o];e.targetModal=o,e.triggers=[].concat(Z(r)),new _(e)}},show:function(t,e){var n=e||{};n.targetModal=t,!0===n.debugMode&&!1===F(t)||(q=new _(n)).showModal()},close:function(){q.closeModal()}}),et=n(1),nt=n.n(et);function it(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function ot(){return(ot=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function rt(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Array.from||(Array.from=(K=Object.prototype.toString,Y=function(t){return"function"==typeof t||"[object Function]"===K.call(t)},X=Math.pow(2,53)-1,V=function(t){var e=function(t){var e=Number(t);return isNaN(e)?0:0!==e&&isFinite(e)?(e>0?1:-1)*Math.floor(Math.abs(e)):e}(t);return Math.min(Math.max(e,0),X)},function(t){var e=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var n,i=arguments.length>1?arguments[1]:void 0;if(void 0!==i){if(!Y(i))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(n=arguments[2])}for(var o,r=V(e.length),a=Y(this)?Object(new this(r)):new Array(r),s=0;s<r;)o=e[s],a[s]=i?void 0===n?i(o,s):i.call(n,o,s):o,s+=1;return a.length=r,a})),function(t,e){var n=(t.body||t.documentElement).style,i="",o="";""==n.WebkitAnimation&&(i="-webkit-"),""==n.MozAnimation&&(i="-moz-"),""==n.OAnimation&&(i="-o-"),""==n.WebkitTransition&&(o="-webkit-"),""==n.MozTransition&&(o="-moz-"),""==n.OTransition&&(o="-o-"),Object.defineProperty(Object.prototype,"onCSSAnimationEnd",{value:function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitAnimationEnd",e),this.addEventListener("mozAnimationEnd",e),this.addEventListener("oAnimationEnd",e),this.addEventListener("oanimationend",e),this.addEventListener("animationend",e),(""!=i||"animation"in n)&&"0s"!=getComputedStyle(this)[i+"animation-duration"]||t(),this},enumerable:!1,writable:!0}),Object.defineProperty(Object.prototype,"onCSSTransitionEnd",{value:function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitTransitionEnd",e),this.addEventListener("mozTransitionEnd",e),this.addEventListener("oTransitionEnd",e),this.addEventListener("transitionend",e),this.addEventListener("transitionend",e),(""!=o||"transition"in n)&&"0s"!=getComputedStyle(this)[o+"transition-duration"]||t(),this},enumerable:!1,writable:!0})}(document,window);var at=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var o="string"==typeof e?document.querySelector(e):e;if(null!=o){var r={headerClass:".js-badger-accordion-header",panelClass:".js-badger-accordion-panel",panelInnerClass:".js-badger-accordion-panel-inner",hiddenClass:"-ba-is-hidden",activeClass:"-ba-is-active",get hidenClass(){return this.hiddenClass},initializedClass:"badger-accordion--initialized",get initalisedClass(){return this.initializedClass},headerDataAttr:"data-badger-accordion-header-id",openMultiplePanels:!1,openHeadersOnLoad:[],headerOpenLabel:"",headerCloseLabel:"",roles:!0};this.settings=ot({},r,n),this.container=o;var a=Array.from(this.container.children),s=a.filter(function(t){return!t.classList.contains(i.settings.panelClass.substr(1))});this.headers=s.reduce(function(t,e){var n,o=Array.from(e.children).filter(function(t){return t.classList.contains(i.settings.headerClass.substr(1))});return t=(n=[]).concat.apply(n,rt(t).concat([o]))},[]),this.panels=a.filter(function(t){return t.classList.contains(i.settings.panelClass.substr(1))}),this.toggleEl=void 0!==this.settings.toggleEl?Array.from(this.container.querySelectorAll(this.settings.toggleEl)):this.headers,this.states=[].map.call(this.headers,function(){return{state:"closed"}}),this.ids=[].map.call(this.headers,function(){return{id:Math.floor(1e6*Math.random()+1)}}),this.toggling=!1,this.container?this.init():console.log("Something is wrong with you markup...")}}var e,n,i;return e=t,(n=[{key:"init",value:function(){this._setupAttributes(),this._initalState(),this.calculateAllPanelsHeight(),this._insertDataAttrs(),this._addListeners(),this._finishInitialization()}},{key:"_setRole",value:function(t,e){("boolean"==typeof this.settings.roles&&this.settings.roles||void 0!==this.settings.roles[t]&&!1!==this.settings.roles[t])&&e.setAttribute("role",t)}},{key:"_initalState",value:function(){var t=this.settings.openHeadersOnLoad;t.length&&this._openHeadersOnLoad(t),this._renderDom()}},{key:"_insertDataAttrs",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute(t.settings.headerDataAttr,n)})}},{key:"_finishInitialization",value:function(){this.container.classList.add(this.settings.initializedClass),this._setRole("presentation",this.container)}},{key:"_addListeners",value:function(){var t=this;this.headers.forEach(function(e,n){e.addEventListener("click",function(){t.handleClick(e,n)})})}},{key:"handleClick",value:function(t,e){var n=this.settings.headerClass.substr(1);t.classList.contains(n)&&!1===this.toggling&&(this.toggling=!0,this.setState(e),this._renderDom())}},{key:"setState",value:function(t){var e=this,n=this.getState();this.settings.openMultiplePanels||n.filter(function(e,n){n!=t&&(e.state="closed")}),n.filter(function(n,i){if(i==t){var o=e.toggleState(n.state);return n.state=o}})}},{key:"_renderDom",value:function(){var t=this;this.states.filter(function(e,n){"open"===e.state&&t.open(n,!1)}),this.states.filter(function(e,n){"closed"===e.state&&t.close(n,!1)})}},{key:"open",value:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&this.setState(t),this.togglePanel("open",t)}},{key:"close",value:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&this.setState(t),this.togglePanel("closed",t)}},{key:"openAll",value:function(){var t=this;this.headers.forEach(function(e,n){t.togglePanel("open",n)})}},{key:"closeAll",value:function(){var t=this;this.headers.forEach(function(e,n){t.togglePanel("closed",n)})}},{key:"togglePanel",value:function(t,e){var n=this;if(void 0!==t&&void 0!==e)if("closed"===t){var i=this.headers[e],o=this.panels[e];o.classList.add(this.settings.hiddenClass),o.classList.remove(this.settings.activeClass),i.classList.remove(this.settings.activeClass),i.setAttribute("aria-expanded",!1),o.onCSSTransitionEnd(function(){return n.toggling=!1})}else if("open"===t){var r=this.headers[e],a=this.panels[e];a.classList.remove(this.settings.hiddenClass),a.classList.add(this.settings.activeClass),r.classList.add(this.settings.activeClass),r.setAttribute("aria-expanded",!0),a.onCSSTransitionEnd(function(){return n.toggling=!1})}}},{key:"getState",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.length&&Array.isArray(e)?e.map(function(e){return t.states[e]}):this.states}},{key:"toggleState",value:function(t){if(void 0!==t)return"closed"===t?"open":"closed"}},{key:"_openHeadersOnLoad",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];e.length&&Array.isArray(e)&&e.filter(function(t){return null!=t}).forEach(function(e){t.setState(e)})}},{key:"_setupAttributes",value:function(){this._setupHeaders(),this._setupPanels(),this._insertDataAttrs()}},{key:"_setPanelHeight",value:function(){this.calculateAllPanelsHeight()}},{key:"calculatePanelHeight",value:function(t){var e=t.querySelector(this.settings.panelInnerClass).offsetHeight;return t.style.maxHeight="".concat(e,"px")}},{key:"calculateAllPanelsHeight",value:function(){var t=this;this.panels.forEach(function(e){t.calculatePanelHeight(e)})}},{key:"_setupHeaders",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute("id","badger-accordion-header-".concat(t.ids[n].id)),e.setAttribute("aria-controls","badger-accordion-panel-".concat(t.ids[n].id))})}},{key:"_setupPanels",value:function(){var t=this;this.panels.forEach(function(e,n){e.setAttribute("id","badger-accordion-panel-".concat(t.ids[n].id)),e.setAttribute("aria-labelledby","badger-accordion-header-".concat(t.ids[n].id)),!0!==t.settings.roles&&!1===t.settings.roles.region||t._setRole("region",e)})}}])&&it(e.prototype,n),i&&it(e,i),t}();n(5),new at(document.querySelector(".js-badger-accordion"));if(document.querySelector(".rellax"))new nt.a(".rellax",{speed:-2,center:!1,round:!0,vertical:!0});if(document.querySelector(".doc-slider"))Q({container:".doc-slider",items:4,gutter:40,controls:!0,controlsContainer:".doc-slider__controls",nav:!1,responsive:{1280:{items:4,controls:!0},980:{items:3,controls:!0},763:{items:2},480:{items:1},0:{items:1}}});if(document.querySelector(".slider"))Q({navContainer:".slider-controls",navAsThumbnails:!0,controls:!1});var st=$()(".offside-menu",{slidingElementsSelector:".offside__container",buttonsSelector:".offside__button, .offside__close",beforeOpen:function(){document.body.classList.add("offside-js--interact")},afterOpen:function(){document.body.classList.add("overflow-y")},beforeClose:function(){},afterClose:function(){document.body.classList.remove("offside-js--interact"),document.body.classList.remove("overflow-y")}});document.querySelector(".page-overlay").addEventListener("click",st.closeAll),window.onload=function(){for(var t=document.querySelectorAll(".tabs__link"),e=document.querySelectorAll(".tabs__item"),n=0;n<t.length;n++)t[n].addEventListener("click",function(n){n.preventDefault();for(var i=this.hash.replace("#",""),o=0;o<e.length;o++){var r=e[o];r.classList.remove("is-visible"),t[o].classList.remove("is-active"),r.id===i&&r.classList.add("is-visible")}this.classList.add("is-active")})},tt.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,