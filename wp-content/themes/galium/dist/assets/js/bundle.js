!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){!function(e,n,i){"use strict";var o=function(){function t(t){var o,r,a=function(t){x.length>0&&(isNaN(t)?x.forEach(function(t){y[t].close()}):y[t].close())},s=function(){l(C,g)},l=function(t,e){t.classList?t.classList.add(e):t.className=(t.className+" "+e).trim()},c=function(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")},u=function(t,e,n){t.addEventListener(e,n)},d=function(t,e,n){t.removeEventListener(e,n)},f=function(t){return t instanceof HTMLElement?[t]:Array.isArray(t)?t:"string"==typeof t&&Array.apply(null,n.querySelectorAll(t))},h=function(t,e){var n=t.indexOf(e);return n>-1&&n};for(o in r={slidingElementsSelector:".offside-sliding-element",disableCss3dTransforms:!1,debug:!1},t)r.hasOwnProperty(o)&&(r[o]=t[o]);var v="offside-js",p=v+"--init",m="offside-sliding-element",g=v+"--interact",y=[],b=!0,w=!r.disableCss3dTransforms&&function(){if(!e.getComputedStyle)return!1;var t,o=n.createElement("p"),r={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var a in n.body.insertBefore(o,null),r)o.style[a]!==i&&(o.style[a]="translate3d(1px,1px,1px)",t=e.getComputedStyle(o).getPropertyValue(r[a]));return n.body.removeChild(o),t!==i&&t.length>0&&"none"!==t}(),x=[],C=n.body,E=f(r.slidingElementsSelector),k=r.debug;function T(t,e,n){var o=f(t!==i?t:".offside");return!1!==o?new function(t,e,n){var i,o;for(i in o={buttonsSelector:"",slidingSide:"left",init:function(){},beforeOpen:function(){},afterOpen:function(){},beforeClose:function(){},afterClose:function(){},beforeDestroy:function(){},afterDestroy:function(){}},e)o.hasOwnProperty(i)&&(o[i]=e[i]);var r=t,p=f(o.buttonsSelector),m=o.slidingSide,g="offside--"+m,w=v+"--is-open",E=v+"--is-"+m,T=n||0,A=function(){!1===h(x,T)?S():L()},S=function(){o.beforeOpen(),b&&(b=!1,s()),a(),l(C,w),l(C,E),l(r,"is-open"),x.push(T),o.afterOpen()},L=function(){var t=h(x,T);!1!==t&&(o.beforeClose(),c(C,w),c(C,E),c(r,"is-open"),x.splice(t,1),o.afterClose())},M=function(t){t.preventDefault(),A()},O=function(){r||console.error('Offside alert: "offside" selector could not match any element'),p.length||console.error('Offside alert: "buttonsSelector" selector could not match any element')};this.toggle=function(){A()},this.open=function(){S()},this.close=function(){L()},this.closeAll=function(){a()},this.destroy=function(){o.beforeDestroy(),L(),p.forEach(function(t){d(t,"click",M)}),c(r,"offside"),c(r,g),delete y[T],o.afterDestroy()},function(){k&&O();l(r,"offside"),l(r,g),p.forEach(function(t){u(t,"click",M)}),o.init()}()}(o[0],e,n):null}return E.forEach(function(t){l(t,m)}),w||l(n.documentElement,"no-csstransforms3d"),l(C,p),{closeOpenOffside:function(){a()},getOffsideInstance:function(t,e){var n=y.length||0,i=T(t,e,n);if(null!==i)return y[n]=i}}}var o={getInstance:function(e,n){return o.getInstance.factory||(o.getInstance.factory=t(n)),o.getInstance.factory.getOffsideInstance(e,n)}};return o}();t.exports?t.exports=o.getInstance:e.offside=o.getInstance}(window,document)},function(t,e,n){(function(n){var i,o,r;"undefined"!=typeof window&&window,o=[],void 0===(r="function"==typeof(i=function(){return function t(e,n){"use strict";var i=Object.create(t.prototype),o=0,r=0,a=0,s=0,l=[],c=!0,u=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)},d=null,f=window.cancelAnimationFrame||window.mozCancelAnimationFrame||clearTimeout,h=window.transformProp||function(){var t=document.createElement("div");if(null===t.style.transform){var e=["Webkit","Moz","ms"];for(var n in e)if(void 0!==t.style[e[n]+"Transform"])return e[n]+"Transform"}return"transform"}();i.options={speed:-2,center:!1,wrapper:null,relativeToWrapper:!1,round:!0,vertical:!0,horizontal:!1,callback:function(){}},n&&Object.keys(n).forEach(function(t){i.options[t]=n[t]}),e||(e=".rellax");var v="string"==typeof e?document.querySelectorAll(e):[e];if(!(v.length>0))throw new Error("The elements you're trying to select don't exist.");if(i.elems=v,i.options.wrapper&&!i.options.wrapper.nodeType){var p=document.querySelector(i.options.wrapper);if(!p)throw new Error("The wrapper you're trying to use don't exist.");i.options.wrapper=p}var m=function t(){for(var e=0;e<l.length;e++)i.elems[e].style.cssText=l[e].style;l=[],r=window.innerHeight,s=window.innerWidth,y(),function(){for(var t=0;t<i.elems.length;t++){var e=g(i.elems[t]);l.push(e)}}(),c&&(window.addEventListener("resize",t),c=!1),w()},g=function(t){var e=t.getAttribute("data-rellax-percentage"),n=t.getAttribute("data-rellax-speed"),o=t.getAttribute("data-rellax-zindex")||0,a=i.options.wrapper?i.options.wrapper.scrollTop:window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;if(i.options.relativeToWrapper){var l=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;a=l-i.options.wrapper.offsetTop}var c=i.options.vertical&&(e||i.options.center)?a:0,u=i.options.horizontal&&(e||i.options.center)?window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft:0,d=c+t.getBoundingClientRect().top,f=t.clientHeight||t.offsetHeight||t.scrollHeight,h=u+t.getBoundingClientRect().left,v=t.clientWidth||t.offsetWidth||t.scrollWidth,p=e||(c-d+r)/(f+r),m=e||(u-h+s)/(v+s);i.options.center&&(m=.5,p=.5);var g=n||i.options.speed,y=b(m,p,g),w=t.style.cssText,x="";if(w.indexOf("transform")>=0){var C=w.indexOf("transform"),E=w.slice(C),k=E.indexOf(";");x=k?" "+E.slice(11,k).replace(/\s/g,""):" "+E.slice(11).replace(/\s/g,"")}return{baseX:y.x,baseY:y.y,top:d,left:h,height:f,width:v,speed:g,style:w,transform:x,zindex:o}},y=function(){var t=o,e=a;if(o=i.options.wrapper?i.options.wrapper.scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset,a=i.options.wrapper?i.options.wrapper.scrollLeft:(document.documentElement||document.body.parentNode||document.body).scrollLeft||window.pageXOffset,i.options.relativeToWrapper){var n=(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset;o=n-i.options.wrapper.offsetTop}return!(t==o||!i.options.vertical)||!(e==a||!i.options.horizontal)},b=function(t,e,n){var o={},r=n*(100*(1-t)),a=n*(100*(1-e));return o.x=i.options.round?Math.round(r):Math.round(100*r)/100,o.y=i.options.round?Math.round(a):Math.round(100*a)/100,o},w=function(){for(var t,e=0;e<i.elems.length;e++){var n=(o-l[e].top+r)/(l[e].height+r),c=(a-l[e].left+s)/(l[e].width+s),u=(t=b(c,n,l[e].speed)).y-l[e].baseY,d=t.x-l[e].baseX,f=l[e].zindex,v="translate3d("+(i.options.horizontal?d:"0")+"px,"+(i.options.vertical?u:"0")+"px,"+f+"px) "+l[e].transform;i.elems[e].style[h]=v}i.options.callback(t)};return i.destroy=function(){for(var t=0;t<i.elems.length;t++)i.elems[t].style.cssText=l[t].style;c||(window.removeEventListener("resize",m),c=!0),f(d),d=null},m(),function t(){y()&&!1===c&&w(),d=u(t)}(),i.refresh=m,i}})?i.apply(e,o):i)||(t.exports=r)}).call(this,n(4))},function(t,e,n){t.exports=n(8)},function(t,e){t.exports=jQuery},function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"===("undefined"==typeof window?"undefined":n(window))&&(i=window)}t.exports=i},function(t,e){var n=document.querySelector("#docform__selector"),i=document.querySelectorAll(".docmodal__button"),o=(document.querySelector(".docmodal__card"),["Яковлев Игорь Васильевич","http://localhost:8000/assets/img/doctor__yakovlev.jpg","Врач-нейрохирург"]),r=["Белоусова Ольга Николаевна","http://localhost:8000/assets/img/doctor__belousova.jpg","Врач-УЗИ"],a=["Хазов Алексей Петрович","http://localhost:8000/assets/img/doctor__hazov.jpg","Врач-ревматолог"],s=["Захарова Алла Ивановна","http://localhost:8000/assets/img/doctor__zaharova.jpg","Врач-гинеколог"],l=["Золотова Людмила Николаевна","http://localhost:8000/assets/img/doctor__zolotova.jpg","Врач-гастроэнтеролог"],c=["Арсеньева Елена Борисовна","http://localhost:8000/assets/img/doctor__arseneva.jpg","Врач-эндокринолог"],u=["Мацкевич Маргарита Леонидовна","http://localhost:8000/assets/img/doctor__mazkevich.jpg","Врач-невролог"],d=["Темарцев Александр Александрович","http://localhost:8000/assets/img/doctor__temarcev.jpg","Врач функциональной диагностики"],f=["Батушкина Валентина Петровна","http://localhost:8000/assets/img/doctor__batushkina.jpg","Врач-гастроэнтеролог"],h=["Гончарова Татьяна Васильевна","http://localhost:8000/assets/img/doctor__goncharova.jpg","Врач-терапевт"],v=["Мохова Наталия Константиновна","http://localhost:8000/assets/img/doctor__mohova.jpg","Врач-гинеколог"],p=["Расстрыгина Людмила Николаевна","http://localhost:8000/assets/img/doctor__rastrigina.jpg","Кардиолог"],m=["Козлова Козлина Козлиевна","http://localhost:8000/assets/img/doctor__kozlova.jpg","Врач-УЗИ"],g=["Каверина Галина Николаевна","http://localhost:8000/assets/img/doctor__kaverina.jpg","Врач-УЗИ"],y=["Долгушин","http://localhost:8000/assets/img/doctor__dolgushin.jpg","Гирудотерапевт"],b=["Степанян Людмила Геннадьевна","http://localhost:8000/assets/img/massage__stepanan.jpg","Медицинский массаж"],w=["Клемина Ольга Владимировна","http://localhost:8000/assets/img/massage__stepanan.jpg","Медицинский массаж"],x=document.createElement("h3");x.className="docmodal__name";var C=document.createElement("input");C.type="hidden";var E=document.createElement("img");E.className="docmodal__img";var k=document.createElement("span"),T=document.querySelector(".docmodal__hidden");n&&(A(n[0].value),console.log(n.length),1==n.length&&(n.disabled="true"),n.addEventListener("change",function(t){A(n[n.selectedIndex].value)}));function A(t){switch(t){case"yakovlev":S(o);break;case"hazov":S(a);break;case"belousova":S(r);break;case"zaharova":S(s);break;case"rastrigina":S(p);break;case"kozlova":S(m);break;case"zolotova":S(l);break;case"arseneva":S(c);break;case"mazkevich":S(u);break;case"temarcev":S(d);break;case"batushkina":S(f);break;case"goncharova":S(h);break;case"mohova":S(v);break;case"kaverina":S(g);break;case"dolgushin":S(y);break;case"stepanan":S(b);break;case"klemina":S(w);break;default:t=0}}function S(t){x.innerHTML=t[0],E.src=t[1],k.innerHTML=t[2],C.name=t[0],document.querySelector(".docmodal__imgbox").appendChild(E),document.querySelector(".docmodal__infobox").appendChild(x),document.querySelector(".docmodal__infobox").appendChild(k),T&&(T.appendChild(C),console.log("hidden div"))}i.forEach(function(t){t.addEventListener("click",function(e){A(t.dataset.doc)})})},,,function(t,e,n){"use strict";n.r(e);n(3);var i=window,o=i.requestAnimationFrame||i.webkitRequestAnimationFrame||i.mozRequestAnimationFrame||i.msRequestAnimationFrame||function(t){return setTimeout(t,16)},r=window,a=r.cancelAnimationFrame||r.mozCancelAnimationFrame||function(t){clearTimeout(t)};function s(){for(var t,e,n,i=arguments[0]||{},o=1,r=arguments.length;o<r;o++)if(null!==(t=arguments[o]))for(e in t)i!==(n=t[e])&&void 0!==n&&(i[e]=n);return i}function l(t){return["true","false"].indexOf(t)>=0?JSON.parse(t):t}function c(t,e,n,i){if(i)try{t.setItem(e,n)}catch(t){}return n}function u(){var t=document,e=t.body;return e||((e=t.createElement("body")).fake=!0),e}var d=document.documentElement;function f(t){var e="";return t.fake&&(e=d.style.overflow,t.style.background="",t.style.overflow=d.style.overflow="hidden",d.appendChild(t)),e}function h(t,e){t.fake&&(t.remove(),d.style.overflow=e,d.offsetHeight)}function v(t,e,n,i){"insertRule"in t?t.insertRule(e+"{"+n+"}",i):t.addRule(e,n,i)}function p(t){return("insertRule"in t?t.cssRules:t.rules).length}function m(t,e,n){for(var i=0,o=t.length;i<o;i++)e.call(n,t[i],i)}var g="classList"in document.createElement("_"),y=g?function(t,e){return t.classList.contains(e)}:function(t,e){return t.className.indexOf(e)>=0},b=g?function(t,e){y(t,e)||t.classList.add(e)}:function(t,e){y(t,e)||(t.className+=" "+e)},w=g?function(t,e){y(t,e)&&t.classList.remove(e)}:function(t,e){y(t,e)&&(t.className=t.className.replace(e,""))};function x(t,e){return t.hasAttribute(e)}function C(t,e){return t.getAttribute(e)}function E(t){return void 0!==t.item}function k(t,e){if(t=E(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(e))for(var n=t.length;n--;)for(var i in e)t[n].setAttribute(i,e[i])}function T(t,e){t=E(t)||t instanceof Array?t:[t];for(var n=(e=e instanceof Array?e:[e]).length,i=t.length;i--;)for(var o=n;o--;)t[i].removeAttribute(e[o])}function A(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function S(t,e){"none"!==t.style.display&&(t.style.display="none")}function L(t,e){"none"===t.style.display&&(t.style.display="")}function M(t){return"none"!==window.getComputedStyle(t).display}function O(t){if("string"==typeof t){var e=[t],n=t.charAt(0).toUpperCase()+t.substr(1);["Webkit","Moz","ms","O"].forEach(function(i){"ms"===i&&"transform"!==t||e.push(i+n)}),t=e}for(var i=document.createElement("fakeelement"),o=(t.length,0);o<t.length;o++){var r=t[o];if(void 0!==i.style[r])return r}return!1}function _(t,e){var n=!1;return/^Webkit/.test(t)?n="webkit"+e+"End":/^O/.test(t)?n="o"+e+"End":t&&(n=e.toLowerCase()+"end"),n}var j=!1;try{var N=Object.defineProperty({},"passive",{get:function(){j=!0}});window.addEventListener("test",null,N)}catch(t){}var P=!!j&&{passive:!0};function H(t,e,n){for(var i in e){var o=["touchstart","touchmove"].indexOf(i)>=0&&!n&&P;t.addEventListener(i,e[i],o)}}function z(t,e){for(var n in e){var i=["touchstart","touchmove"].indexOf(n)>=0&&P;t.removeEventListener(n,e[n],i)}}function D(t){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.keys||(Object.keys=function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});var B=function t(e){e=s({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0},e||{});var n=document,i=window,r={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},d={},g=e.useLocalStorage;if(g){var E=navigator.userAgent,j=new Date;try{(d=i.localStorage)?(d.setItem(j,j),g=d.getItem(j)==j,d.removeItem(j)):g=!1,g||(d={})}catch(t){g=!1}g&&(d.tnsApp&&d.tnsApp!==E&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(t){d.removeItem(t)}),localStorage.tnsApp=E)}var N=d.tC?l(d.tC):c(d,"tC",function(){var t=document,e=u(),n=f(e),i=t.createElement("div"),o=!1;e.appendChild(i);try{for(var r,a="(10px * 10)",s=["calc"+a,"-moz-calc"+a,"-webkit-calc"+a],l=0;l<3;l++)if(r=s[l],i.style.width=r,100===i.offsetWidth){o=r.replace(a,"");break}}catch(t){}return e.fake?h(e,n):i.remove(),o}(),g),P=d.tPL?l(d.tPL):c(d,"tPL",function(){var t,e=document,n=u(),i=f(n),o=e.createElement("div"),r=e.createElement("div"),a="";o.className="tns-t-subp2",r.className="tns-t-ct";for(var s=0;s<70;s++)a+="<div></div>";return r.innerHTML=a,o.appendChild(r),n.appendChild(o),t=Math.abs(o.getBoundingClientRect().left-r.children[67].getBoundingClientRect().left)<2,n.fake?h(n,i):o.remove(),t}(),g),B=d.tMQ?l(d.tMQ):c(d,"tMQ",function(){var t,e=document,n=u(),i=f(n),o=e.createElement("div"),r=e.createElement("style"),a="@media all and (min-width:1px){.tns-mq-test{position:absolute}}";return r.type="text/css",o.className="tns-mq-test",n.appendChild(r),n.appendChild(o),r.styleSheet?r.styleSheet.cssText=a:r.appendChild(e.createTextNode(a)),t=window.getComputedStyle?window.getComputedStyle(o).position:o.currentStyle.position,n.fake?h(n,i):o.remove(),"absolute"===t}(),g),I=d.tTf?l(d.tTf):c(d,"tTf",O("transform"),g),R=d.t3D?l(d.t3D):c(d,"t3D",function(t){if(!t)return!1;if(!window.getComputedStyle)return!1;var e,n=document,i=u(),o=f(i),r=n.createElement("p"),a=t.length>9?"-"+t.slice(0,-9).toLowerCase()+"-":"";return a+="transform",i.insertBefore(r,null),r.style[t]="translate3d(1px,1px,1px)",e=window.getComputedStyle(r).getPropertyValue(a),i.fake?h(i,o):r.remove(),void 0!==e&&e.length>0&&"none"!==e}(I),g),q=d.tTDu?l(d.tTDu):c(d,"tTDu",O("transitionDuration"),g),F=d.tTDe?l(d.tTDe):c(d,"tTDe",O("transitionDelay"),g),W=d.tADu?l(d.tADu):c(d,"tADu",O("animationDuration"),g),K=d.tADe?l(d.tADe):c(d,"tADe",O("animationDelay"),g),Y=d.tTE?l(d.tTE):c(d,"tTE",_(q,"Transition"),g),X=d.tAE?l(d.tAE):c(d,"tAE",_(W,"Animation"),g),V=i.console&&"function"==typeof i.console.warn,Q=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],G={};if(Q.forEach(function(t){if("string"==typeof e[t]){var i=e[t],o=n.querySelector(i);if(G[t]=i,!o||!o.nodeName)return void(V&&console.warn("Can't find",e[t]));e[t]=o}}),!(e.container.children.length<1)){var J=e.responsive,U=e.nested,$="carousel"===e.mode;if(J){0 in J&&(e=s(e,J[0]),delete J[0]);var Z={};for(var tt in J){var et=J[tt];et="number"==typeof et?{items:et}:et,Z[tt]=et}J=Z,Z=null}if($||function t(e){for(var n in e)$||("slideBy"===n&&(e[n]="page"),"edgePadding"===n&&(e[n]=!1),"autoHeight"===n&&(e[n]=!1)),"responsive"===n&&t(e[n])}(e),!$){e.axis="horizontal",e.slideBy="page",e.edgePadding=!1;var nt=e.animateIn,it=e.animateOut,ot=e.animateDelay,rt=e.animateNormal}var at,st,lt="horizontal"===e.axis,ct=n.createElement("div"),ut=n.createElement("div"),dt=e.container,ft=dt.parentNode,ht=dt.outerHTML,vt=dt.children,pt=vt.length,mt=Tn(),gt=!1;J&&Yn(),$&&(dt.className+=" tns-vpfix");var yt,bt,wt,xt=e.autoWidth,Ct=Mn("fixedWidth"),Et=Mn("edgePadding"),kt=Mn("gutter"),Tt=Sn(),At=Mn("center"),St=xt?1:Math.floor(Mn("items")),Lt=Mn("slideBy"),Mt=e.viewportMax||e.fixedWidthViewportWidth,Ot=Mn("arrowKeys"),_t=Mn("speed"),jt=e.rewind,Nt=!jt&&e.loop,Pt=Mn("autoHeight"),Ht=Mn("controls"),zt=Mn("controlsText"),Dt=Mn("nav"),Bt=Mn("touch"),It=Mn("mouseDrag"),Rt=Mn("autoplay"),qt=Mn("autoplayTimeout"),Ft=Mn("autoplayText"),Wt=Mn("autoplayHoverPause"),Kt=Mn("autoplayResetOnVisibility"),Yt=function(t){var e=document.createElement("style");return t&&e.setAttribute("media",t),document.querySelector("head").appendChild(e),e.sheet?e.sheet:e.styleSheet}(),Xt=e.lazyload,Vt=(e.lazyloadSelector,[]),Qt=Nt?function(){var t=function(){if(xt||Ct&&!Mt)return pt-1;var t=Ct?"fixedWidth":"items",n=[];if((Ct||e[t]<pt)&&n.push(e[t]),J)for(var i in J){var o=J[i][t];o&&(Ct||o<pt)&&n.push(o)}return n.length||n.push(0),Math.ceil(Ct?Mt/Math.min.apply(null,n):Math.max.apply(null,n))}(),n=$?Math.ceil((5*t-pt)/2):4*t-pt;return n=Math.max(t,n),Ln("edgePadding")?n+1:n}():0,Gt=$?pt+2*Qt:pt+Qt,Jt=!(!Ct&&!xt||Nt),Ut=Ct?yi():null,$t=!$||!Nt,Zt=lt?"left":"top",te="",ee="",ne=Ct?function(){return At&&!Nt?pt-1:Math.ceil(-Ut/(Ct+kt))}:xt?function(){for(var t=Gt;t--;)if(yt[t]>-Ut)return t}:function(){return At&&$&&!Nt?pt-1:Nt||$?Math.max(0,Gt-Math.ceil(St)):Gt-1},ie=Cn(Mn("startIndex")),oe=ie,re=(xn(),0),ae=xt?null:ne(),se=e.preventActionWhenRunning,le=e.swipeAngle,ce=!le||"?",ue=!1,de=e.onInit,fe=new function(){return{topics:{},on:function(t,e){this.topics[t]=this.topics[t]||[],this.topics[t].push(e)},off:function(t,e){if(this.topics[t])for(var n=0;n<this.topics[t].length;n++)if(this.topics[t][n]===e){this.topics[t].splice(n,1);break}},emit:function(t,e){e.type=t,this.topics[t]&&this.topics[t].forEach(function(n){n(e,t)})}}},he=" tns-slider tns-"+e.mode,ve=dt.id||function(){var t=window.tnsId;return window.tnsId=t?t+1:1,"tns"+window.tnsId}(),pe=Mn("disable"),me=!1,ge=e.freezable,ye=!(!ge||xt)&&Kn(),be=!1,we={click:Si,keydown:function(t){t=Hi(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);e>=0&&(0===e?qe.disabled||Si(t,-1):Fe.disabled||Si(t,1))}},xe={click:function(t){if(ue){if(se)return;Ti()}var e=zi(t=Hi(t));for(;e!==Xe&&!x(e,"data-nav");)e=e.parentNode;if(x(e,"data-nav")){var n=Je=Number(C(e,"data-nav")),i=Ct||xt?n*pt/Qe:n*St,o=Me?n:Math.min(Math.ceil(i),pt-1);Ai(o,t),Ue===n&&(on&&ji(),Je=-1)}},keydown:function(t){t=Hi(t);var e=n.activeElement;if(!x(e,"data-nav"))return;var i=[r.LEFT,r.RIGHT,r.ENTER,r.SPACE].indexOf(t.keyCode),o=Number(C(e,"data-nav"));i>=0&&(0===i?o>0&&Pi(Ye[o-1]):1===i?o<Qe-1&&Pi(Ye[o+1]):(Je=o,Ai(o,t)))}},Ce={mouseover:function(){on&&(Mi(),rn=!0)},mouseout:function(){rn&&(Li(),rn=!1)}},Ee={visibilitychange:function(){n.hidden?on&&(Mi(),sn=!0):sn&&(Li(),sn=!1)}},ke={keydown:function(t){t=Hi(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);e>=0&&Si(t,0===e?-1:1)}},Te={touchstart:Ri,touchmove:qi,touchend:Fi,touchcancel:Fi},Ae={mousedown:Ri,mousemove:qi,mouseup:Fi,mouseleave:Fi},Se=Ln("controls"),Le=Ln("nav"),Me=!!xt||e.navAsThumbnails,Oe=Ln("autoplay"),_e=Ln("touch"),je=Ln("mouseDrag"),Ne="tns-slide-active",Pe="tns-complete",He={load:function(t){ti(zi(t))},error:function(t){!function(t){b(t,"failed"),ei(t)}(zi(t))}},ze="force"===e.preventScrollOnTouch;if(Se)var De,Be,Ie=e.controlsContainer,Re=e.controlsContainer?e.controlsContainer.outerHTML:"",qe=e.prevButton,Fe=e.nextButton,We=e.prevButton?e.prevButton.outerHTML:"",Ke=e.nextButton?e.nextButton.outerHTML:"";if(Le)var Ye,Xe=e.navContainer,Ve=e.navContainer?e.navContainer.outerHTML:"",Qe=xt?pt:Ki(),Ge=0,Je=-1,Ue=kn(),$e=Ue,Ze="tns-nav-active",tn="Carousel Page ",en=" (Current Slide)";if(Oe)var nn,on,rn,an,sn,ln="forward"===e.autoplayDirection?1:-1,cn=e.autoplayButton,un=e.autoplayButton?e.autoplayButton.outerHTML:"",dn=["<span class='tns-visually-hidden'>"," animation</span>"];if(_e||je)var fn,hn,vn={},pn={},mn=!1,gn=lt?function(t,e){return t.x-e.x}:function(t,e){return t.y-e.y};xt||wn(pe||ye),I&&(Zt=I,te="translate",R?(te+=lt?"3d(":"3d(0px, ",ee=lt?", 0px, 0px)":", 0px)"):(te+=lt?"X(":"Y(",ee=")")),$&&(dt.className=dt.className.replace("tns-vpfix","")),function(){Ln("gutter");ct.className="tns-outer",ut.className="tns-inner",ct.id=ve+"-ow",ut.id=ve+"-iw",""===dt.id&&(dt.id=ve);he+=P||xt?" tns-subpixel":" tns-no-subpixel",he+=N?" tns-calc":" tns-no-calc",xt&&(he+=" tns-autowidth");he+=" tns-"+e.axis,dt.className+=he,$?((at=n.createElement("div")).id=ve+"-mw",at.className="tns-ovh",ct.appendChild(at),at.appendChild(ut)):ct.appendChild(ut);if(Pt){var t=at||ut;t.className+=" tns-ah"}if(ft.insertBefore(ct,dt),ut.appendChild(dt),m(vt,function(t,e){b(t,"tns-item"),t.id||(t.id=ve+"-item"+e),!$&&rt&&b(t,rt),k(t,{"aria-hidden":"true",tabindex:"-1"})}),Qt){for(var i=n.createDocumentFragment(),o=n.createDocumentFragment(),r=Qt;r--;){var a=r%pt,s=vt[a].cloneNode(!0);if(T(s,"id"),o.insertBefore(s,o.firstChild),$){var l=vt[pt-1-a].cloneNode(!0);T(l,"id"),i.appendChild(l)}}dt.insertBefore(i,dt.firstChild),dt.appendChild(o),vt=dt.children}}(),function(){if(!$)for(var t=ie,n=ie+Math.min(pt,St);t<n;t++){var o=vt[t];o.style.left=100*(t-ie)/St+"%",b(o,nt),w(o,rt)}lt&&(P||xt?(v(Yt,"#"+ve+" > .tns-item","font-size:"+i.getComputedStyle(vt[0]).fontSize+";",p(Yt)),v(Yt,"#"+ve,"font-size:0;",p(Yt))):$&&m(vt,function(t,e){t.style.marginLeft=function(t){return N?N+"("+100*t+"% / "+Gt+")":100*t/Gt+"%"}(e)}));if(B){if(q){var r=at&&e.autoHeight?Hn(e.speed):"";v(Yt,"#"+ve+"-mw",r,p(Yt))}r=On(e.edgePadding,e.gutter,e.fixedWidth,e.speed,e.autoHeight),v(Yt,"#"+ve+"-iw",r,p(Yt)),$&&(r=lt&&!xt?"width:"+_n(e.fixedWidth,e.gutter,e.items)+";":"",q&&(r+=Hn(_t)),v(Yt,"#"+ve,r,p(Yt))),r=lt&&!xt?jn(e.fixedWidth,e.gutter,e.items):"",e.gutter&&(r+=Nn(e.gutter)),$||(q&&(r+=Hn(_t)),W&&(r+=zn(_t))),r&&v(Yt,"#"+ve+" > .tns-item",r,p(Yt))}else{ai(),ut.style.cssText=On(Et,kt,Ct,Pt),$&&lt&&!xt&&(dt.style.width=_n(Ct,kt,St));var r=lt&&!xt?jn(Ct,kt,St):"";kt&&(r+=Nn(kt)),r&&v(Yt,"#"+ve+" > .tns-item",r,p(Yt))}if(J&&B)for(var a in J){a=parseInt(a);var s=J[a],r="",l="",c="",u="",d="",f=xt?null:Mn("items",a),h=Mn("fixedWidth",a),g=Mn("speed",a),y=Mn("edgePadding",a),x=Mn("autoHeight",a),C=Mn("gutter",a);q&&at&&Mn("autoHeight",a)&&"speed"in s&&(l="#"+ve+"-mw{"+Hn(g)+"}"),("edgePadding"in s||"gutter"in s)&&(c="#"+ve+"-iw{"+On(y,C,h,g,x)+"}"),$&&lt&&!xt&&("fixedWidth"in s||"items"in s||Ct&&"gutter"in s)&&(u="width:"+_n(h,C,f)+";"),q&&"speed"in s&&(u+=Hn(g)),u&&(u="#"+ve+"{"+u+"}"),("fixedWidth"in s||Ct&&"gutter"in s||!$&&"items"in s)&&(d+=jn(h,C,f)),"gutter"in s&&(d+=Nn(C)),!$&&"speed"in s&&(q&&(d+=Hn(g)),W&&(d+=zn(g))),d&&(d="#"+ve+" > .tns-item{"+d+"}"),(r=l+c+u+d)&&Yt.insertRule("@media (min-width: "+a/16+"em) {"+r+"}",Yt.cssRules.length)}}(),Dn();var yn=Nt?$?function(){var t=re,e=ae;t+=Lt,e-=Lt,Et?(t+=1,e-=1):Ct&&(Tt+kt)%(Ct+kt)&&(e-=1),Qt&&(ie>e?ie-=pt:ie<t&&(ie+=pt))}:function(){if(ie>ae)for(;ie>=re+pt;)ie-=pt;else if(ie<re)for(;ie<=ae-pt;)ie+=pt}:function(){ie=Math.max(re,Math.min(ae,ie))},bn=$?function(){mi(dt,""),q||!_t?(xi(),_t&&M(dt)||Ti()):function(t,e,n,i,o,r,a){var s=Math.min(r,10),l=o.indexOf("%")>=0?"%":"px",c=(o=o.replace(l,""),Number(t.style[e].replace(n,"").replace(i,"").replace(l,""))),u=(o-c)/r*s;setTimeout(function o(){r-=s,c+=u,t.style[e]=n+c+l+i,r>0?setTimeout(o,s):a()},s)}(dt,Zt,te,ee,bi(),_t,Ti),lt||Wi()}:function(){Vt=[];var t={};t[Y]=t[X]=Ti,z(vt[oe],t),H(vt[ie],t),Ci(oe,nt,it,!0),Ci(ie,rt,nt),Y&&X&&_t&&M(dt)||Ti()};return{version:"2.9.1",getInfo:Xi,events:fe,goTo:Ai,play:function(){Rt&&!on&&(_i(),an=!1)},pause:function(){on&&(ji(),an=!0)},isOn:gt,updateSliderHeight:li,refresh:Dn,destroy:function(){if(Yt.disabled=!0,Yt.ownerNode&&Yt.ownerNode.remove(),z(i,{resize:Fn}),Ot&&z(n,ke),Ie&&z(Ie,we),Xe&&z(Xe,xe),z(dt,Ce),z(dt,Ee),cn&&z(cn,{click:Ni}),Rt&&clearInterval(nn),$&&Y){var t={};t[Y]=Ti,z(dt,t)}Bt&&z(dt,Te),It&&z(dt,Ae);var o=[ht,Re,We,Ke,Ve,un];for(var r in Q.forEach(function(t,n){var i="container"===t?ct:e[t];if("object"===D(i)){var r=!!i.previousElementSibling&&i.previousElementSibling,a=i.parentNode;i.outerHTML=o[n],e[t]=r?r.nextElementSibling:a.firstElementChild}}),Q=nt=it=ot=rt=lt=ct=ut=dt=ft=ht=vt=pt=st=mt=xt=Ct=Et=kt=Tt=St=Lt=Mt=Ot=_t=jt=Nt=Pt=Yt=Xt=yt=Vt=Qt=Gt=Jt=Ut=$t=Zt=te=ee=ne=ie=oe=re=ae=le=ce=ue=de=fe=he=ve=pe=me=ge=ye=be=we=xe=Ce=Ee=ke=Te=Ae=Se=Le=Me=Oe=_e=je=Ne=Pe=He=bt=Ht=zt=Ie=Re=qe=Fe=De=Be=Dt=Xe=Ve=Ye=Qe=Ge=Je=Ue=$e=Ze=tn=en=Rt=qt=ln=Ft=Wt=cn=un=Kt=dn=nn=on=rn=an=sn=vn=pn=fn=mn=hn=gn=Bt=It=null,this)"rebuild"!==r&&(this[r]=null);gt=!1},rebuild:function(){return t(s(e,G))}}}function wn(t){t&&(Ht=Dt=Bt=It=Ot=Rt=Wt=Kt=!1)}function xn(){for(var t=$?ie-Qt:ie;t<0;)t+=pt;return t%pt+1}function Cn(t){return t=t?Math.max(0,Math.min(Nt?pt-1:pt-St,t)):0,$?t+Qt:t}function En(t){for(null==t&&(t=ie),$&&(t-=Qt);t<0;)t+=pt;return Math.floor(t%pt)}function kn(){var t,e=En();return t=Me?e:Ct||xt?Math.ceil((e+1)*Qe/pt-1):Math.floor(e/St),!Nt&&$&&ie===ae&&(t=Qe-1),t}function Tn(){return i.innerWidth||n.documentElement.clientWidth||n.body.clientWidth}function An(t){return"top"===t?"afterbegin":"beforeend"}function Sn(){var t=Et?2*Et-kt:0;return function t(e){var i,o,r=n.createElement("div");return e.appendChild(r),o=(i=r.getBoundingClientRect()).right-i.left,r.remove(),o||t(e.parentNode)}(ft)-t}function Ln(t){if(e[t])return!0;if(J)for(var n in J)if(J[n][t])return!0;return!1}function Mn(t,n){if(null==n&&(n=mt),"items"===t&&Ct)return Math.floor((Tt+kt)/(Ct+kt))||1;var i=e[t];if(J)for(var o in J)n>=parseInt(o)&&t in J[o]&&(i=J[o][t]);return"slideBy"===t&&"page"===i&&(i=Mn("items")),$||"slideBy"!==t&&"items"!==t||(i=Math.floor(i)),i}function On(t,e,n,i,o){var r="";if(void 0!==t){var a=t;e&&(a-=e),r=lt?"margin: 0 "+a+"px 0 "+t+"px;":"margin: "+t+"px 0 "+a+"px 0;"}else if(e&&!n){var s="-"+e+"px";r="margin: 0 "+(lt?s+" 0 0":"0 "+s+" 0")+";"}return!$&&o&&q&&i&&(r+=Hn(i)),r}function _n(t,e,n){return t?(t+e)*Gt+"px":N?N+"("+100*Gt+"% / "+n+")":100*Gt/n+"%"}function jn(t,e,n){var i;if(t)i=t+e+"px";else{$||(n=Math.floor(n));var o=$?Gt:n;i=N?N+"(100% / "+o+")":100/o+"%"}return i="width:"+i,"inner"!==U?i+";":i+" !important;"}function Nn(t){var e="";!1!==t&&(e=(lt?"padding-":"margin-")+(lt?"right":"bottom")+": "+t+"px;");return e}function Pn(t,e){var n=t.substring(0,t.length-e).toLowerCase();return n&&(n="-"+n+"-"),n}function Hn(t){return Pn(q,18)+"transition-duration:"+t/1e3+"s;"}function zn(t){return Pn(W,17)+"animation-duration:"+t/1e3+"s;"}function Dn(){if(Ln("autoHeight")||xt||!lt){var t=dt.querySelectorAll("img");m(t,function(t){var e=t.src;e&&e.indexOf("data:image")<0?(H(t,He),t.src="",t.src=e,b(t,"loading")):Xt||ti(t)}),o(function(){oi(A(t),function(){bt=!0})}),!xt&&lt&&(t=ni(ie,Math.min(ie+St-1,Gt-1))),Xt?Bn():o(function(){oi(A(t),Bn)})}else $&&wi(),Rn(),qn()}function Bn(){if(xt){var t=Nt?ie:pt-1;!function e(){vt[t-1].getBoundingClientRect().right.toFixed(2)===vt[t].getBoundingClientRect().left.toFixed(2)?In():setTimeout(function(){e()},16)}()}else In()}function In(){lt&&!xt||(ci(),xt?(Ut=yi(),ge&&(ye=Kn()),ae=ne(),wn(pe||ye)):Wi()),$&&wi(),Rn(),qn()}function Rn(){if(ui(),ct.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+Un()+"</span>  of "+pt+"</div>"),wt=ct.querySelector(".tns-liveregion .current"),Oe){var t=Rt?"stop":"start";cn?k(cn,{"data-action":t}):e.autoplayButtonOutput&&(ct.insertAdjacentHTML(An(e.autoplayPosition),'<button data-action="'+t+'">'+dn[0]+t+dn[1]+Ft[0]+"</button>"),cn=ct.querySelector("[data-action]")),cn&&H(cn,{click:Ni}),Rt&&(_i(),Wt&&H(dt,Ce),Kt&&H(dt,Ee))}if(Le){if(Xe)k(Xe,{"aria-label":"Carousel Pagination"}),m(Ye=Xe.children,function(t,e){k(t,{"data-nav":e,tabindex:"-1","aria-label":tn+(e+1),"aria-controls":ve})});else{for(var n="",i=Me?"":'style="display:none"',o=0;o<pt;o++)n+='<button data-nav="'+o+'" tabindex="-1" aria-controls="'+ve+'" '+i+' aria-label="'+tn+(o+1)+'"></button>';n='<div class="tns-nav" aria-label="Carousel Pagination">'+n+"</div>",ct.insertAdjacentHTML(An(e.navPosition),n),Xe=ct.querySelector(".tns-nav"),Ye=Xe.children}if(Yi(),q){var r=q.substring(0,q.length-18).toLowerCase(),a="transition: all "+_t/1e3+"s";r&&(a="-"+r+"-"+a),v(Yt,"[aria-controls^="+ve+"-item]",a,p(Yt))}k(Ye[Ue],{"aria-label":tn+(Ue+1)+en}),T(Ye[Ue],"tabindex"),b(Ye[Ue],Ze),H(Xe,xe)}Se&&(Ie||qe&&Fe||(ct.insertAdjacentHTML(An(e.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+ve+'">'+zt[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+ve+'">'+zt[1]+"</button></div>"),Ie=ct.querySelector(".tns-controls")),qe&&Fe||(qe=Ie.children[0],Fe=Ie.children[1]),e.controlsContainer&&k(Ie,{"aria-label":"Carousel Navigation",tabindex:"0"}),(e.controlsContainer||e.prevButton&&e.nextButton)&&k([qe,Fe],{"aria-controls":ve,tabindex:"-1"}),(e.controlsContainer||e.prevButton&&e.nextButton)&&(k(qe,{"data-controls":"prev"}),k(Fe,{"data-controls":"next"})),De=fi(qe),Be=fi(Fe),pi(),Ie?H(Ie,we):(H(qe,we),H(Fe,we))),Xn()}function qn(){if($&&Y){var t={};t[Y]=Ti,H(dt,t)}Bt&&H(dt,Te,e.preventScrollOnTouch),It&&H(dt,Ae),Ot&&H(n,ke),"inner"===U?fe.on("outerResized",function(){Wn(),fe.emit("innerLoaded",Xi())}):(J||Ct||xt||Pt||!lt)&&H(i,{resize:Fn}),Pt&&("outer"===U?fe.on("innerLoaded",ii):pe||ii()),Zn(),pe?Gn():ye&&Qn(),fe.on("indexChanged",ri),"inner"===U&&fe.emit("innerLoaded",Xi()),"function"==typeof de&&de(Xi()),gt=!0}function Fn(t){o(function(){Wn(Hi(t))})}function Wn(t){if(gt){"outer"===U&&fe.emit("outerResized",Xi(t)),mt=Tn();var i,o=st,r=!1;J&&(Yn(),(i=o!==st)&&fe.emit("newBreakpointStart",Xi(t)));var a,s,l=St,c=pe,u=ye,d=Ot,f=Ht,h=Dt,g=Bt,y=It,x=Rt,C=Wt,E=Kt,k=ie;if(i){var T=Ct,A=Pt,M=zt,O=At,_=Ft;if(!B)var j=kt,N=Et}if(Ot=Mn("arrowKeys"),Ht=Mn("controls"),Dt=Mn("nav"),Bt=Mn("touch"),At=Mn("center"),It=Mn("mouseDrag"),Rt=Mn("autoplay"),Wt=Mn("autoplayHoverPause"),Kt=Mn("autoplayResetOnVisibility"),i&&(pe=Mn("disable"),Ct=Mn("fixedWidth"),_t=Mn("speed"),Pt=Mn("autoHeight"),zt=Mn("controlsText"),Ft=Mn("autoplayText"),qt=Mn("autoplayTimeout"),B||(Et=Mn("edgePadding"),kt=Mn("gutter"))),wn(pe),Tt=Sn(),lt&&!xt||pe||(ci(),lt||(Wi(),r=!0)),(Ct||xt)&&(Ut=yi(),ae=ne()),(i||Ct)&&(St=Mn("items"),Lt=Mn("slideBy"),(s=St!==l)&&(Ct||xt||(ae=ne()),yn())),i&&pe!==c&&(pe?Gn():function(){if(!me)return;if(Yt.disabled=!1,dt.className+=he,wi(),Nt)for(var t=Qt;t--;)$&&L(vt[t]),L(vt[Gt-t-1]);if(!$)for(var e=ie,n=ie+pt;e<n;e++){var i=vt[e],o=e<ie+St?nt:rt;i.style.left=100*(e-ie)/St+"%",b(i,o)}Vn(),me=!1}()),ge&&(i||Ct||xt)&&(ye=Kn())!==u&&(ye?(xi(bi(Cn(0))),Qn()):(!function(){if(!be)return;Et&&B&&(ut.style.margin="");if(Qt)for(var t="tns-transparent",e=Qt;e--;)$&&w(vt[e],t),w(vt[Gt-e-1],t);Vn(),be=!1}(),r=!0)),wn(pe||ye),Rt||(Wt=Kt=!1),Ot!==d&&(Ot?H(n,ke):z(n,ke)),Ht!==f&&(Ht?Ie?L(Ie):(qe&&L(qe),Fe&&L(Fe)):Ie?S(Ie):(qe&&S(qe),Fe&&S(Fe))),Dt!==h&&(Dt?L(Xe):S(Xe)),Bt!==g&&(Bt?H(dt,Te,e.preventScrollOnTouch):z(dt,Te)),It!==y&&(It?H(dt,Ae):z(dt,Ae)),Rt!==x&&(Rt?(cn&&L(cn),on||an||_i()):(cn&&S(cn),on&&ji())),Wt!==C&&(Wt?H(dt,Ce):z(dt,Ce)),Kt!==E&&(Kt?H(n,Ee):z(n,Ee)),i){if(Ct===T&&At===O||(r=!0),Pt!==A&&(Pt||(ut.style.height="")),Ht&&zt!==M&&(qe.innerHTML=zt[0],Fe.innerHTML=zt[1]),cn&&Ft!==_){var P=Rt?1:0,D=cn.innerHTML,I=D.length-_[P].length;D.substring(I)===_[P]&&(cn.innerHTML=D.substring(0,I)+Ft[P])}}else At&&(Ct||xt)&&(r=!0);if((s||Ct&&!xt)&&(Qe=Ki(),Yi()),(a=ie!==k)?(fe.emit("indexChanged",Xi()),r=!0):s?a||ri():(Ct||xt)&&(Zn(),ui(),Jn()),!s&&$||function(){for(var t=ie+Math.min(pt,St),e=Gt;e--;){var n=vt[e];e>=ie&&e<t?(b(n,"tns-moving"),n.style.left=100*(e-ie)/St+"%",b(n,nt),w(n,rt)):n.style.left&&(n.style.left="",b(n,rt),w(n,nt)),w(n,it)}setTimeout(function(){m(vt,function(t){w(t,"tns-moving")})},300)}(),!pe&&!ye){if(i&&!B&&(Pt===autoheightTem&&_t===speedTem||ai(),Et===N&&kt===j||(ut.style.cssText=On(Et,kt,Ct,_t,Pt)),lt)){$&&(dt.style.width=_n(Ct,kt,St));var R=jn(Ct,kt,St)+Nn(kt);!function(t,e){"deleteRule"in t?t.deleteRule(e):t.removeRule(e)}(Yt,p(Yt)-1),v(Yt,"#"+ve+" > .tns-item",R,p(Yt))}Pt&&ii(),r&&(wi(),oe=ie)}i&&fe.emit("newBreakpointEnd",Xi(t))}}function Kn(){if(!Ct&&!xt)return pt<=(At?St-(St-1)/2:St);var t=Ct?(Ct+kt)*pt:yt[pt],e=Et?Tt+2*Et:Tt+kt;return At&&(e-=Ct?(Tt-Ct)/2:(Tt-(yt[ie+1]-yt[ie]-kt))/2),t<=e}function Yn(){for(var t in st=0,J)t=parseInt(t),mt>=t&&(st=t)}function Xn(){!Rt&&cn&&S(cn),!Dt&&Xe&&S(Xe),Ht||(Ie?S(Ie):(qe&&S(qe),Fe&&S(Fe)))}function Vn(){Rt&&cn&&L(cn),Dt&&Xe&&L(Xe),Ht&&(Ie?L(Ie):(qe&&L(qe),Fe&&L(Fe)))}function Qn(){if(!be){if(Et&&(ut.style.margin="0px"),Qt)for(var t="tns-transparent",e=Qt;e--;)$&&b(vt[e],t),b(vt[Gt-e-1],t);Xn(),be=!0}}function Gn(){if(!me){if(Yt.disabled=!0,dt.className=dt.className.replace(he.substring(1),""),T(dt,["style"]),Nt)for(var t=Qt;t--;)$&&S(vt[t]),S(vt[Gt-t-1]);if(lt&&$||T(ut,["style"]),!$)for(var e=ie,n=ie+pt;e<n;e++){var i=vt[e];T(i,["style"]),w(i,nt),w(i,rt)}Xn(),me=!0}}function Jn(){var t=Un();wt.innerHTML!==t&&(wt.innerHTML=t)}function Un(){var t=$n(),e=t[0]+1,n=t[1]+1;return e===n?e+"":e+" to "+n}function $n(t){null==t&&(t=bi());var e,n,i,o=ie;if(At||Et?(xt||Ct)&&(n=-(parseFloat(t)+Et),i=n+Tt+2*Et):xt&&(n=yt[ie],i=n+Tt),xt)yt.forEach(function(t,r){r<Gt&&((At||Et)&&t<=n+.5&&(o=r),i-t>=.5&&(e=r))});else{if(Ct){var r=Ct+kt;At||Et?(o=Math.floor(n/r),e=Math.ceil(i/r-1)):e=o+Math.ceil(Tt/r)-1}else if(At||Et){var a=St-1;if(At?(o-=a/2,e=ie+a/2):e=ie+a,Et){var s=Et*St/Tt;o-=s,e+=s}o=Math.floor(o),e=Math.ceil(e)}else e=o+St-1;o=Math.max(o,0),e=Math.min(e,Gt-1)}return[o,e]}function Zn(){Xt&&!pe&&ni.apply(null,$n()).forEach(function(t){if(!y(t,Pe)){var e={};e[Y]=function(t){t.stopPropagation()},H(t,e),H(t,He),t.src=C(t,"data-src");var n=C(t,"data-srcset");n&&(t.srcset=n),b(t,"loading")}})}function ti(t){b(t,"loaded"),ei(t)}function ei(t){b(t,"tns-complete"),w(t,"loading"),z(t,He)}function ni(t,e){for(var n=[];t<=e;)m(vt[t].querySelectorAll("img"),function(t){n.push(t)}),t++;return n}function ii(){var t=ni.apply(null,$n());o(function(){oi(t,li)})}function oi(t,e){return bt?e():(t.forEach(function(e,n){y(e,Pe)&&t.splice(n,1)}),t.length?void o(function(){oi(t,e)}):e())}function ri(){Zn(),ui(),Jn(),pi(),function(){if(Dt&&(Ue=Je>=0?Je:kn(),Je=-1,Ue!==$e)){var t=Ye[$e],e=Ye[Ue];k(t,{tabindex:"-1","aria-label":tn+($e+1)}),w(t,Ze),k(e,{"aria-label":tn+(Ue+1)+en}),T(e,"tabindex"),b(e,Ze),$e=Ue}}()}function ai(){$&&Pt&&(at.style[q]=_t/1e3+"s")}function si(t,e){for(var n=[],i=t,o=Math.min(t+e,Gt);i<o;i++)n.push(vt[i].offsetHeight);return Math.max.apply(null,n)}function li(){var t=Pt?si(ie,St):si(Qt,pt),e=at||ut;e.style.height!==t&&(e.style.height=t+"px")}function ci(){yt=[0];var t=lt?"left":"top",e=lt?"right":"bottom",n=vt[0].getBoundingClientRect()[t];m(vt,function(i,o){o&&yt.push(i.getBoundingClientRect()[t]-n),o===Gt-1&&yt.push(i.getBoundingClientRect()[e]-n)})}function ui(){var t=$n(),e=t[0],n=t[1];m(vt,function(t,i){i>=e&&i<=n?x(t,"aria-hidden")&&(T(t,["aria-hidden","tabindex"]),b(t,Ne)):x(t,"aria-hidden")||(k(t,{"aria-hidden":"true",tabindex:"-1"}),w(t,Ne))})}function di(t){return t.nodeName.toLowerCase()}function fi(t){return"button"===di(t)}function hi(t){return"true"===t.getAttribute("aria-disabled")}function vi(t,e,n){t?e.disabled=n:e.setAttribute("aria-disabled",n.toString())}function pi(){if(Ht&&!jt&&!Nt){var t=De?qe.disabled:hi(qe),e=Be?Fe.disabled:hi(Fe),n=ie<=re,i=!jt&&ie>=ae;n&&!t&&vi(De,qe,!0),!n&&t&&vi(De,qe,!1),i&&!e&&vi(Be,Fe,!0),!i&&e&&vi(Be,Fe,!1)}}function mi(t,e){q&&(t.style[q]=e)}function gi(t){return null==t&&(t=ie),xt?(Tt-(Et?kt:0)-(yt[t+1]-yt[t]-kt))/2:Ct?(Tt-Ct)/2:(St-1)/2}function yi(){var t=Tt+(Et?kt:0)-(Ct?(Ct+kt)*Gt:yt[Gt]);return At&&!Nt&&(t=Ct?-(Ct+kt)*(Gt-1)-gi():gi(Gt-1)-yt[Gt-1]),t>0&&(t=0),t}function bi(t){var e;if(null==t&&(t=ie),lt&&!xt)if(Ct)e=-(Ct+kt)*t,At&&(e+=gi());else{var n=I?Gt:St;At&&(t-=gi()),e=100*-t/n}else e=-yt[t],At&&xt&&(e+=gi());return Jt&&(e=Math.max(e,Ut)),e+=!lt||xt||Ct?"px":"%"}function wi(t){mi(dt,"0s"),xi(t)}function xi(t){null==t&&(t=bi()),dt.style[Zt]=te+t+ee}function Ci(t,e,n,i){var o=t+St;Nt||(o=Math.min(o,Gt));for(var r=t;r<o;r++){var a=vt[r];i||(a.style.left=100*(r-ie)/St+"%"),ot&&F&&(a.style[F]=a.style[K]=ot*(r-t)/1e3+"s"),w(a,e),b(a,n),i&&Vt.push(a)}}function Ei(t,e){$t&&yn(),(ie!==oe||e)&&(fe.emit("indexChanged",Xi()),fe.emit("transitionStart",Xi()),Pt&&ii(),on&&t&&["click","keydown"].indexOf(t.type)>=0&&ji(),ue=!0,bn())}function ki(t){return t.toLowerCase().replace(/-/g,"")}function Ti(t){if($||ue){if(fe.emit("transitionEnd",Xi(t)),!$&&Vt.length>0)for(var e=0;e<Vt.length;e++){var n=Vt[e];n.style.left="",K&&F&&(n.style[K]="",n.style[F]=""),w(n,it),b(n,rt)}if(!t||!$&&t.target.parentNode===dt||t.target===dt&&ki(t.propertyName)===ki(Zt)){if(!$t){var i=ie;yn(),ie!==i&&(fe.emit("indexChanged",Xi()),wi())}"inner"===U&&fe.emit("innerLoaded",Xi()),ue=!1,oe=ie}}}function Ai(t,e){if(!ye)if("prev"===t)Si(e,-1);else if("next"===t)Si(e,1);else{if(ue){if(se)return;Ti()}var n=En(),i=0;if("first"===t?i=-n:"last"===t?i=$?pt-St-n:pt-1-n:("number"!=typeof t&&(t=parseInt(t)),isNaN(t)||(e||(t=Math.max(0,Math.min(pt-1,t))),i=t-n)),!$&&i&&Math.abs(i)<St){var o=i>0?1:-1;i+=ie+i-pt>=re?pt*o:2*pt*o*-1}ie+=i,$&&Nt&&(ie<re&&(ie+=pt),ie>ae&&(ie-=pt)),En(ie)!==En(oe)&&Ei(e)}}function Si(t,e){if(ue){if(se)return;Ti()}var n;if(!e){for(var i=zi(t=Hi(t));i!==Ie&&[qe,Fe].indexOf(i)<0;)i=i.parentNode;var o=[qe,Fe].indexOf(i);o>=0&&(n=!0,e=0===o?-1:1)}if(jt){if(ie===re&&-1===e)return void Ai("last",t);if(ie===ae&&1===e)return void Ai("first",t)}e&&(ie+=Lt*e,xt&&(ie=Math.floor(ie)),Ei(n||t&&"keydown"===t.type?t:null))}function Li(){nn=setInterval(function(){Si(null,ln)},qt),on=!0}function Mi(){clearInterval(nn),on=!1}function Oi(t,e){k(cn,{"data-action":t}),cn.innerHTML=dn[0]+t+dn[1]+e}function _i(){Li(),cn&&Oi("stop",Ft[1])}function ji(){Mi(),cn&&Oi("start",Ft[0])}function Ni(){on?(ji(),an=!0):(_i(),an=!1)}function Pi(t){t.focus()}function Hi(t){return Di(t=t||i.event)?t.changedTouches[0]:t}function zi(t){return t.target||i.event.srcElement}function Di(t){return t.type.indexOf("touch")>=0}function Bi(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function Ii(){return function(t,e){var n=!1,i=Math.abs(90-Math.abs(t));return i>=90-e?n="horizontal":i<=e&&(n="vertical"),n}(function(t,e){return Math.atan2(t,e)*(180/Math.PI)}(pn.y-vn.y,pn.x-vn.x),le)===e.axis}function Ri(t){if(ue){if(se)return;Ti()}Rt&&on&&Mi(),mn=!0,hn&&(a(hn),hn=null);var e=Hi(t);fe.emit(Di(t)?"touchStart":"dragStart",Xi(t)),!Di(t)&&["img","a"].indexOf(di(zi(t)))>=0&&Bi(t),pn.x=vn.x=e.clientX,pn.y=vn.y=e.clientY,$&&(fn=parseFloat(dt.style[Zt].replace(te,"")),mi(dt,"0s"))}function qi(t){if(mn){var e=Hi(t);pn.x=e.clientX,pn.y=e.clientY,$?hn||(hn=o(function(){!function t(e){if(!ce)return void(mn=!1);a(hn);mn&&(hn=o(function(){t(e)}));"?"===ce&&(ce=Ii());if(ce){!ze&&Di(e)&&(ze=!0);try{e.type&&fe.emit(Di(e)?"touchMove":"dragMove",Xi(e))}catch(t){}var n=fn,i=gn(pn,vn);if(!lt||Ct||xt)n+=i,n+="px";else{var r=I?i*St*100/((Tt+kt)*Gt):100*i/(Tt+kt);n+=r,n+="%"}dt.style[Zt]=te+n+ee}}(t)})):("?"===ce&&(ce=Ii()),ce&&(ze=!0)),ze&&t.preventDefault()}}function Fi(t){if(mn){hn&&(a(hn),hn=null),$&&mi(dt,""),mn=!1;var n=Hi(t);pn.x=n.clientX,pn.y=n.clientY;var i=gn(pn,vn);if(Math.abs(i)){if(!Di(t)){var r=zi(t);H(r,{click:function t(e){Bi(e),z(r,{click:t})}})}$?hn=o(function(){if(lt&&!xt){var e=-i*St/(Tt+kt);e=i>0?Math.floor(e):Math.ceil(e),ie+=e}else{var n=-(fn+i);if(n<=0)ie=re;else if(n>=yt[Gt-1])ie=ae;else for(var o=0;o<Gt&&n>=yt[o];)ie=o,n>yt[o]&&i<0&&(ie+=1),o++}Ei(t,i),fe.emit(Di(t)?"touchEnd":"dragEnd",Xi(t))}):ce&&Si(t,i>0?-1:1)}}"auto"===e.preventScrollOnTouch&&(ze=!1),le&&(ce="?"),Rt&&!on&&Li()}function Wi(){(at||ut).style.height=yt[ie+St]-yt[ie]+"px"}function Ki(){var t=Ct?(Ct+kt)*pt/Tt:pt/St;return Math.min(Math.ceil(t),pt)}function Yi(){if(Dt&&!Me&&Qe!==Ge){var t=Ge,e=Qe,n=L;for(Ge>Qe&&(t=Qe,e=Ge,n=S);t<e;)n(Ye[t]),t++;Ge=Qe}}function Xi(t){return{container:dt,slideItems:vt,navContainer:Xe,navItems:Ye,controlsContainer:Ie,hasControls:Se,prevButton:qe,nextButton:Fe,items:St,slideBy:Lt,cloneCount:Qt,slideCount:pt,slideCountNew:Gt,index:ie,indexCached:oe,displayIndex:xn(),navCurrentIndex:Ue,navCurrentIndexCached:$e,pages:Qe,pagesCached:Ge,sheet:Yt,isOn:gt,event:t||{}}}V&&console.warn("No slides found in",e.container)},I=n(0),R=n.n(I),q=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},F=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),W=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},K=function(){var t=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],e=function(){function e(t){var n=t.targetModal,i=t.triggers,o=void 0===i?[]:i,r=t.onShow,a=void 0===r?function(){}:r,s=t.onClose,l=void 0===s?function(){}:s,c=t.openTrigger,u=void 0===c?"data-micromodal-trigger":c,d=t.closeTrigger,f=void 0===d?"data-micromodal-close":d,h=t.disableScroll,v=void 0!==h&&h,p=t.disableFocus,m=void 0!==p&&p,g=t.awaitCloseAnimation,y=void 0!==g&&g,b=t.debugMode,w=void 0!==b&&b;q(this,e),this.modal=document.getElementById(n),this.config={debugMode:w,disableScroll:v,openTrigger:u,closeTrigger:f,onShow:a,onClose:l,awaitCloseAnimation:y,disableFocus:m},o.length>0&&this.registerTriggers.apply(this,W(o)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}return F(e,[{key:"registerTriggers",value:function(){for(var t=this,e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];n.forEach(function(e){e.addEventListener("click",function(){return t.showModal()})})}},{key:"showModal",value:function(){this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add("is-open"),this.setFocusToFirstNode(),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.onShow(this.modal)}},{key:"closeModal",value:function(){var t=this.modal;this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement.focus(),this.config.onClose(this.modal),this.config.awaitCloseAnimation?this.modal.addEventListener("animationend",function e(){t.classList.remove("is-open"),t.removeEventListener("animationend",e,!1)},!1):t.classList.remove("is-open")}},{key:"scrollBehaviour",value:function(t){if(this.config.disableScroll){var e=document.querySelector("body");switch(t){case"enable":Object.assign(e.style,{overflow:"initial",height:"initial"});break;case"disable":Object.assign(e.style,{overflow:"hidden",height:"100vh"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(t){t.target.hasAttribute(this.config.closeTrigger)&&(this.closeModal(),t.preventDefault())}},{key:"onKeydown",value:function(t){27===t.keyCode&&this.closeModal(t),9===t.keyCode&&this.maintainFocus(t)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(t);return Object.keys(e).map(function(t){return e[t]})}},{key:"setFocusToFirstNode",value:function(){if(!this.config.disableFocus){var t=this.getFocusableNodes();t.length&&t[0].focus()}}},{key:"maintainFocus",value:function(t){var e=this.getFocusableNodes();if(this.modal.contains(document.activeElement)){var n=e.indexOf(document.activeElement);t.shiftKey&&0===n&&(e[e.length-1].focus(),t.preventDefault()),t.shiftKey||n!==e.length-1||(e[0].focus(),t.preventDefault())}else e[0].focus()}}]),e}(),n=null,i=function(t){if(!document.getElementById(t))return console.warn("MicroModal v0.3.1: ❗Seems like you have missed %c'"+t+"'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'+t+'"></div>'),!1},o=function(t,e){if(function(t){if(t.length<=0)console.warn("MicroModal v0.3.1: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>')}(t),!e)return!0;for(var n in e)i(n);return!0};return{init:function(t){var n=Object.assign({},{openTrigger:"data-micromodal-trigger"},t),i=[].concat(W(document.querySelectorAll("["+n.openTrigger+"]"))),r=function(t,e){var n=[];return t.forEach(function(t){var i=t.attributes[e].value;void 0===n[i]&&(n[i]=[]),n[i].push(t)}),n}(i,n.openTrigger);if(!0!==n.debugMode||!1!==o(i,r))for(var a in r){var s=r[a];n.targetModal=a,n.triggers=[].concat(W(s)),new e(n)}},show:function(t,o){var r=o||{};r.targetModal=t,!0===r.debugMode&&!1===i(t)||(n=new e(r)).showModal()},close:function(){n.closeModal()}}}(),Y=n(1),X=n.n(Y);function V(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function Q(){return(Q=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function G(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Array.from||(Array.from=function(){var t=Object.prototype.toString,e=function(e){return"function"==typeof e||"[object Function]"===t.call(e)},n=Math.pow(2,53)-1,i=function(t){var e=function(t){var e=Number(t);return isNaN(e)?0:0!==e&&isFinite(e)?(e>0?1:-1)*Math.floor(Math.abs(e)):e}(t);return Math.min(Math.max(e,0),n)};return function(t){var n=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var o,r=arguments.length>1?arguments[1]:void 0;if(void 0!==r){if(!e(r))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(o=arguments[2])}for(var a,s=i(n.length),l=e(this)?Object(new this(s)):new Array(s),c=0;c<s;)a=n[c],l[c]=r?void 0===o?r(a,c):r.call(o,a,c):a,c+=1;return l.length=s,l}}()),function(t,e){var n=(t.body||t.documentElement).style,i="",o="";""==n.WebkitAnimation&&(i="-webkit-"),""==n.MozAnimation&&(i="-moz-"),""==n.OAnimation&&(i="-o-"),""==n.WebkitTransition&&(o="-webkit-"),""==n.MozTransition&&(o="-moz-"),""==n.OTransition&&(o="-o-"),Object.defineProperty(Object.prototype,"onCSSAnimationEnd",{value:function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitAnimationEnd",e),this.addEventListener("mozAnimationEnd",e),this.addEventListener("oAnimationEnd",e),this.addEventListener("oanimationend",e),this.addEventListener("animationend",e),(""!=i||"animation"in n)&&"0s"!=getComputedStyle(this)[i+"animation-duration"]||t(),this},enumerable:!1,writable:!0}),Object.defineProperty(Object.prototype,"onCSSTransitionEnd",{value:function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitTransitionEnd",e),this.addEventListener("mozTransitionEnd",e),this.addEventListener("oTransitionEnd",e),this.addEventListener("transitionend",e),this.addEventListener("transitionend",e),(""!=o||"transition"in n)&&"0s"!=getComputedStyle(this)[o+"transition-duration"]||t(),this},enumerable:!1,writable:!0})}(document,window);var J=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var o="string"==typeof e?document.querySelector(e):e;if(null!=o){var r={headerClass:".js-badger-accordion-header",panelClass:".js-badger-accordion-panel",panelInnerClass:".js-badger-accordion-panel-inner",hiddenClass:"-ba-is-hidden",activeClass:"-ba-is-active",get hidenClass(){return this.hiddenClass},initializedClass:"badger-accordion--initialized",get initalisedClass(){return this.hiddenClass},headerDataAttr:"data-badger-accordion-header-id",openMultiplePanels:!1,openHeadersOnLoad:[],headerOpenLabel:"",headerCloseLabel:"",roles:!0};this.settings=Q({},r,n),this.settings.hidenClass!==this.settings.hiddenClass&&(this.settings.hiddenClass=this.settings.hidenClass),this.container=o;var a=Array.from(this.container.children),s=a.filter(function(t){return!t.classList.contains(i.settings.panelClass.substr(1))});this.headers=s.reduce(function(t,e){var n,o=Array.from(e.children).filter(function(t){return t.classList.contains(i.settings.headerClass.substr(1))});return t=(n=[]).concat.apply(n,G(t).concat([o]))},[]),this.panels=a.filter(function(t){return t.classList.contains(i.settings.panelClass.substr(1))}),this.toggleEl=void 0!==this.settings.toggleEl?Array.from(this.container.querySelectorAll(this.settings.toggleEl)):this.headers,this.states=[].map.call(this.headers,function(){return{state:"closed"}}),this.ids=[].map.call(this.headers,function(){return{id:Math.floor(1e6*Math.random()+1)}}),this.toggling=!1,this.container?this.init():console.log("Something is wrong with you markup...")}}return function(t,e,n){e&&V(t.prototype,e),n&&V(t,n)}(t,[{key:"init",value:function(){this._setupAttributes(),this._initalState(),this.calculateAllPanelsHeight(),this._insertDataAttrs(),this._addListeners(),this._finishInitialization()}},{key:"_setRole",value:function(t,e){("boolean"==typeof this.settings.roles&&this.settings.roles||void 0!==this.settings.roles[t]&&!1!==this.settings.roles[t])&&e.setAttribute("role",t)}},{key:"_initalState",value:function(){var t=this.settings.openHeadersOnLoad;t.length&&this._openHeadersOnLoad(t),this._renderDom()}},{key:"_insertDataAttrs",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute(t.settings.headerDataAttr,n)})}},{key:"_finishInitialization",value:function(){this.container.classList.add(this.settings.initializedClass),this._setRole("presentation",this.container)}},{key:"_addListeners",value:function(){var t=this;this.headers.forEach(function(e,n){e.addEventListener("click",function(){t.handleClick(e,n)})})}},{key:"handleClick",value:function(t,e){var n=this.settings.headerClass.substr(1);t.classList.contains(n)&&!1===this.toggling&&(this.toggling=!0,this.setState(e),this._renderDom())}},{key:"setState",value:function(t){var e=this,n=this.getState();this.settings.openMultiplePanels||n.filter(function(e,n){n!=t&&(e.state="closed")}),n.filter(function(n,i){if(i==t){var o=e.toggleState(n.state);return n.state=o}})}},{key:"_renderDom",value:function(){var t=this;this.states.filter(function(e,n){"open"===e.state&&t.open(n,!1)}),this.states.filter(function(e,n){"closed"===e.state&&t.close(n,!1)})}},{key:"open",value:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&this.setState(t),this.togglePanel("open",t)}},{key:"close",value:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&this.setState(t),this.togglePanel("closed",t)}},{key:"openAll",value:function(){var t=this;this.headers.forEach(function(e,n){t.togglePanel("open",n)})}},{key:"closeAll",value:function(){var t=this;this.headers.forEach(function(e,n){t.togglePanel("closed",n)})}},{key:"togglePanel",value:function(t,e){var n=this;if(void 0!==t&&void 0!==e)if("closed"===t){var i=this.headers[e],o=this.panels[e];o.classList.add(this.settings.hiddenClass),o.classList.remove(this.settings.activeClass),i.classList.remove(this.settings.activeClass),i.setAttribute("aria-expanded",!1),o.onCSSTransitionEnd(function(){return n.toggling=!1})}else if("open"===t){var r=this.headers[e],a=this.panels[e];a.classList.remove(this.settings.hiddenClass),a.classList.add(this.settings.activeClass),r.classList.add(this.settings.activeClass),r.setAttribute("aria-expanded",!0),a.onCSSTransitionEnd(function(){return n.toggling=!1})}}},{key:"getState",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.length&&Array.isArray(e)?e.map(function(e){return t.states[e]}):this.states}},{key:"toggleState",value:function(t){if(void 0!==t)return"closed"===t?"open":"closed"}},{key:"_openHeadersOnLoad",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];e.length&&Array.isArray(e)&&e.filter(function(t){return void 0!=t}).forEach(function(e){t.setState(e)})}},{key:"_setupAttributes",value:function(){this._setupHeaders(),this._setupPanels(),this._insertDataAttrs()}},{key:"_setPanelHeight",value:function(){this.calculateAllPanelsHeight()}},{key:"calculatePanelHeight",value:function(t){var e=t.querySelector(this.settings.panelInnerClass).offsetHeight;return t.style.maxHeight="".concat(e,"px")}},{key:"calculateAllPanelsHeight",value:function(){var t=this;this.panels.forEach(function(e){t.calculatePanelHeight(e)})}},{key:"_setupHeaders",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute("id","badger-accordion-header-".concat(t.ids[n].id)),e.setAttribute("aria-controls","badger-accordion-panel-".concat(t.ids[n].id))})}},{key:"_setupPanels",value:function(){var t=this;this.panels.forEach(function(e,n){e.setAttribute("id","badger-accordion-panel-".concat(t.ids[n].id)),e.setAttribute("aria-labelledby","badger-accordion-header-".concat(t.ids[n].id)),!0!==t.settings.roles&&!1===t.settings.roles.region||t._setRole("region",e)})}}]),t}();n(5),new J(document.querySelector(".js-badger-accordion"));if(document.querySelector(".rellax"))new X.a(".rellax",{speed:-2,center:!1,round:!0,vertical:!0});if(document.querySelector(".doc-slider"))B({container:".doc-slider",items:4,gutter:40,controls:!0,controlsContainer:".doc-slider__controls",nav:!1,responsive:{1280:{items:4,controls:!0},980:{items:3,controls:!0},763:{items:2},480:{items:1},0:{items:1}}});if(document.querySelector(".slider"))B({navContainer:".slider-controls",navAsThumbnails:!0,controls:!1});var U=R()(".offside-menu",{slidingElementsSelector:".offside__container",buttonsSelector:".offside__button, .offside__close",beforeOpen:function(){document.body.classList.add("offside-js--interact")},afterOpen:function(){document.body.classList.add("overflow-y")},beforeClose:function(){},afterClose:function(){document.body.classList.remove("offside-js--interact"),document.body.classList.remove("overflow-y")}});document.querySelector(".page-overlay").addEventListener("click",U.closeAll),window.onload=function(){for(var t=document.querySelectorAll(".tabs__link"),e=document.querySelectorAll(".tabs__item"),n=0;n<t.length;n++)t[n].addEventListener("click",function(n){n.preventDefault();for(var i=this.hash.replace("#",""),o=0;o<e.length;o++){var r=e[o];r.classList.remove("is-visible"),t[o].classList.remove("is-active"),r.id===i&&r.classList.add("is-visible")}this.classList.add("is-active")})},K.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,