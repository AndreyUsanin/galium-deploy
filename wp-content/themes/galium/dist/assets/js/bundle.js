!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":n(window))&&(i=window)}t.exports=i},function(t,e,n){!function(e,n,i){"use strict";var r=function(){function t(t){var r,o,a=function(t){x.length>0&&(isNaN(t)?x.forEach(function(t){g[t].close()}):g[t].close())},s=function(){p(E,y)},p=function(t,e){t.classList?t.classList.add(e):t.className=(t.className+" "+e).trim()},l=function(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")},c=function(t,e,n){t.addEventListener(e,n)},d=function(t,e,n){t.removeEventListener(e,n)},u=function(t){return t instanceof HTMLElement?[t]:Array.isArray(t)?t:"string"==typeof t&&Array.apply(null,n.querySelectorAll(t))},f=function(t,e){var n=t.indexOf(e);return n>-1&&n};for(r in o={slidingElementsSelector:".offside-sliding-element",disableCss3dTransforms:!1,debug:!1},t)o.hasOwnProperty(r)&&(o[r]=t[r]);var m="offside-js",h=m+"--init",v="offside-sliding-element",y=m+"--interact",g=[],b=!0,w=!o.disableCss3dTransforms&&function(){if(!e.getComputedStyle)return!1;var t,r=n.createElement("p"),o={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var a in n.body.insertBefore(r,null),o)r.style[a]!==i&&(r.style[a]="translate3d(1px,1px,1px)",t=e.getComputedStyle(r).getPropertyValue(o[a]));return n.body.removeChild(r),t!==i&&t.length>0&&"none"!==t}(),x=[],E=n.body,k=u(o.slidingElementsSelector),C=o.debug;function L(t,e,n){var i,r;for(i in r={buttonsSelector:"",slidingSide:"left",init:function(){},beforeOpen:function(){},afterOpen:function(){},beforeClose:function(){},afterClose:function(){},beforeDestroy:function(){},afterDestroy:function(){}},e)r.hasOwnProperty(i)&&(r[i]=e[i]);var o=t,h=u(r.buttonsSelector),v=r.slidingSide,y="offside--"+v,w=m+"--is-open",k=m+"--is-"+v,L=n||0,T=function(){!1===f(x,L)?A():O()},A=function(){r.beforeOpen(),b&&(b=!1,s()),a(),p(E,w),p(E,k),p(o,"is-open"),x.push(L),r.afterOpen()},O=function(){var t=f(x,L);!1!==t&&(r.beforeClose(),l(E,w),l(E,k),l(o,"is-open"),x.splice(t,1),r.afterClose())},S=function(t){t.preventDefault(),T()},M=function(){o||console.error('Offside alert: "offside" selector could not match any element'),h.length||console.error('Offside alert: "buttonsSelector" selector could not match any element')};this.toggle=function(){T()},this.open=function(){A()},this.close=function(){O()},this.closeAll=function(){a()},this.destroy=function(){r.beforeDestroy(),O(),h.forEach(function(t){d(t,"click",S)}),l(o,"offside"),l(o,y),delete g[L],r.afterDestroy()},C&&M(),p(o,"offside"),p(o,y),h.forEach(function(t){c(t,"click",S)}),r.init()}return k.forEach(function(t){p(t,v)}),w||p(n.documentElement,"no-csstransforms3d"),p(E,h),{closeOpenOffside:function(){a()},getOffsideInstance:function(t,e){var n=g.length||0,r=function(t,e,n){var r=u(t!==i?t:".offside");return!1!==r?new L(r[0],e,n):null}(t,e,n);if(null!==r)return g[n]=r}}}var r={getInstance:function(e,n){return r.getInstance.factory||(r.getInstance.factory=t(n)),r.getInstance.factory.getOffsideInstance(e,n)}};return r}();t.exports?t.exports=r.getInstance:e.offside=r.getInstance}(window,document)},function(t,e,n){(function(n){var i,r,o;"undefined"!=typeof window&&window,r=[],void 0===(o="function"==typeof(i=function(){return function t(e,n){"use strict";var i=Object.create(t.prototype),r=0,o=0,a=0,s=0,p=[],l=!0,c=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)},d=null,u=window.cancelAnimationFrame||window.mozCancelAnimationFrame||clearTimeout,f=window.transformProp||function(){var t=document.createElement("div");if(null===t.style.transform){var e=["Webkit","Moz","ms"];for(var n in e)if(void 0!==t.style[e[n]+"Transform"])return e[n]+"Transform"}return"transform"}();i.options={speed:-2,center:!1,wrapper:null,relativeToWrapper:!1,round:!0,vertical:!0,horizontal:!1,callback:function(){}},n&&Object.keys(n).forEach(function(t){i.options[t]=n[t]}),e||(e=".rellax");var m="string"==typeof e?document.querySelectorAll(e):[e];if(!(m.length>0))throw new Error("The elements you're trying to select don't exist.");if(i.elems=m,i.options.wrapper&&!i.options.wrapper.nodeType){var h=document.querySelector(i.options.wrapper);if(!h)throw new Error("The wrapper you're trying to use don't exist.");i.options.wrapper=h}var v=function t(){for(var e=0;e<p.length;e++)i.elems[e].style.cssText=p[e].style;p=[],o=window.innerHeight,s=window.innerWidth,g(),function(){for(var t=0;t<i.elems.length;t++){var e=y(i.elems[t]);p.push(e)}}(),l&&(window.addEventListener("resize",t),l=!1),w()},y=function(t){var e=t.getAttribute("data-rellax-percentage"),n=t.getAttribute("data-rellax-speed"),r=t.getAttribute("data-rellax-zindex")||0,a=i.options.wrapper?i.options.wrapper.scrollTop:window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;if(i.options.relativeToWrapper){var p=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;a=p-i.options.wrapper.offsetTop}var l=i.options.vertical&&(e||i.options.center)?a:0,c=i.options.horizontal&&(e||i.options.center)?window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft:0,d=l+t.getBoundingClientRect().top,u=t.clientHeight||t.offsetHeight||t.scrollHeight,f=c+t.getBoundingClientRect().left,m=t.clientWidth||t.offsetWidth||t.scrollWidth,h=e||(l-d+o)/(u+o),v=e||(c-f+s)/(m+s);i.options.center&&(v=.5,h=.5);var y=n||i.options.speed,g=b(v,h,y),w=t.style.cssText,x="";if(w.indexOf("transform")>=0){var E=w.indexOf("transform"),k=w.slice(E),C=k.indexOf(";");x=C?" "+k.slice(11,C).replace(/\s/g,""):" "+k.slice(11).replace(/\s/g,"")}return{baseX:g.x,baseY:g.y,top:d,left:f,height:u,width:m,speed:y,style:w,transform:x,zindex:r}},g=function(){var t=r,e=a;if(r=i.options.wrapper?i.options.wrapper.scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset,a=i.options.wrapper?i.options.wrapper.scrollLeft:(document.documentElement||document.body.parentNode||document.body).scrollLeft||window.pageXOffset,i.options.relativeToWrapper){var n=(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset;r=n-i.options.wrapper.offsetTop}return!(t==r||!i.options.vertical)||!(e==a||!i.options.horizontal)},b=function(t,e,n){var r={},o=n*(100*(1-t)),a=n*(100*(1-e));return r.x=i.options.round?Math.round(o):Math.round(100*o)/100,r.y=i.options.round?Math.round(a):Math.round(100*a)/100,r},w=function(){for(var t,e=0;e<i.elems.length;e++){var n=(r-p[e].top+o)/(p[e].height+o),l=(a-p[e].left+s)/(p[e].width+s),c=(t=b(l,n,p[e].speed)).y-p[e].baseY,d=t.x-p[e].baseX,u=p[e].zindex,m="translate3d("+(i.options.horizontal?d:"0")+"px,"+(i.options.vertical?c:"0")+"px,"+u+"px) "+p[e].transform;i.elems[e].style[f]=m}i.options.callback(t)};return i.destroy=function(){for(var t=0;t<i.elems.length;t++)i.elems[t].style.cssText=p[t].style;l||(window.removeEventListener("resize",v),l=!0),u(d),d=null},v(),function t(){g()&&!1===l&&w(),d=c(t)}(),i.refresh=v,i}})?i.apply(e,r):i)||(t.exports=o)}).call(this,n(0))},function(t,e,n){"use strict";(function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,i=["Edge","Trident","Firefox"],r=0,o=0;o<i.length;o+=1)if(n&&navigator.userAgent.indexOf(i[o])>=0){r=1;break}var a=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},r))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function p(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function l(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function c(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=p(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?t:c(l(t))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),u=n&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?d:10===t?u:d||u}function m(t){if(!t)return document.documentElement;for(var e=f(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===p(n,"position")?m(n):n:t?t.ownerDocument.documentElement:document.documentElement}function h(t){return null!==t.parentNode?h(t.parentNode):t}function v(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a,s,p=o.commonAncestorContainer;if(t!==p&&e!==p||i.contains(r))return"BODY"===(s=(a=p).nodeName)||"HTML"!==s&&m(a.firstElementChild)!==a?m(p):p;var l=h(t);return l.host?v(l.host,e):v(t,h(e).host)}function y(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function g(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function b(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],f(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,i=f(10)&&getComputedStyle(n);return{height:b("Height",e,n,i),width:b("Width",e,n,i)}}var x=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},E=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),k=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},C=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function L(t){return C({},t,{right:t.left+t.width,bottom:t.top+t.height})}function T(t){var e={};try{if(f(10)){e=t.getBoundingClientRect();var n=y(t,"top"),i=y(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?w(t.ownerDocument):{},a=o.width||t.clientWidth||r.right-r.left,s=o.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-a,c=t.offsetHeight-s;if(l||c){var d=p(t);l-=g(d,"x"),c-=g(d,"y"),r.width-=l,r.height-=c}return L(r)}function A(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),r="HTML"===e.nodeName,o=T(t),a=T(e),s=c(t),l=p(e),d=parseFloat(l.borderTopWidth,10),u=parseFloat(l.borderLeftWidth,10);n&&r&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var m=L({top:o.top-a.top-d,left:o.left-a.left-u,width:o.width,height:o.height});if(m.marginTop=0,m.marginLeft=0,!i&&r){var h=parseFloat(l.marginTop,10),v=parseFloat(l.marginLeft,10);m.top-=d-h,m.bottom-=d-h,m.left-=u-v,m.right-=u-v,m.marginTop=h,m.marginLeft=v}return(i&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(m=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=y(e,"top"),r=y(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}(m,e)),m}function O(t){if(!t||!t.parentElement||f())return document.documentElement;for(var e=t.parentElement;e&&"none"===p(e,"transform");)e=e.parentElement;return e||document.documentElement}function S(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=r?O(t):v(t,e);if("viewport"===i)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=A(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:y(n),s=e?0:y(n,"left");return L({top:a-i.top+i.marginTop,left:s-i.left+i.marginLeft,width:r,height:o})}(a,r);else{var s=void 0;"scrollParent"===i?"BODY"===(s=c(l(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===i?t.ownerDocument.documentElement:i;var d=A(s,a,r);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===p(e,"position"))return!0;var i=l(e);return!!i&&t(i)}(a))o=d;else{var u=w(t.ownerDocument),f=u.height,m=u.width;o.top+=d.top-d.marginTop,o.bottom=f+d.top,o.left+=d.left-d.marginLeft,o.right=m+d.left}}var h="number"==typeof(n=n||0);return o.left+=h?n:n.left||0,o.top+=h?n:n.top||0,o.right-=h?n:n.right||0,o.bottom-=h?n:n.bottom||0,o}function M(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=S(n,i,o,r),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},p=Object.keys(s).map(function(t){return C({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),l=p.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),c=l.length>0?l[0].key:p[0].key,d=t.split("-")[1];return c+(d?"-"+d:"")}function N(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return A(n,i?O(e):v(e,n),i)}function D(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),i=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function P(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function I(t,e,n){n=n.split("-")[0];var i=D(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",p=o?"height":"width",l=o?"width":"height";return r[a]=e[a]+e[p]/2-i[p]/2,r[s]=n===s?e[s]-i[l]:e[P(s)],r}function H(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function B(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=H(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&s(n)&&(e.offsets.popper=L(e.offsets.popper),e.offsets.reference=L(e.offsets.reference),e=n(e,t))}),e}function F(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function R(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function z(t){var e=t.ownerDocument;return e?e.defaultView:window}function j(t,e,n,i){n.updateBound=i,z(t).addEventListener("resize",n.updateBound,{passive:!0});var r=c(t);return function t(e,n,i,r){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,i,{passive:!0}),o||t(c(a.parentNode),n,i,r),r.push(a)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function _(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,z(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function W(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function Y(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&W(e[n])&&(i="px"),t.style[n]=e[n]+i})}var X=n&&/Firefox/i.test(navigator.userAgent);function q(t,e,n){var i=H(t,function(t){return t.name===e}),r=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!r){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],U=V.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=U.indexOf(t),i=U.slice(n+1).concat(U.slice(0,n));return e?i.reverse():i}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Q(t,e,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(H(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,l=-1!==s?[a.slice(0,s).concat([a[s].split(p)[0]]),[a[s].split(p)[1]].concat(a.slice(s+1))]:[a];return(l=l.map(function(t,i){var r=(1===i?!o:o)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return L(s)[e]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(t,r,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){W(n)&&(r[e]+=n*("-"===t[i-1]?-1:1))})}),r}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",l=s?"width":"height",c={start:k({},p,o[p]),end:k({},p,o[p]+o[l]-a[l])};t.offsets.popper=C({},a,c[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],p=void 0;return p=W(+n)?[+n,0]:Q(n,o,a,s),"left"===s?(o.top+=p[0],o.left-=p[1]):"right"===s?(o.top+=p[0],o.left+=p[1]):"top"===s?(o.left+=p[0],o.top-=p[1]):"bottom"===s&&(o.left+=p[0],o.top+=p[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||m(t.instance.popper);t.instance.reference===n&&(n=m(n));var i=R("transform"),r=t.instance.popper.style,o=r.top,a=r.left,s=r[i];r.top="",r.left="",r[i]="";var p=S(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);r.top=o,r.left=a,r[i]=s,e.boundaries=p;var l=e.priority,c=t.offsets.popper,d={primary:function(t){var n=c[t];return c[t]<p[t]&&!e.escapeWithReference&&(n=Math.max(c[t],p[t])),k({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=c[n];return c[t]>p[t]&&!e.escapeWithReference&&(i=Math.min(c[n],p[t]-("right"===t?c.width:c.height))),k({},n,i)}};return l.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=C({},c,d[e](t))}),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",p=a?"left":"top",l=a?"width":"height";return n[s]<o(i[p])&&(t.offsets.popper[p]=o(i[p])-n[l]),n[p]>o(i[s])&&(t.offsets.popper[p]=o(i[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!q(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,a=o.popper,s=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",d=l?"Top":"Left",u=d.toLowerCase(),f=l?"left":"top",m=l?"bottom":"right",h=D(i)[c];s[m]-h<a[u]&&(t.offsets.popper[u]-=a[u]-(s[m]-h)),s[u]+h>a[m]&&(t.offsets.popper[u]+=s[u]+h-a[m]),t.offsets.popper=L(t.offsets.popper);var v=s[u]+s[c]/2-h/2,y=p(t.instance.popper),g=parseFloat(y["margin"+d],10),b=parseFloat(y["border"+d+"Width"],10),w=v-t.offsets.popper[u]-g-b;return w=Math.max(Math.min(a[c]-h,w),0),t.arrowElement=i,t.offsets.arrow=(k(n={},u,Math.round(w)),k(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(F(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=S(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],r=P(i),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case G.FLIP:a=[i,r];break;case G.CLOCKWISE:a=K(i);break;case G.COUNTERCLOCKWISE:a=K(i,!0);break;default:a=e.behavior}return a.forEach(function(s,p){if(i!==s||a.length===p+1)return t;i=t.placement.split("-")[0],r=P(i);var l=t.offsets.popper,c=t.offsets.reference,d=Math.floor,u="left"===i&&d(l.right)>d(c.left)||"right"===i&&d(l.left)<d(c.right)||"top"===i&&d(l.bottom)>d(c.top)||"bottom"===i&&d(l.top)<d(c.bottom),f=d(l.left)<d(n.left),m=d(l.right)>d(n.right),h=d(l.top)<d(n.top),v=d(l.bottom)>d(n.bottom),y="left"===i&&f||"right"===i&&m||"top"===i&&h||"bottom"===i&&v,g=-1!==["top","bottom"].indexOf(i),b=!!e.flipVariations&&(g&&"start"===o&&f||g&&"end"===o&&m||!g&&"start"===o&&h||!g&&"end"===o&&v);(u||y||b)&&(t.flipped=!0,(u||y)&&(i=a[p+1]),b&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=i+(o?"-"+o:""),t.offsets.popper=C({},t.offsets.popper,I(t.instance.popper,t.offsets.reference,t.placement)),t=B(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),t.placement=P(e),t.offsets.popper=L(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!q(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=H(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=H(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=m(t.instance.popper),p=T(s),l={position:r.position},c=function(t,e){var n=t.offsets,i=n.popper,r=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},p=o(r.width),l=o(i.width),c=-1!==["left","right"].indexOf(t.placement),d=-1!==t.placement.indexOf("-"),u=e?c||d||p%2==l%2?o:a:s,f=e?o:s;return{left:u(p%2==1&&l%2==1&&!d&&e?i.left-1:i.left),top:f(i.top),bottom:f(i.bottom),right:u(i.right)}}(t,window.devicePixelRatio<2||!X),d="bottom"===n?"top":"bottom",u="right"===i?"left":"right",f=R("transform"),h=void 0,v=void 0;if(v="bottom"===d?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-p.height+c.bottom:c.top,h="right"===u?"HTML"===s.nodeName?-s.clientWidth+c.right:-p.width+c.right:c.left,a&&f)l[f]="translate3d("+h+"px, "+v+"px, 0)",l[d]=0,l[u]=0,l.willChange="transform";else{var y="bottom"===d?-1:1,g="right"===u?-1:1;l[d]=v*y,l[u]=h*g,l.willChange=d+", "+u}var b={"x-placement":t.placement};return t.attributes=C({},b,t.attributes),t.styles=C({},l,t.styles),t.arrowStyles=C({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return Y(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&Y(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,r){var o=N(r,e,t,n.positionFixed),a=M(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),Y(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},$=function(){function t(e,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=a(this.update.bind(this)),this.options=C({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(C({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=C({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return C({name:t},i.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return E(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=N(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=M(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=I(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=B(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,F(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[R("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=j(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return _.call(this)}}]),t}();$.Utils=("undefined"!=typeof window?window:t).PopperUtils,$.placements=V,$.Defaults=J,e.a=$}).call(this,n(0))},function(t,e,n){t.exports=n(9)},function(t,e){t.exports=jQuery},function(t,e){var n=document.querySelectorAll(".button--page-doc"),i=document.querySelector(".doc-output"),r=document.querySelector(".hidden-doc"),o=document.getElementById("patient-form");o&&o.addEventListener("submit",function(t){t.preventDefault();var e,n,i=document.getElementById("patient-name");/^[A-Za-zА-Яа-я]{3,20}$/.test(i.value)?(i.classList.remove("is-invalid"),e=!0):i.classList.add("is-invalid");var r=document.getElementById("patient-phone");/[0-9]/.test(r.value)?(r.classList.remove("is-invalid"),n=!0):r.classList.add("is-invalid");if(!n||!e)return!1;o.submit()}),n.forEach(function(t){t.addEventListener("click",function(e){!function(t){fetch("../docs.json").then(function(t){return t.json()}).then(function(e){var n;return e.forEach(function(e){e.id===t&&(n=e)}),function(t){r.value=t.name,i.innerHTML='\n    <img class="doc-modal__img" src="'.concat(t.imgSrc,'"/> \n    <h3 class="doc-modal__title">').concat(t.name,"</h3>\n  ")}(n),console.log(e),e})}(t.dataset.doc),e.preventDefault()})})},,,function(t,e,n){"use strict";n.r(e);n(5);var i=window,r=i.requestAnimationFrame||i.webkitRequestAnimationFrame||i.mozRequestAnimationFrame||i.msRequestAnimationFrame||function(t){return setTimeout(t,16)},o=window,a=o.cancelAnimationFrame||o.mozCancelAnimationFrame||function(t){clearTimeout(t)};function s(){for(var t,e,n,i=arguments[0]||{},r=1,o=arguments.length;r<o;r++)if(null!==(t=arguments[r]))for(e in t)i!==(n=t[e])&&void 0!==n&&(i[e]=n);return i}function p(t){return["true","false"].indexOf(t)>=0?JSON.parse(t):t}function l(t,e,n,i){if(i)try{t.setItem(e,n)}catch(t){}return n}function c(){var t=document,e=t.body;return e||((e=t.createElement("body")).fake=!0),e}var d=document.documentElement;function u(t){var e="";return t.fake&&(e=d.style.overflow,t.style.background="",t.style.overflow=d.style.overflow="hidden",d.appendChild(t)),e}function f(t,e){t.fake&&(t.remove(),d.style.overflow=e,d.offsetHeight)}function m(t,e,n,i){"insertRule"in t?t.insertRule(e+"{"+n+"}",i):t.addRule(e,n,i)}function h(t){return("insertRule"in t?t.cssRules:t.rules).length}function v(t,e,n){for(var i=0,r=t.length;i<r;i++)e.call(n,t[i],i)}var y="classList"in document.createElement("_"),g=y?function(t,e){return t.classList.contains(e)}:function(t,e){return t.className.indexOf(e)>=0},b=y?function(t,e){g(t,e)||t.classList.add(e)}:function(t,e){g(t,e)||(t.className+=" "+e)},w=y?function(t,e){g(t,e)&&t.classList.remove(e)}:function(t,e){g(t,e)&&(t.className=t.className.replace(e,""))};function x(t,e){return t.hasAttribute(e)}function E(t,e){return t.getAttribute(e)}function k(t){return void 0!==t.item}function C(t,e){if(t=k(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(e))for(var n=t.length;n--;)for(var i in e)t[n].setAttribute(i,e[i])}function L(t,e){t=k(t)||t instanceof Array?t:[t];for(var n=(e=e instanceof Array?e:[e]).length,i=t.length;i--;)for(var r=n;r--;)t[i].removeAttribute(e[r])}function T(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function A(t,e){"none"!==t.style.display&&(t.style.display="none")}function O(t,e){"none"===t.style.display&&(t.style.display="")}function S(t){return"none"!==window.getComputedStyle(t).display}function M(t){if("string"==typeof t){var e=[t],n=t.charAt(0).toUpperCase()+t.substr(1);["Webkit","Moz","ms","O"].forEach(function(i){"ms"===i&&"transform"!==t||e.push(i+n)}),t=e}for(var i=document.createElement("fakeelement"),r=(t.length,0);r<t.length;r++){var o=t[r];if(void 0!==i.style[o])return o}return!1}function N(t,e){var n=!1;return/^Webkit/.test(t)?n="webkit"+e+"End":/^O/.test(t)?n="o"+e+"End":t&&(n=e.toLowerCase()+"end"),n}var D=!1;try{var P=Object.defineProperty({},"passive",{get:function(){D=!0}});window.addEventListener("test",null,P)}catch(z){}var I=!!D&&{passive:!0};function H(t,e,n){for(var i in e){var r=["touchstart","touchmove"].indexOf(i)>=0&&!n&&I;t.addEventListener(i,e[i],r)}}function B(t,e){for(var n in e){var i=["touchstart","touchmove"].indexOf(n)>=0&&I;t.removeEventListener(n,e[n],i)}}function F(){return{topics:{},on:function(t,e){this.topics[t]=this.topics[t]||[],this.topics[t].push(e)},off:function(t,e){if(this.topics[t])for(var n=0;n<this.topics[t].length;n++)if(this.topics[t][n]===e){this.topics[t].splice(n,1);break}},emit:function(t,e){e.type=t,this.topics[t]&&this.topics[t].forEach(function(n){n(e,t)})}}}function R(t){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.keys||(Object.keys=function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});var z,j,_,W,Y,X,q,V,U,K=function t(e){e=s({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0},e||{});var n=document,i=window,o={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},d={},y=e.useLocalStorage;if(y){var k=navigator.userAgent,D=new Date;try{(d=i.localStorage)?(d.setItem(D,D),y=d.getItem(D)==D,d.removeItem(D)):y=!1,y||(d={})}catch(t){y=!1}y&&(d.tnsApp&&d.tnsApp!==k&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(t){d.removeItem(t)}),localStorage.tnsApp=k)}var P=d.tC?p(d.tC):l(d,"tC",function(){var t=document,e=c(),n=u(e),i=t.createElement("div"),r=!1;e.appendChild(i);try{for(var o,a="(10px * 10)",s=["calc"+a,"-moz-calc"+a,"-webkit-calc"+a],p=0;p<3;p++)if(o=s[p],i.style.width=o,100===i.offsetWidth){r=o.replace(a,"");break}}catch(t){}return e.fake?f(e,n):i.remove(),r}(),y),I=d.tPL?p(d.tPL):l(d,"tPL",function(){var t,e=document,n=c(),i=u(n),r=e.createElement("div"),o=e.createElement("div"),a="";r.className="tns-t-subp2",o.className="tns-t-ct";for(var s=0;s<70;s++)a+="<div></div>";return o.innerHTML=a,r.appendChild(o),n.appendChild(r),t=Math.abs(r.getBoundingClientRect().left-o.children[67].getBoundingClientRect().left)<2,n.fake?f(n,i):r.remove(),t}(),y),z=d.tMQ?p(d.tMQ):l(d,"tMQ",function(){var t,e=document,n=c(),i=u(n),r=e.createElement("div"),o=e.createElement("style"),a="@media all and (min-width:1px){.tns-mq-test{position:absolute}}";return o.type="text/css",r.className="tns-mq-test",n.appendChild(o),n.appendChild(r),o.styleSheet?o.styleSheet.cssText=a:o.appendChild(e.createTextNode(a)),t=window.getComputedStyle?window.getComputedStyle(r).position:r.currentStyle.position,n.fake?f(n,i):r.remove(),"absolute"===t}(),y),j=d.tTf?p(d.tTf):l(d,"tTf",M("transform"),y),_=d.t3D?p(d.t3D):l(d,"t3D",function(t){if(!t)return!1;if(!window.getComputedStyle)return!1;var e,n=document,i=c(),r=u(i),o=n.createElement("p"),a=t.length>9?"-"+t.slice(0,-9).toLowerCase()+"-":"";return a+="transform",i.insertBefore(o,null),o.style[t]="translate3d(1px,1px,1px)",e=window.getComputedStyle(o).getPropertyValue(a),i.fake?f(i,r):o.remove(),void 0!==e&&e.length>0&&"none"!==e}(j),y),W=d.tTDu?p(d.tTDu):l(d,"tTDu",M("transitionDuration"),y),Y=d.tTDe?p(d.tTDe):l(d,"tTDe",M("transitionDelay"),y),X=d.tADu?p(d.tADu):l(d,"tADu",M("animationDuration"),y),q=d.tADe?p(d.tADe):l(d,"tADe",M("animationDelay"),y),V=d.tTE?p(d.tTE):l(d,"tTE",N(W,"Transition"),y),U=d.tAE?p(d.tAE):l(d,"tAE",N(X,"Animation"),y),K=i.console&&"function"==typeof i.console.warn,G=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],Q={};if(G.forEach(function(t){if("string"==typeof e[t]){var i=e[t],r=n.querySelector(i);if(Q[t]=i,!r||!r.nodeName)return void(K&&console.warn("Can't find",e[t]));e[t]=r}}),!(e.container.children.length<1)){var J=e.responsive,$=e.nested,Z="carousel"===e.mode;if(J){0 in J&&(e=s(e,J[0]),delete J[0]);var tt={};for(var et in J){var nt=J[et];nt="number"==typeof nt?{items:nt}:nt,tt[et]=nt}J=tt,tt=null}if(Z||function t(e){for(var n in e)Z||("slideBy"===n&&(e[n]="page"),"edgePadding"===n&&(e[n]=!1),"autoHeight"===n&&(e[n]=!1)),"responsive"===n&&t(e[n])}(e),!Z){e.axis="horizontal",e.slideBy="page",e.edgePadding=!1;var it=e.animateIn,rt=e.animateOut,ot=e.animateDelay,at=e.animateNormal}var st,pt,lt="horizontal"===e.axis,ct=n.createElement("div"),dt=n.createElement("div"),ut=e.container,ft=ut.parentNode,mt=ut.outerHTML,ht=ut.children,vt=ht.length,yt=Nn(),gt=!1;J&&Jn(),Z&&(ut.className+=" tns-vpfix");var bt,wt,xt,Et,kt,Ct,Lt,Tt,At=e.autoWidth,Ot=Hn("fixedWidth"),St=Hn("edgePadding"),Mt=Hn("gutter"),Nt=Pn(),Dt=Hn("center"),Pt=At?1:Math.floor(Hn("items")),It=Hn("slideBy"),Ht=e.viewportMax||e.fixedWidthViewportWidth,Bt=Hn("arrowKeys"),Ft=Hn("speed"),Rt=e.rewind,zt=!Rt&&e.loop,jt=Hn("autoHeight"),_t=Hn("controls"),Wt=Hn("controlsText"),Yt=Hn("nav"),Xt=Hn("touch"),qt=Hn("mouseDrag"),Vt=Hn("autoplay"),Ut=Hn("autoplayTimeout"),Kt=Hn("autoplayText"),Gt=Hn("autoplayHoverPause"),Qt=Hn("autoplayResetOnVisibility"),Jt=(Tt=document.createElement("style"),Lt&&Tt.setAttribute("media",Lt),document.querySelector("head").appendChild(Tt),Tt.sheet?Tt.sheet:Tt.styleSheet),$t=e.lazyload,Zt=(e.lazyloadSelector,[]),te=zt?(kt=function(){if(At||Ot&&!Ht)return vt-1;var t=Ot?"fixedWidth":"items",n=[];if((Ot||e[t]<vt)&&n.push(e[t]),J)for(var i in J){var r=J[i][t];r&&(Ot||r<vt)&&n.push(r)}return n.length||n.push(0),Math.ceil(Ot?Ht/Math.min.apply(null,n):Math.max.apply(null,n))}(),Ct=Z?Math.ceil((5*kt-vt)/2):4*kt-vt,Ct=Math.max(kt,Ct),In("edgePadding")?Ct+1:Ct):0,ee=Z?vt+2*te:vt+te,ne=!(!Ot&&!At||zt),ie=Ot?Ci():null,re=!Z||!zt,oe=lt?"left":"top",ae="",se="",pe=Ot?function(){return Dt&&!zt?vt-1:Math.ceil(-ie/(Ot+Mt))}:At?function(){for(var t=ee;t--;)if(bt[t]>-ie)return t}:function(){return Dt&&Z&&!zt?vt-1:zt||Z?Math.max(0,ee-Math.ceil(Pt)):ee-1},le=On(Hn("startIndex")),ce=le,de=(An(),0),ue=At?null:pe(),fe=e.preventActionWhenRunning,me=e.swipeAngle,he=!me||"?",ve=!1,ye=e.onInit,ge=new F,be=" tns-slider tns-"+e.mode,we=ut.id||(Et=window.tnsId,window.tnsId=Et?Et+1:1,"tns"+window.tnsId),xe=Hn("disable"),Ee=!1,ke=e.freezable,Ce=!(!ke||At)&&Qn(),Le=!1,Te={click:Pi,keydown:function(t){t=_i(t);var e=[o.LEFT,o.RIGHT].indexOf(t.keyCode);e>=0&&(0===e?Ue.disabled||Pi(t,-1):Ke.disabled||Pi(t,1))}},Ae={click:function(t){if(ve){if(fe)return;Ni()}var e=Wi(t=_i(t));for(;e!==$e&&!x(e,"data-nav");)e=e.parentNode;if(x(e,"data-nav")){var n=nn=Number(E(e,"data-nav")),i=Ot||At?n*vt/tn:n*Pt,r=He?n:Math.min(Math.ceil(i),vt-1);Di(r,t),rn===n&&(cn&&Ri(),nn=-1)}},keydown:function(t){t=_i(t);var e=n.activeElement;if(!x(e,"data-nav"))return;var i=[o.LEFT,o.RIGHT,o.ENTER,o.SPACE].indexOf(t.keyCode),r=Number(E(e,"data-nav"));i>=0&&(0===i?r>0&&ji(Je[r-1]):1===i?r<tn-1&&ji(Je[r+1]):(nn=r,Di(r,t)))}},Oe={mouseover:function(){cn&&(Hi(),dn=!0)},mouseout:function(){dn&&(Ii(),dn=!1)}},Se={visibilitychange:function(){n.hidden?cn&&(Hi(),fn=!0):fn&&(Ii(),fn=!1)}},Me={keydown:function(t){t=_i(t);var e=[o.LEFT,o.RIGHT].indexOf(t.keyCode);e>=0&&Pi(t,0===e?-1:1)}},Ne={touchstart:Vi,touchmove:Ui,touchend:Ki,touchcancel:Ki},De={mousedown:Vi,mousemove:Ui,mouseup:Ki,mouseleave:Ki},Pe=In("controls"),Ie=In("nav"),He=!!At||e.navAsThumbnails,Be=In("autoplay"),Fe=In("touch"),Re=In("mouseDrag"),ze="tns-slide-active",je="tns-complete",_e={load:function(t){ai(Wi(t))},error:function(t){e=Wi(t),b(e,"failed"),si(e);var e}},We="force"===e.preventScrollOnTouch;if(Pe)var Ye,Xe,qe=e.controlsContainer,Ve=e.controlsContainer?e.controlsContainer.outerHTML:"",Ue=e.prevButton,Ke=e.nextButton,Ge=e.prevButton?e.prevButton.outerHTML:"",Qe=e.nextButton?e.nextButton.outerHTML:"";if(Ie)var Je,$e=e.navContainer,Ze=e.navContainer?e.navContainer.outerHTML:"",tn=At?vt:Qi(),en=0,nn=-1,rn=Mn(),on=rn,an="tns-nav-active",sn="Carousel Page ",pn=" (Current Slide)";if(Be)var ln,cn,dn,un,fn,mn="forward"===e.autoplayDirection?1:-1,hn=e.autoplayButton,vn=e.autoplayButton?e.autoplayButton.outerHTML:"",yn=["<span class='tns-visually-hidden'>"," animation</span>"];if(Fe||Re)var gn,bn,wn={},xn={},En=!1,kn=lt?function(t,e){return t.x-e.x}:function(t,e){return t.y-e.y};At||Tn(xe||Ce),j&&(oe=j,ae="translate",_?(ae+=lt?"3d(":"3d(0px, ",se=lt?", 0px, 0px)":", 0px)"):(ae+=lt?"X(":"Y(",se=")")),Z&&(ut.className=ut.className.replace("tns-vpfix","")),function(){In("gutter");ct.className="tns-outer",dt.className="tns-inner",ct.id=we+"-ow",dt.id=we+"-iw",""===ut.id&&(ut.id=we);be+=I||At?" tns-subpixel":" tns-no-subpixel",be+=P?" tns-calc":" tns-no-calc",At&&(be+=" tns-autowidth");be+=" tns-"+e.axis,ut.className+=be,Z?((st=n.createElement("div")).id=we+"-mw",st.className="tns-ovh",ct.appendChild(st),st.appendChild(dt)):ct.appendChild(dt);if(jt){var t=st||dt;t.className+=" tns-ah"}if(ft.insertBefore(ct,ut),dt.appendChild(ut),v(ht,function(t,e){b(t,"tns-item"),t.id||(t.id=we+"-item"+e),!Z&&at&&b(t,at),C(t,{"aria-hidden":"true",tabindex:"-1"})}),te){for(var i=n.createDocumentFragment(),r=n.createDocumentFragment(),o=te;o--;){var a=o%vt,s=ht[a].cloneNode(!0);if(L(s,"id"),r.insertBefore(s,r.firstChild),Z){var p=ht[vt-1-a].cloneNode(!0);L(p,"id"),i.appendChild(p)}}ut.insertBefore(i,ut.firstChild),ut.appendChild(r),ht=ut.children}}(),function(){if(!Z)for(var t=le,n=le+Math.min(vt,Pt);t<n;t++){var r=ht[t];r.style.left=100*(t-le)/Pt+"%",b(r,it),w(r,at)}lt&&(I||At?(m(Jt,"#"+we+" > .tns-item","font-size:"+i.getComputedStyle(ht[0]).fontSize+";",h(Jt)),m(Jt,"#"+we,"font-size:0;",h(Jt))):Z&&v(ht,function(t,e){t.style.marginLeft=function(t){return P?P+"("+100*t+"% / "+ee+")":100*t/ee+"%"}(e)}));if(z){if(W){var o=st&&e.autoHeight?_n(e.speed):"";m(Jt,"#"+we+"-mw",o,h(Jt))}o=Bn(e.edgePadding,e.gutter,e.fixedWidth,e.speed,e.autoHeight),m(Jt,"#"+we+"-iw",o,h(Jt)),Z&&(o=lt&&!At?"width:"+Fn(e.fixedWidth,e.gutter,e.items)+";":"",W&&(o+=_n(Ft)),m(Jt,"#"+we,o,h(Jt))),o=lt&&!At?Rn(e.fixedWidth,e.gutter,e.items):"",e.gutter&&(o+=zn(e.gutter)),Z||(W&&(o+=_n(Ft)),X&&(o+=Wn(Ft))),o&&m(Jt,"#"+we+" > .tns-item",o,h(Jt))}else{ui(),dt.style.cssText=Bn(St,Mt,Ot,jt),Z&&lt&&!At&&(ut.style.width=Fn(Ot,Mt,Pt));var o=lt&&!At?Rn(Ot,Mt,Pt):"";Mt&&(o+=zn(Mt)),o&&m(Jt,"#"+we+" > .tns-item",o,h(Jt))}if(J&&z)for(var a in J){a=parseInt(a);var s=J[a],o="",p="",l="",c="",d="",u=At?null:Hn("items",a),f=Hn("fixedWidth",a),y=Hn("speed",a),g=Hn("edgePadding",a),x=Hn("autoHeight",a),E=Hn("gutter",a);W&&st&&Hn("autoHeight",a)&&"speed"in s&&(p="#"+we+"-mw{"+_n(y)+"}"),("edgePadding"in s||"gutter"in s)&&(l="#"+we+"-iw{"+Bn(g,E,f,y,x)+"}"),Z&&lt&&!At&&("fixedWidth"in s||"items"in s||Ot&&"gutter"in s)&&(c="width:"+Fn(f,E,u)+";"),W&&"speed"in s&&(c+=_n(y)),c&&(c="#"+we+"{"+c+"}"),("fixedWidth"in s||Ot&&"gutter"in s||!Z&&"items"in s)&&(d+=Rn(f,E,u)),"gutter"in s&&(d+=zn(E)),!Z&&"speed"in s&&(W&&(d+=_n(y)),X&&(d+=Wn(y))),d&&(d="#"+we+" > .tns-item{"+d+"}"),(o=p+l+c+d)&&Jt.insertRule("@media (min-width: "+a/16+"em) {"+o+"}",Jt.cssRules.length)}}(),Yn();var Cn=zt?Z?function(){var t=de,e=ue;t+=It,e-=It,St?(t+=1,e-=1):Ot&&(Nt+Mt)%(Ot+Mt)&&(e-=1),te&&(le>e?le-=vt:le<t&&(le+=vt))}:function(){if(le>ue)for(;le>=de+vt;)le-=vt;else if(le<de)for(;le<=ue-vt;)le+=vt}:function(){le=Math.max(de,Math.min(ue,le))},Ln=Z?function(){var t,e,n,i,r,o,a,s,p,l,c;Ei(ut,""),W||!Ft?(Ai(),Ft&&S(ut)||Ni()):(t=ut,e=oe,n=ae,i=se,r=Li(),o=Ft,a=Ni,s=Math.min(o,10),p=r.indexOf("%")>=0?"%":"px",r=r.replace(p,""),l=Number(t.style[e].replace(n,"").replace(i,"").replace(p,"")),c=(r-l)/o*s,setTimeout(function r(){o-=s,l+=c,t.style[e]=n+l+p+i,o>0?setTimeout(r,s):a()},s)),lt||Gi()}:function(){Zt=[];var t={};t[V]=t[U]=Ni,B(ht[ce],t),H(ht[le],t),Oi(ce,it,rt,!0),Oi(le,at,it),V&&U&&Ft&&S(ut)||Ni()};return{version:"2.9.1",getInfo:$i,events:ge,goTo:Di,play:function(){Vt&&!cn&&(Fi(),un=!1)},pause:function(){cn&&(Ri(),un=!0)},isOn:gt,updateSliderHeight:mi,refresh:Yn,destroy:function(){if(Jt.disabled=!0,Jt.ownerNode&&Jt.ownerNode.remove(),B(i,{resize:Kn}),Bt&&B(n,Me),qe&&B(qe,Te),$e&&B($e,Ae),B(ut,Oe),B(ut,Se),hn&&B(hn,{click:zi}),Vt&&clearInterval(ln),Z&&V){var t={};t[V]=Ni,B(ut,t)}Xt&&B(ut,Ne),qt&&B(ut,De);var r=[mt,Ve,Ge,Qe,Ze,vn];for(var o in G.forEach(function(t,n){var i="container"===t?ct:e[t];if("object"===R(i)){var o=!!i.previousElementSibling&&i.previousElementSibling,a=i.parentNode;i.outerHTML=r[n],e[t]=o?o.nextElementSibling:a.firstElementChild}}),G=it=rt=ot=at=lt=ct=dt=ut=ft=mt=ht=vt=pt=yt=At=Ot=St=Mt=Nt=Pt=It=Ht=Bt=Ft=Rt=zt=jt=Jt=$t=bt=Zt=te=ee=ne=ie=re=oe=ae=se=pe=le=ce=de=ue=me=he=ve=ye=ge=be=we=xe=Ee=ke=Ce=Le=Te=Ae=Oe=Se=Me=Ne=De=Pe=Ie=He=Be=Fe=Re=ze=je=_e=wt=_t=Wt=qe=Ve=Ue=Ke=Ye=Xe=Yt=$e=Ze=Je=tn=en=nn=rn=on=an=sn=pn=Vt=Ut=mn=Kt=Gt=hn=vn=Qt=yn=ln=cn=dn=un=fn=wn=xn=gn=En=bn=kn=Xt=qt=null,this)"rebuild"!==o&&(this[o]=null);gt=!1},rebuild:function(){return t(s(e,Q))}}}function Tn(t){t&&(_t=Yt=Xt=qt=Bt=Vt=Gt=Qt=!1)}function An(){for(var t=Z?le-te:le;t<0;)t+=vt;return t%vt+1}function On(t){return t=t?Math.max(0,Math.min(zt?vt-1:vt-Pt,t)):0,Z?t+te:t}function Sn(t){for(null==t&&(t=le),Z&&(t-=te);t<0;)t+=vt;return Math.floor(t%vt)}function Mn(){var t,e=Sn();return t=He?e:Ot||At?Math.ceil((e+1)*tn/vt-1):Math.floor(e/Pt),!zt&&Z&&le===ue&&(t=tn-1),t}function Nn(){return i.innerWidth||n.documentElement.clientWidth||n.body.clientWidth}function Dn(t){return"top"===t?"afterbegin":"beforeend"}function Pn(){var t=St?2*St-Mt:0;return function t(e){var i,r,o=n.createElement("div");return e.appendChild(o),r=(i=o.getBoundingClientRect()).right-i.left,o.remove(),r||t(e.parentNode)}(ft)-t}function In(t){if(e[t])return!0;if(J)for(var n in J)if(J[n][t])return!0;return!1}function Hn(t,n){if(null==n&&(n=yt),"items"===t&&Ot)return Math.floor((Nt+Mt)/(Ot+Mt))||1;var i=e[t];if(J)for(var r in J)n>=parseInt(r)&&t in J[r]&&(i=J[r][t]);return"slideBy"===t&&"page"===i&&(i=Hn("items")),Z||"slideBy"!==t&&"items"!==t||(i=Math.floor(i)),i}function Bn(t,e,n,i,r){var o="";if(void 0!==t){var a=t;e&&(a-=e),o=lt?"margin: 0 "+a+"px 0 "+t+"px;":"margin: "+t+"px 0 "+a+"px 0;"}else if(e&&!n){var s="-"+e+"px";o="margin: 0 "+(lt?s+" 0 0":"0 "+s+" 0")+";"}return!Z&&r&&W&&i&&(o+=_n(i)),o}function Fn(t,e,n){return t?(t+e)*ee+"px":P?P+"("+100*ee+"% / "+n+")":100*ee/n+"%"}function Rn(t,e,n){var i;if(t)i=t+e+"px";else{Z||(n=Math.floor(n));var r=Z?ee:n;i=P?P+"(100% / "+r+")":100/r+"%"}return i="width:"+i,"inner"!==$?i+";":i+" !important;"}function zn(t){var e="";!1!==t&&(e=(lt?"padding-":"margin-")+(lt?"right":"bottom")+": "+t+"px;");return e}function jn(t,e){var n=t.substring(0,t.length-e).toLowerCase();return n&&(n="-"+n+"-"),n}function _n(t){return jn(W,18)+"transition-duration:"+t/1e3+"s;"}function Wn(t){return jn(X,17)+"animation-duration:"+t/1e3+"s;"}function Yn(){if(In("autoHeight")||At||!lt){var t=ut.querySelectorAll("img");v(t,function(t){var e=t.src;e&&e.indexOf("data:image")<0?(H(t,_e),t.src="",t.src=e,b(t,"loading")):$t||ai(t)}),r(function(){ci(T(t),function(){wt=!0})}),!At&&lt&&(t=pi(le,Math.min(le+Pt-1,ee-1))),$t?Xn():r(function(){ci(T(t),Xn)})}else Z&&Ti(),Vn(),Un()}function Xn(){if(At){var t=zt?le:vt-1;!function e(){ht[t-1].getBoundingClientRect().right.toFixed(2)===ht[t].getBoundingClientRect().left.toFixed(2)?qn():setTimeout(function(){e()},16)}()}else qn()}function qn(){lt&&!At||(hi(),At?(ie=Ci(),ke&&(Ce=Qn()),ue=pe(),Tn(xe||Ce)):Gi()),Z&&Ti(),Vn(),Un()}function Vn(){if(vi(),ct.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+ii()+"</span>  of "+vt+"</div>"),xt=ct.querySelector(".tns-liveregion .current"),Be){var t=Vt?"stop":"start";hn?C(hn,{"data-action":t}):e.autoplayButtonOutput&&(ct.insertAdjacentHTML(Dn(e.autoplayPosition),'<button data-action="'+t+'">'+yn[0]+t+yn[1]+Kt[0]+"</button>"),hn=ct.querySelector("[data-action]")),hn&&H(hn,{click:zi}),Vt&&(Fi(),Gt&&H(ut,Oe),Qt&&H(ut,Se))}if(Ie){if($e)C($e,{"aria-label":"Carousel Pagination"}),v(Je=$e.children,function(t,e){C(t,{"data-nav":e,tabindex:"-1","aria-label":sn+(e+1),"aria-controls":we})});else{for(var n="",i=He?"":'style="display:none"',r=0;r<vt;r++)n+='<button data-nav="'+r+'" tabindex="-1" aria-controls="'+we+'" '+i+' aria-label="'+sn+(r+1)+'"></button>';n='<div class="tns-nav" aria-label="Carousel Pagination">'+n+"</div>",ct.insertAdjacentHTML(Dn(e.navPosition),n),$e=ct.querySelector(".tns-nav"),Je=$e.children}if(Ji(),W){var o=W.substring(0,W.length-18).toLowerCase(),a="transition: all "+Ft/1e3+"s";o&&(a="-"+o+"-"+a),m(Jt,"[aria-controls^="+we+"-item]",a,h(Jt))}C(Je[rn],{"aria-label":sn+(rn+1)+pn}),L(Je[rn],"tabindex"),b(Je[rn],an),H($e,Ae)}Pe&&(qe||Ue&&Ke||(ct.insertAdjacentHTML(Dn(e.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+we+'">'+Wt[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+we+'">'+Wt[1]+"</button></div>"),qe=ct.querySelector(".tns-controls")),Ue&&Ke||(Ue=qe.children[0],Ke=qe.children[1]),e.controlsContainer&&C(qe,{"aria-label":"Carousel Navigation",tabindex:"0"}),(e.controlsContainer||e.prevButton&&e.nextButton)&&C([Ue,Ke],{"aria-controls":we,tabindex:"-1"}),(e.controlsContainer||e.prevButton&&e.nextButton)&&(C(Ue,{"data-controls":"prev"}),C(Ke,{"data-controls":"next"})),Ye=gi(Ue),Xe=gi(Ke),xi(),qe?H(qe,Te):(H(Ue,Te),H(Ke,Te))),$n()}function Un(){if(Z&&V){var t={};t[V]=Ni,H(ut,t)}Xt&&H(ut,Ne,e.preventScrollOnTouch),qt&&H(ut,De),Bt&&H(n,Me),"inner"===$?ge.on("outerResized",function(){Gn(),ge.emit("innerLoaded",$i())}):(J||Ot||At||jt||!lt)&&H(i,{resize:Kn}),jt&&("outer"===$?ge.on("innerLoaded",li):xe||li()),oi(),xe?ei():Ce&&ti(),ge.on("indexChanged",di),"inner"===$&&ge.emit("innerLoaded",$i()),"function"==typeof ye&&ye($i()),gt=!0}function Kn(t){r(function(){Gn(_i(t))})}function Gn(t){if(gt){"outer"===$&&ge.emit("outerResized",$i(t)),yt=Nn();var i,r=pt,o=!1;J&&(Jn(),(i=r!==pt)&&ge.emit("newBreakpointStart",$i(t)));var a,s,p=Pt,l=xe,c=Ce,d=Bt,u=_t,f=Yt,y=Xt,g=qt,x=Vt,E=Gt,k=Qt,C=le;if(i){var L=Ot,T=jt,S=Wt,M=Dt,N=Kt;if(!z)var D=Mt,P=St}if(Bt=Hn("arrowKeys"),_t=Hn("controls"),Yt=Hn("nav"),Xt=Hn("touch"),Dt=Hn("center"),qt=Hn("mouseDrag"),Vt=Hn("autoplay"),Gt=Hn("autoplayHoverPause"),Qt=Hn("autoplayResetOnVisibility"),i&&(xe=Hn("disable"),Ot=Hn("fixedWidth"),Ft=Hn("speed"),jt=Hn("autoHeight"),Wt=Hn("controlsText"),Kt=Hn("autoplayText"),Ut=Hn("autoplayTimeout"),z||(St=Hn("edgePadding"),Mt=Hn("gutter"))),Tn(xe),Nt=Pn(),lt&&!At||xe||(hi(),lt||(Gi(),o=!0)),(Ot||At)&&(ie=Ci(),ue=pe()),(i||Ot)&&(Pt=Hn("items"),It=Hn("slideBy"),(s=Pt!==p)&&(Ot||At||(ue=pe()),Cn())),i&&xe!==l&&(xe?ei():function(){if(!Ee)return;if(Jt.disabled=!1,ut.className+=be,Ti(),zt)for(var t=te;t--;)Z&&O(ht[t]),O(ht[ee-t-1]);if(!Z)for(var e=le,n=le+vt;e<n;e++){var i=ht[e],r=e<le+Pt?it:at;i.style.left=100*(e-le)/Pt+"%",b(i,r)}Zn(),Ee=!1}()),ke&&(i||Ot||At)&&(Ce=Qn())!==c&&(Ce?(Ai(Li(On(0))),ti()):(!function(){if(!Le)return;St&&z&&(dt.style.margin="");if(te)for(var t="tns-transparent",e=te;e--;)Z&&w(ht[e],t),w(ht[ee-e-1],t);Zn(),Le=!1}(),o=!0)),Tn(xe||Ce),Vt||(Gt=Qt=!1),Bt!==d&&(Bt?H(n,Me):B(n,Me)),_t!==u&&(_t?qe?O(qe):(Ue&&O(Ue),Ke&&O(Ke)):qe?A(qe):(Ue&&A(Ue),Ke&&A(Ke))),Yt!==f&&(Yt?O($e):A($e)),Xt!==y&&(Xt?H(ut,Ne,e.preventScrollOnTouch):B(ut,Ne)),qt!==g&&(qt?H(ut,De):B(ut,De)),Vt!==x&&(Vt?(hn&&O(hn),cn||un||Fi()):(hn&&A(hn),cn&&Ri())),Gt!==E&&(Gt?H(ut,Oe):B(ut,Oe)),Qt!==k&&(Qt?H(n,Se):B(n,Se)),i){if(Ot===L&&Dt===M||(o=!0),jt!==T&&(jt||(dt.style.height="")),_t&&Wt!==S&&(Ue.innerHTML=Wt[0],Ke.innerHTML=Wt[1]),hn&&Kt!==N){var I=Vt?1:0,F=hn.innerHTML,R=F.length-N[I].length;F.substring(R)===N[I]&&(hn.innerHTML=F.substring(0,R)+Kt[I])}}else Dt&&(Ot||At)&&(o=!0);if((s||Ot&&!At)&&(tn=Qi(),Ji()),(a=le!==C)?(ge.emit("indexChanged",$i()),o=!0):s?a||di():(Ot||At)&&(oi(),vi(),ni()),!s&&Z||function(){for(var t=le+Math.min(vt,Pt),e=ee;e--;){var n=ht[e];e>=le&&e<t?(b(n,"tns-moving"),n.style.left=100*(e-le)/Pt+"%",b(n,it),w(n,at)):n.style.left&&(n.style.left="",b(n,at),w(n,it)),w(n,rt)}setTimeout(function(){v(ht,function(t){w(t,"tns-moving")})},300)}(),!xe&&!Ce){if(i&&!z&&(jt===autoheightTem&&Ft===speedTem||ui(),St===P&&Mt===D||(dt.style.cssText=Bn(St,Mt,Ot,Ft,jt)),lt)){Z&&(ut.style.width=Fn(Ot,Mt,Pt));var j=Rn(Ot,Mt,Pt)+zn(Mt);!function(t,e){"deleteRule"in t?t.deleteRule(e):t.removeRule(e)}(Jt,h(Jt)-1),m(Jt,"#"+we+" > .tns-item",j,h(Jt))}jt&&li(),o&&(Ti(),ce=le)}i&&ge.emit("newBreakpointEnd",$i(t))}}function Qn(){if(!Ot&&!At)return vt<=(Dt?Pt-(Pt-1)/2:Pt);var t=Ot?(Ot+Mt)*vt:bt[vt],e=St?Nt+2*St:Nt+Mt;return Dt&&(e-=Ot?(Nt-Ot)/2:(Nt-(bt[le+1]-bt[le]-Mt))/2),t<=e}function Jn(){for(var t in pt=0,J)t=parseInt(t),yt>=t&&(pt=t)}function $n(){!Vt&&hn&&A(hn),!Yt&&$e&&A($e),_t||(qe?A(qe):(Ue&&A(Ue),Ke&&A(Ke)))}function Zn(){Vt&&hn&&O(hn),Yt&&$e&&O($e),_t&&(qe?O(qe):(Ue&&O(Ue),Ke&&O(Ke)))}function ti(){if(!Le){if(St&&(dt.style.margin="0px"),te)for(var t="tns-transparent",e=te;e--;)Z&&b(ht[e],t),b(ht[ee-e-1],t);$n(),Le=!0}}function ei(){if(!Ee){if(Jt.disabled=!0,ut.className=ut.className.replace(be.substring(1),""),L(ut,["style"]),zt)for(var t=te;t--;)Z&&A(ht[t]),A(ht[ee-t-1]);if(lt&&Z||L(dt,["style"]),!Z)for(var e=le,n=le+vt;e<n;e++){var i=ht[e];L(i,["style"]),w(i,it),w(i,at)}$n(),Ee=!0}}function ni(){var t=ii();xt.innerHTML!==t&&(xt.innerHTML=t)}function ii(){var t=ri(),e=t[0]+1,n=t[1]+1;return e===n?e+"":e+" to "+n}function ri(t){null==t&&(t=Li());var e,n,i,r=le;if(Dt||St?(At||Ot)&&(n=-(parseFloat(t)+St),i=n+Nt+2*St):At&&(n=bt[le],i=n+Nt),At)bt.forEach(function(t,o){o<ee&&((Dt||St)&&t<=n+.5&&(r=o),i-t>=.5&&(e=o))});else{if(Ot){var o=Ot+Mt;Dt||St?(r=Math.floor(n/o),e=Math.ceil(i/o-1)):e=r+Math.ceil(Nt/o)-1}else if(Dt||St){var a=Pt-1;if(Dt?(r-=a/2,e=le+a/2):e=le+a,St){var s=St*Pt/Nt;r-=s,e+=s}r=Math.floor(r),e=Math.ceil(e)}else e=r+Pt-1;r=Math.max(r,0),e=Math.min(e,ee-1)}return[r,e]}function oi(){$t&&!xe&&pi.apply(null,ri()).forEach(function(t){if(!g(t,je)){var e={};e[V]=function(t){t.stopPropagation()},H(t,e),H(t,_e),t.src=E(t,"data-src");var n=E(t,"data-srcset");n&&(t.srcset=n),b(t,"loading")}})}function ai(t){b(t,"loaded"),si(t)}function si(t){b(t,"tns-complete"),w(t,"loading"),B(t,_e)}function pi(t,e){for(var n=[];t<=e;)v(ht[t].querySelectorAll("img"),function(t){n.push(t)}),t++;return n}function li(){var t=pi.apply(null,ri());r(function(){ci(t,mi)})}function ci(t,e){return wt?e():(t.forEach(function(e,n){g(e,je)&&t.splice(n,1)}),t.length?void r(function(){ci(t,e)}):e())}function di(){oi(),vi(),ni(),xi(),function(){if(Yt&&(rn=nn>=0?nn:Mn(),nn=-1,rn!==on)){var t=Je[on],e=Je[rn];C(t,{tabindex:"-1","aria-label":sn+(on+1)}),w(t,an),C(e,{"aria-label":sn+(rn+1)+pn}),L(e,"tabindex"),b(e,an),on=rn}}()}function ui(){Z&&jt&&(st.style[W]=Ft/1e3+"s")}function fi(t,e){for(var n=[],i=t,r=Math.min(t+e,ee);i<r;i++)n.push(ht[i].offsetHeight);return Math.max.apply(null,n)}function mi(){var t=jt?fi(le,Pt):fi(te,vt),e=st||dt;e.style.height!==t&&(e.style.height=t+"px")}function hi(){bt=[0];var t=lt?"left":"top",e=lt?"right":"bottom",n=ht[0].getBoundingClientRect()[t];v(ht,function(i,r){r&&bt.push(i.getBoundingClientRect()[t]-n),r===ee-1&&bt.push(i.getBoundingClientRect()[e]-n)})}function vi(){var t=ri(),e=t[0],n=t[1];v(ht,function(t,i){i>=e&&i<=n?x(t,"aria-hidden")&&(L(t,["aria-hidden","tabindex"]),b(t,ze)):x(t,"aria-hidden")||(C(t,{"aria-hidden":"true",tabindex:"-1"}),w(t,ze))})}function yi(t){return t.nodeName.toLowerCase()}function gi(t){return"button"===yi(t)}function bi(t){return"true"===t.getAttribute("aria-disabled")}function wi(t,e,n){t?e.disabled=n:e.setAttribute("aria-disabled",n.toString())}function xi(){if(_t&&!Rt&&!zt){var t=Ye?Ue.disabled:bi(Ue),e=Xe?Ke.disabled:bi(Ke),n=le<=de,i=!Rt&&le>=ue;n&&!t&&wi(Ye,Ue,!0),!n&&t&&wi(Ye,Ue,!1),i&&!e&&wi(Xe,Ke,!0),!i&&e&&wi(Xe,Ke,!1)}}function Ei(t,e){W&&(t.style[W]=e)}function ki(t){return null==t&&(t=le),At?(Nt-(St?Mt:0)-(bt[t+1]-bt[t]-Mt))/2:Ot?(Nt-Ot)/2:(Pt-1)/2}function Ci(){var t=Nt+(St?Mt:0)-(Ot?(Ot+Mt)*ee:bt[ee]);return Dt&&!zt&&(t=Ot?-(Ot+Mt)*(ee-1)-ki():ki(ee-1)-bt[ee-1]),t>0&&(t=0),t}function Li(t){var e;if(null==t&&(t=le),lt&&!At)if(Ot)e=-(Ot+Mt)*t,Dt&&(e+=ki());else{var n=j?ee:Pt;Dt&&(t-=ki()),e=100*-t/n}else e=-bt[t],Dt&&At&&(e+=ki());return ne&&(e=Math.max(e,ie)),e+=!lt||At||Ot?"px":"%"}function Ti(t){Ei(ut,"0s"),Ai(t)}function Ai(t){null==t&&(t=Li()),ut.style[oe]=ae+t+se}function Oi(t,e,n,i){var r=t+Pt;zt||(r=Math.min(r,ee));for(var o=t;o<r;o++){var a=ht[o];i||(a.style.left=100*(o-le)/Pt+"%"),ot&&Y&&(a.style[Y]=a.style[q]=ot*(o-t)/1e3+"s"),w(a,e),b(a,n),i&&Zt.push(a)}}function Si(t,e){re&&Cn(),(le!==ce||e)&&(ge.emit("indexChanged",$i()),ge.emit("transitionStart",$i()),jt&&li(),cn&&t&&["click","keydown"].indexOf(t.type)>=0&&Ri(),ve=!0,Ln())}function Mi(t){return t.toLowerCase().replace(/-/g,"")}function Ni(t){if(Z||ve){if(ge.emit("transitionEnd",$i(t)),!Z&&Zt.length>0)for(var e=0;e<Zt.length;e++){var n=Zt[e];n.style.left="",q&&Y&&(n.style[q]="",n.style[Y]=""),w(n,rt),b(n,at)}if(!t||!Z&&t.target.parentNode===ut||t.target===ut&&Mi(t.propertyName)===Mi(oe)){if(!re){var i=le;Cn(),le!==i&&(ge.emit("indexChanged",$i()),Ti())}"inner"===$&&ge.emit("innerLoaded",$i()),ve=!1,ce=le}}}function Di(t,e){if(!Ce)if("prev"===t)Pi(e,-1);else if("next"===t)Pi(e,1);else{if(ve){if(fe)return;Ni()}var n=Sn(),i=0;if("first"===t?i=-n:"last"===t?i=Z?vt-Pt-n:vt-1-n:("number"!=typeof t&&(t=parseInt(t)),isNaN(t)||(e||(t=Math.max(0,Math.min(vt-1,t))),i=t-n)),!Z&&i&&Math.abs(i)<Pt){var r=i>0?1:-1;i+=le+i-vt>=de?vt*r:2*vt*r*-1}le+=i,Z&&zt&&(le<de&&(le+=vt),le>ue&&(le-=vt)),Sn(le)!==Sn(ce)&&Si(e)}}function Pi(t,e){if(ve){if(fe)return;Ni()}var n;if(!e){for(var i=Wi(t=_i(t));i!==qe&&[Ue,Ke].indexOf(i)<0;)i=i.parentNode;var r=[Ue,Ke].indexOf(i);r>=0&&(n=!0,e=0===r?-1:1)}if(Rt){if(le===de&&-1===e)return void Di("last",t);if(le===ue&&1===e)return void Di("first",t)}e&&(le+=It*e,At&&(le=Math.floor(le)),Si(n||t&&"keydown"===t.type?t:null))}function Ii(){ln=setInterval(function(){Pi(null,mn)},Ut),cn=!0}function Hi(){clearInterval(ln),cn=!1}function Bi(t,e){C(hn,{"data-action":t}),hn.innerHTML=yn[0]+t+yn[1]+e}function Fi(){Ii(),hn&&Bi("stop",Kt[1])}function Ri(){Hi(),hn&&Bi("start",Kt[0])}function zi(){cn?(Ri(),un=!0):(Fi(),un=!1)}function ji(t){t.focus()}function _i(t){return Yi(t=t||i.event)?t.changedTouches[0]:t}function Wi(t){return t.target||i.event.srcElement}function Yi(t){return t.type.indexOf("touch")>=0}function Xi(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function qi(){return o=xn.y-wn.y,a=xn.x-wn.x,t=Math.atan2(o,a)*(180/Math.PI),n=me,i=!1,(r=Math.abs(90-Math.abs(t)))>=90-n?i="horizontal":r<=n&&(i="vertical"),i===e.axis;var t,n,i,r,o,a}function Vi(t){if(ve){if(fe)return;Ni()}Vt&&cn&&Hi(),En=!0,bn&&(a(bn),bn=null);var e=_i(t);ge.emit(Yi(t)?"touchStart":"dragStart",$i(t)),!Yi(t)&&["img","a"].indexOf(yi(Wi(t)))>=0&&Xi(t),xn.x=wn.x=e.clientX,xn.y=wn.y=e.clientY,Z&&(gn=parseFloat(ut.style[oe].replace(ae,"")),Ei(ut,"0s"))}function Ui(t){if(En){var e=_i(t);xn.x=e.clientX,xn.y=e.clientY,Z?bn||(bn=r(function(){!function t(e){if(!he)return void(En=!1);a(bn);En&&(bn=r(function(){t(e)}));"?"===he&&(he=qi());if(he){!We&&Yi(e)&&(We=!0);try{e.type&&ge.emit(Yi(e)?"touchMove":"dragMove",$i(e))}catch(t){}var n=gn,i=kn(xn,wn);if(!lt||Ot||At)n+=i,n+="px";else{var o=j?i*Pt*100/((Nt+Mt)*ee):100*i/(Nt+Mt);n+=o,n+="%"}ut.style[oe]=ae+n+se}}(t)})):("?"===he&&(he=qi()),he&&(We=!0)),We&&t.preventDefault()}}function Ki(t){if(En){bn&&(a(bn),bn=null),Z&&Ei(ut,""),En=!1;var n=_i(t);xn.x=n.clientX,xn.y=n.clientY;var i=kn(xn,wn);if(Math.abs(i)){if(!Yi(t)){var o=Wi(t);H(o,{click:function t(e){Xi(e),B(o,{click:t})}})}Z?bn=r(function(){if(lt&&!At){var e=-i*Pt/(Nt+Mt);e=i>0?Math.floor(e):Math.ceil(e),le+=e}else{var n=-(gn+i);if(n<=0)le=de;else if(n>=bt[ee-1])le=ue;else for(var r=0;r<ee&&n>=bt[r];)le=r,n>bt[r]&&i<0&&(le+=1),r++}Si(t,i),ge.emit(Yi(t)?"touchEnd":"dragEnd",$i(t))}):he&&Pi(t,i>0?-1:1)}}"auto"===e.preventScrollOnTouch&&(We=!1),me&&(he="?"),Vt&&!cn&&Ii()}function Gi(){(st||dt).style.height=bt[le+Pt]-bt[le]+"px"}function Qi(){var t=Ot?(Ot+Mt)*vt/Nt:vt/Pt;return Math.min(Math.ceil(t),vt)}function Ji(){if(Yt&&!He&&tn!==en){var t=en,e=tn,n=O;for(en>tn&&(t=tn,e=en,n=A);t<e;)n(Je[t]),t++;en=tn}}function $i(t){return{container:ut,slideItems:ht,navContainer:$e,navItems:Je,controlsContainer:qe,hasControls:Pe,prevButton:Ue,nextButton:Ke,items:Pt,slideBy:It,cloneCount:te,slideCount:vt,slideCountNew:ee,index:le,indexCached:ce,displayIndex:An(),navCurrentIndex:rn,navCurrentIndexCached:on,pages:tn,pagesCached:en,sheet:Jt,isOn:gt,event:t||{}}}K&&console.warn("No slides found in",e.container)},G=n(1),Q=n.n(G),J=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},$=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Z=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},tt=(z=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],j=function(){function t(e){var n=e.targetModal,i=e.triggers,r=void 0===i?[]:i,o=e.onShow,a=void 0===o?function(){}:o,s=e.onClose,p=void 0===s?function(){}:s,l=e.openTrigger,c=void 0===l?"data-micromodal-trigger":l,d=e.closeTrigger,u=void 0===d?"data-micromodal-close":d,f=e.disableScroll,m=void 0!==f&&f,h=e.disableFocus,v=void 0!==h&&h,y=e.awaitCloseAnimation,g=void 0!==y&&y,b=e.debugMode,w=void 0!==b&&b;J(this,t),this.modal=document.getElementById(n),this.config={debugMode:w,disableScroll:m,openTrigger:c,closeTrigger:u,onShow:a,onClose:p,awaitCloseAnimation:g,disableFocus:v},r.length>0&&this.registerTriggers.apply(this,Z(r)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}return $(t,[{key:"registerTriggers",value:function(){for(var t=this,e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];n.forEach(function(e){e.addEventListener("click",function(){return t.showModal()})})}},{key:"showModal",value:function(){this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add("is-open"),this.setFocusToFirstNode(),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.onShow(this.modal)}},{key:"closeModal",value:function(){var t=this.modal;this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement.focus(),this.config.onClose(this.modal),this.config.awaitCloseAnimation?this.modal.addEventListener("animationend",function e(){t.classList.remove("is-open"),t.removeEventListener("animationend",e,!1)},!1):t.classList.remove("is-open")}},{key:"scrollBehaviour",value:function(t){if(this.config.disableScroll){var e=document.querySelector("body");switch(t){case"enable":Object.assign(e.style,{overflow:"initial",height:"initial"});break;case"disable":Object.assign(e.style,{overflow:"hidden",height:"100vh"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(t){t.target.hasAttribute(this.config.closeTrigger)&&(this.closeModal(),t.preventDefault())}},{key:"onKeydown",value:function(t){27===t.keyCode&&this.closeModal(t),9===t.keyCode&&this.maintainFocus(t)}},{key:"getFocusableNodes",value:function(){var t=this.modal.querySelectorAll(z);return Object.keys(t).map(function(e){return t[e]})}},{key:"setFocusToFirstNode",value:function(){if(!this.config.disableFocus){var t=this.getFocusableNodes();t.length&&t[0].focus()}}},{key:"maintainFocus",value:function(t){var e=this.getFocusableNodes();if(this.modal.contains(document.activeElement)){var n=e.indexOf(document.activeElement);t.shiftKey&&0===n&&(e[e.length-1].focus(),t.preventDefault()),t.shiftKey||n!==e.length-1||(e[0].focus(),t.preventDefault())}else e[0].focus()}}]),t}(),_=null,W=function(t){if(!document.getElementById(t))return console.warn("MicroModal v0.3.1: ❗Seems like you have missed %c'"+t+"'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'+t+'"></div>'),!1},Y=function(t,e){if(function(t){if(t.length<=0)console.warn("MicroModal v0.3.1: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>')}(t),!e)return!0;for(var n in e)W(n);return!0},{init:function(t){var e=Object.assign({},{openTrigger:"data-micromodal-trigger"},t),n=[].concat(Z(document.querySelectorAll("["+e.openTrigger+"]"))),i=function(t,e){var n=[];return t.forEach(function(t){var i=t.attributes[e].value;void 0===n[i]&&(n[i]=[]),n[i].push(t)}),n}(n,e.openTrigger);if(!0!==e.debugMode||!1!==Y(n,i))for(var r in i){var o=i[r];e.targetModal=r,e.triggers=[].concat(Z(o)),new j(e)}},show:function(t,e){var n=e||{};n.targetModal=t,!0===n.debugMode&&!1===W(t)||(_=new j(n)).showModal()},close:function(){_.closeModal()}}),et=n(2),nt=n.n(et);function it(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function rt(){return(rt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function ot(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Array.from||(Array.from=(X=Object.prototype.toString,q=function(t){return"function"==typeof t||"[object Function]"===X.call(t)},V=Math.pow(2,53)-1,U=function(t){var e=function(t){var e=Number(t);return isNaN(e)?0:0!==e&&isFinite(e)?(e>0?1:-1)*Math.floor(Math.abs(e)):e}(t);return Math.min(Math.max(e,0),V)},function(t){var e=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var n,i=arguments.length>1?arguments[1]:void 0;if(void 0!==i){if(!q(i))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(n=arguments[2])}for(var r,o=U(e.length),a=q(this)?Object(new this(o)):new Array(o),s=0;s<o;)r=e[s],a[s]=i?void 0===n?i(r,s):i.call(n,r,s):r,s+=1;return a.length=o,a})),function(t,e){var n=(t.body||t.documentElement).style,i="",r="";""==n.WebkitAnimation&&(i="-webkit-"),""==n.MozAnimation&&(i="-moz-"),""==n.OAnimation&&(i="-o-"),""==n.WebkitTransition&&(r="-webkit-"),""==n.MozTransition&&(r="-moz-"),""==n.OTransition&&(r="-o-"),Object.defineProperty(Object.prototype,"onCSSAnimationEnd",{value:function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitAnimationEnd",e),this.addEventListener("mozAnimationEnd",e),this.addEventListener("oAnimationEnd",e),this.addEventListener("oanimationend",e),this.addEventListener("animationend",e),(""!=i||"animation"in n)&&"0s"!=getComputedStyle(this)[i+"animation-duration"]||t(),this},enumerable:!1,writable:!0}),Object.defineProperty(Object.prototype,"onCSSTransitionEnd",{value:function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitTransitionEnd",e),this.addEventListener("mozTransitionEnd",e),this.addEventListener("oTransitionEnd",e),this.addEventListener("transitionend",e),this.addEventListener("transitionend",e),(""!=r||"transition"in n)&&"0s"!=getComputedStyle(this)[r+"transition-duration"]||t(),this},enumerable:!1,writable:!0})}(document,window);var at=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var r="string"==typeof e?document.querySelector(e):e;if(null!=r){var o={headerClass:".js-badger-accordion-header",panelClass:".js-badger-accordion-panel",panelInnerClass:".js-badger-accordion-panel-inner",hiddenClass:"-ba-is-hidden",activeClass:"-ba-is-active",get hidenClass(){return this.hiddenClass},initializedClass:"badger-accordion--initialized",get initalisedClass(){return this.initializedClass},headerDataAttr:"data-badger-accordion-header-id",openMultiplePanels:!1,openHeadersOnLoad:[],headerOpenLabel:"",headerCloseLabel:"",roles:!0};this.settings=rt({},o,n),this.container=r;var a=Array.from(this.container.children),s=a.filter(function(t){return!t.classList.contains(i.settings.panelClass.substr(1))});this.headers=s.reduce(function(t,e){var n,r=Array.from(e.children).filter(function(t){return t.classList.contains(i.settings.headerClass.substr(1))});return t=(n=[]).concat.apply(n,ot(t).concat([r]))},[]),this.panels=a.filter(function(t){return t.classList.contains(i.settings.panelClass.substr(1))}),this.toggleEl=void 0!==this.settings.toggleEl?Array.from(this.container.querySelectorAll(this.settings.toggleEl)):this.headers,this.states=[].map.call(this.headers,function(){return{state:"closed"}}),this.ids=[].map.call(this.headers,function(){return{id:Math.floor(1e6*Math.random()+1)}}),this.toggling=!1,this.container?this.init():console.log("Something is wrong with you markup...")}}var e,n,i;return e=t,(n=[{key:"init",value:function(){this._setupAttributes(),this._initalState(),this.calculateAllPanelsHeight(),this._insertDataAttrs(),this._addListeners(),this._finishInitialization()}},{key:"_setRole",value:function(t,e){("boolean"==typeof this.settings.roles&&this.settings.roles||void 0!==this.settings.roles[t]&&!1!==this.settings.roles[t])&&e.setAttribute("role",t)}},{key:"_initalState",value:function(){var t=this.settings.openHeadersOnLoad;t.length&&this._openHeadersOnLoad(t),this._renderDom()}},{key:"_insertDataAttrs",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute(t.settings.headerDataAttr,n)})}},{key:"_finishInitialization",value:function(){this.container.classList.add(this.settings.initializedClass),this._setRole("presentation",this.container)}},{key:"_addListeners",value:function(){var t=this;this.headers.forEach(function(e,n){e.addEventListener("click",function(){t.handleClick(e,n)})})}},{key:"handleClick",value:function(t,e){var n=this.settings.headerClass.substr(1);t.classList.contains(n)&&!1===this.toggling&&(this.toggling=!0,this.setState(e),this._renderDom())}},{key:"setState",value:function(t){var e=this,n=this.getState();this.settings.openMultiplePanels||n.filter(function(e,n){n!=t&&(e.state="closed")}),n.filter(function(n,i){if(i==t){var r=e.toggleState(n.state);return n.state=r}})}},{key:"_renderDom",value:function(){var t=this;this.states.filter(function(e,n){"open"===e.state&&t.open(n,!1)}),this.states.filter(function(e,n){"closed"===e.state&&t.close(n,!1)})}},{key:"open",value:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&this.setState(t),this.togglePanel("open",t)}},{key:"close",value:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&this.setState(t),this.togglePanel("closed",t)}},{key:"openAll",value:function(){var t=this;this.headers.forEach(function(e,n){t.togglePanel("open",n)})}},{key:"closeAll",value:function(){var t=this;this.headers.forEach(function(e,n){t.togglePanel("closed",n)})}},{key:"togglePanel",value:function(t,e){var n=this;if(void 0!==t&&void 0!==e)if("closed"===t){var i=this.headers[e],r=this.panels[e];r.classList.add(this.settings.hiddenClass),r.classList.remove(this.settings.activeClass),i.classList.remove(this.settings.activeClass),i.setAttribute("aria-expanded",!1),r.onCSSTransitionEnd(function(){return n.toggling=!1})}else if("open"===t){var o=this.headers[e],a=this.panels[e];a.classList.remove(this.settings.hiddenClass),a.classList.add(this.settings.activeClass),o.classList.add(this.settings.activeClass),o.setAttribute("aria-expanded",!0),a.onCSSTransitionEnd(function(){return n.toggling=!1})}}},{key:"getState",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.length&&Array.isArray(e)?e.map(function(e){return t.states[e]}):this.states}},{key:"toggleState",value:function(t){if(void 0!==t)return"closed"===t?"open":"closed"}},{key:"_openHeadersOnLoad",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];e.length&&Array.isArray(e)&&e.filter(function(t){return null!=t}).forEach(function(e){t.setState(e)})}},{key:"_setupAttributes",value:function(){this._setupHeaders(),this._setupPanels(),this._insertDataAttrs()}},{key:"_setPanelHeight",value:function(){this.calculateAllPanelsHeight()}},{key:"calculatePanelHeight",value:function(t){var e=t.querySelector(this.settings.panelInnerClass).offsetHeight;return t.style.maxHeight="".concat(e,"px")}},{key:"calculateAllPanelsHeight",value:function(){var t=this;this.panels.forEach(function(e){t.calculatePanelHeight(e)})}},{key:"_setupHeaders",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute("id","badger-accordion-header-".concat(t.ids[n].id)),e.setAttribute("aria-controls","badger-accordion-panel-".concat(t.ids[n].id))})}},{key:"_setupPanels",value:function(){var t=this;this.panels.forEach(function(e,n){e.setAttribute("id","badger-accordion-panel-".concat(t.ids[n].id)),e.setAttribute("aria-labelledby","badger-accordion-header-".concat(t.ids[n].id)),!0!==t.settings.roles&&!1===t.settings.roles.region||t._setRole("region",e)})}}])&&it(e.prototype,n),i&&it(e,i),t}(),st=n(3);function pt(){return(pt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}var lt="undefined"!=typeof window,ct=lt&&navigator.userAgent,dt=/MSIE |Trident\//.test(ct),ut=/UCBrowser\//.test(ct),ft=lt&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,mt={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},ht=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],vt={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},yt=lt?Element.prototype:{},gt=yt.matches||yt.matchesSelector||yt.webkitMatchesSelector||yt.mozMatchesSelector||yt.msMatchesSelector;function bt(t){return[].slice.call(t)}function wt(t,e){return(yt.closest||function(t){for(var e=this;e;){if(gt.call(e,t))return e;e=e.parentElement}}).call(t,e)}function xt(t,e){for(;t;){if(e(t))return t;t=t.parentElement}}function Et(t,e){return{}.hasOwnProperty.call(t,e)}function kt(t,e,n){if(Array.isArray(t)){var i=t[e];return null==i?n:i}return t}function Ct(t,e){var n;return function(){var i=this,r=arguments;clearTimeout(n),n=setTimeout(function(){return t.apply(i,r)},e)}}function Lt(t,e){return t&&t.modifiers&&t.modifiers[e]}function Tt(t,e){return t.indexOf(e)>-1}function At(t){return!!t&&t.isVirtual||t instanceof Element}function Ot(t,e){return"function"==typeof t?t.apply(null,e):t}function St(t,e){t.filter(function(t){return"flip"===t.name})[0].enabled=e}function Mt(){return document.createElement("div")}function Nt(t,e){t.innerHTML=e instanceof Element?e.innerHTML:e}function Dt(t,e){e.content instanceof Element?(Nt(t,""),t.appendChild(e.content)):t[e.allowHTML?"innerHTML":"textContent"]=e.content}function Pt(t){return{tooltip:t.querySelector(vt.TOOLTIP),backdrop:t.querySelector(vt.BACKDROP),content:t.querySelector(vt.CONTENT),arrow:t.querySelector(vt.ARROW)||t.querySelector(vt.ROUND_ARROW)}}function It(t){t.setAttribute("data-inertia","")}function Ht(t){var e=Mt();return"round"===t?(e.className="tippy-roundarrow",Nt(e,'<svg viewBox="0 0 24 8" xmlns="http://www.w3.org/2000/svg"><path d="M3 8s2.021-.015 5.253-4.218C9.584 2.051 10.797 1.007 12 1c1.203-.007 2.416 1.035 3.761 2.782C19.012 8.005 21 8 21 8H3z"/></svg>')):e.className="tippy-arrow",e}function Bt(){var t=Mt();return t.className="tippy-backdrop",t.setAttribute("data-state","hidden"),t}function Ft(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function Rt(t,e){t.forEach(function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))})}function zt(t,e,n){var i=ut&&void 0!==document.body.style.WebkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](i,n)}function jt(t){var e=t.getAttribute("x-placement");return e?e.split("-")[0]:""}function _t(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function Wt(t,e,n){n.split(" ").forEach(function(n){t.classList[e](n+"-theme")})}function Yt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.checkHideOnClick,n=t.exclude,i=t.duration;bt(document.querySelectorAll(vt.POPPER)).forEach(function(t){var r=t._tippy;!r||e&&!0!==r.props.hideOnClick||n&&t===n.popper||r.hide(i)})}var Xt={passive:!0},qt=3,Vt=!1;function Ut(){Vt||(Vt=!0,ft&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Gt))}var Kt=0;function Gt(){var t=performance.now();t-Kt<20&&(Vt=!1,document.removeEventListener("mousemove",Gt),ft||document.body.classList.remove("tippy-iOS")),Kt=t}function Qt(t){var e=t.target;if(!(e instanceof Element))return Yt();var n=wt(e,vt.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var i=xt(e,function(t){return t._tippy&&t._tippy.reference===t});if(i){var r=i._tippy,o=Tt(r.props.trigger,"click");if(Vt||o)return Yt({exclude:r,checkHideOnClick:!0});if(!0!==r.props.hideOnClick||o)return;r.clearDelayTimeouts()}Yt({checkHideOnClick:!0})}}function Jt(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var $t=Object.keys(mt);function Zt(t,e){var n=pt({},e,{content:Ot(e.content,[t])},e.ignoreAttributes?{}:function(t){return $t.reduce(function(e,n){var i=(t.getAttribute("data-tippy-".concat(n))||"").trim();if(!i)return e;if("content"===n)e[n]=i;else try{e[n]=JSON.parse(i)}catch(t){e[n]=i}return e},{})}(t));return(n.arrow||ut)&&(n.animateFill=!1),n}function te(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0;Object.keys(t).forEach(function(t){if(!Et(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))})}var ee=1;function ne(t,e){var n=Zt(t,e);if(!n.multiple&&t._tippy)return null;var i={},r=null,o=0,a=0,s=!1,p=function(){},l=[],c=n.interactiveDebounce>0?Ct(E,n.interactiveDebounce):E,d=null,u=ee++,f=function(t,e){var n=Mt();n.className="tippy-popper",n.id="tippy-".concat(t),n.style.zIndex=e.zIndex,e.role&&n.setAttribute("role",e.role);var i=Mt();i.className="tippy-tooltip",i.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),i.setAttribute("data-size",e.size),i.setAttribute("data-animation",e.animation),i.setAttribute("data-state","hidden"),Wt(i,"add",e.theme);var r=Mt();return r.className="tippy-content",r.setAttribute("data-state","hidden"),e.interactive&&Ft(n,i),e.arrow&&i.appendChild(Ht(e.arrowType)),e.animateFill&&(i.appendChild(Bt()),i.setAttribute("data-animatefill","")),e.inertia&&It(i),Dt(r,e),i.appendChild(r),n.appendChild(i),n}(u,n);f.addEventListener("mouseenter",function(t){h.props.interactive&&h.state.isVisible&&"mouseenter"===i.type&&y(t)}),f.addEventListener("mouseleave",function(){h.props.interactive&&"mouseenter"===i.type&&document.addEventListener("mousemove",c)});var m,h={id:u,reference:t,popper:f,popperChildren:Pt(f),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:H,set:B,setContent:function(t){B({content:t})},show:F,hide:R,enable:function(){h.state.isEnabled=!0},disable:function(){h.state.isEnabled=!1},destroy:z};return D(),n.lazy||(O(),h.popperInstance.disableEventListeners()),n.showOnInit&&y(),n.a11y&&!n.target&&((m=t)instanceof Element&&(!gt.call(m,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||m.hasAttribute("disabled")))&&t.setAttribute("tabindex","0"),t._tippy=h,f._tippy=h,h;function v(t){var e=r=t,n=e.clientX,i=e.clientY;if(h.popperInstance){var o=jt(h.popper),a=h.popperChildren.arrow?qt+16:qt,s=Tt(["top","bottom"],o),p=Tt(["left","right"],o),l=s?Math.max(a,n):n,c=p?Math.max(a,i):i;s&&l>a&&(l=Math.min(n,window.innerWidth-a)),p&&c>a&&(c=Math.min(i,window.innerHeight-a));var d=h.reference.getBoundingClientRect(),u=h.props.followCursor,f="horizontal"===u,m="vertical"===u;h.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:f?d.top:c,bottom:f?d.bottom:c,left:m?d.left:l,right:m?d.right:l}},clientWidth:0,clientHeight:0},h.popperInstance.scheduleUpdate(),"initial"===u&&h.state.isVisible&&b()}}function y(t){if(H(),!h.state.isVisible){if(h.props.target)return function(t){var n=wt(t.target,h.props.target);n&&!n._tippy&&(ne(n,pt({},h.props,{content:Ot(e.content,[n]),appendTo:e.appendTo,target:"",showOnInit:!0})),y(t))}(t);if(s=!0,h.props.wait)return h.props.wait(h,t);S()&&!h.state.isMounted&&document.addEventListener("mousemove",v);var n=kt(h.props.delay,0,mt.delay);n?o=setTimeout(function(){F()},n):F()}}function g(){if(H(),!h.state.isVisible)return b();s=!1;var t=kt(h.props.delay,1,mt.delay);t?a=setTimeout(function(){h.state.isVisible&&R()},t):R()}function b(){document.removeEventListener("mousemove",v),r=null}function w(){document.body.removeEventListener("mouseleave",g),document.removeEventListener("mousemove",c)}function x(t){h.state.isEnabled&&!A(t)&&(h.state.isVisible||(i=t,Vt&&Tt(t.type,"mouse")&&(r=t)),"click"===t.type&&!1!==h.props.hideOnClick&&h.state.isVisible?g():y(t))}function E(t){var e=xt(t.target,function(t){return t._tippy}),n=wt(t.target,vt.POPPER)===h.popper,i=e===h.reference;n||i||function(t,e,n,i){if(!t)return!0;var r=n.clientX,o=n.clientY,a=i.interactiveBorder,s=i.distance,p=e.top-o>("top"===t?a+s:a),l=o-e.bottom>("bottom"===t?a+s:a),c=e.left-r>("left"===t?a+s:a),d=r-e.right>("right"===t?a+s:a);return p||l||c||d}(jt(h.popper),h.popper.getBoundingClientRect(),t,h.props)&&(w(),g())}function k(t){if(!A(t))return h.props.interactive?(document.body.addEventListener("mouseleave",g),void document.addEventListener("mousemove",c)):void g()}function C(t){t.target===h.reference&&(h.props.interactive&&t.relatedTarget&&h.popper.contains(t.relatedTarget)||g())}function L(t){wt(t.target,h.props.target)&&y(t)}function T(t){wt(t.target,h.props.target)&&g()}function A(t){var e="ontouchstart"in window,n=Tt(t.type,"touch"),i=h.props.touchHold;return e&&Vt&&i&&!n||Vt&&!i&&n}function O(){var t=h.props.popperOptions,e=h.popperChildren,n=e.tooltip,i=e.arrow;h.popperInstance=new st.a(h.reference,h.popper,pt({placement:h.props.placement},t,{modifiers:pt({},t?t.modifiers:{},{preventOverflow:pt({boundariesElement:h.props.boundary,padding:qt},Lt(t,"preventOverflow")),arrow:pt({element:i,enabled:!!i},Lt(t,"arrow")),flip:pt({enabled:h.props.flip,padding:h.props.distance+qt,behavior:h.props.flipBehavior},Lt(t,"flip")),offset:pt({offset:h.props.offset},Lt(t,"offset"))}),onUpdate:function(e){h.props.flip&&!h.props.flipOnUpdate&&(e.flipped&&(h.popperInstance.options.placement=e.placement),St(h.popperInstance.modifiers,!1));var i=n.style;i.top="",i.bottom="",i.left="",i.right="",i[jt(h.popper)]=-(h.props.distance-10)+"px",t.onUpdate&&t.onUpdate(e)}}))}function S(){return h.props.followCursor&&!Vt&&"focus"!==i.type}function M(t,e){if(0===t)return e();var n=h.popperChildren.tooltip,i=function t(i){i.target===n&&(zt(n,"remove",t),e())};zt(n,"remove",p),zt(n,"add",i),p=i}function N(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];h.reference.addEventListener(t,e,n),l.push({eventType:t,handler:e,options:n})}function D(){h.props.touchHold&&!h.props.target&&(N("touchstart",x,Xt),N("touchend",k,Xt)),h.props.trigger.trim().split(" ").forEach(function(t){if("manual"!==t)if(h.props.target)switch(t){case"mouseenter":N("mouseover",L),N("mouseout",T);break;case"focus":N("focusin",L),N("focusout",T);break;case"click":N(t,L)}else switch(N(t,x),t){case"mouseenter":N("mouseleave",k);break;case"focus":N(dt?"focusout":"blur",C)}})}function P(){l.forEach(function(t){var e=t.eventType,n=t.handler,i=t.options;h.reference.removeEventListener(e,n,i)}),l=[]}function I(){return[h.popperChildren.tooltip,h.popperChildren.backdrop,h.popperChildren.content]}function H(){clearTimeout(o),clearTimeout(a)}function B(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};te(t,mt);var e=h.props,n=Zt(h.reference,pt({},h.props,t,{ignoreAttributes:!0}));n.ignoreAttributes=Et(t,"ignoreAttributes")?t.ignoreAttributes:e.ignoreAttributes,h.props=n,(Et(t,"trigger")||Et(t,"touchHold"))&&(P(),D()),Et(t,"interactiveDebounce")&&(w(),c=Ct(E,t.interactiveDebounce)),function(t,e,n){var i=Pt(t),r=i.tooltip,o=i.content,a=i.backdrop,s=i.arrow;t.style.zIndex=n.zIndex,r.setAttribute("data-size",n.size),r.setAttribute("data-animation",n.animation),r.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?t.setAttribute("role",n.role):t.removeAttribute("role"),e.content!==n.content&&Dt(o,n),!e.animateFill&&n.animateFill?(r.appendChild(Bt()),r.setAttribute("data-animatefill","")):e.animateFill&&!n.animateFill&&(r.removeChild(a),r.removeAttribute("data-animatefill")),!e.arrow&&n.arrow?r.appendChild(Ht(n.arrowType)):e.arrow&&!n.arrow&&r.removeChild(s),e.arrow&&n.arrow&&e.arrowType!==n.arrowType&&r.replaceChild(Ht(n.arrowType),s),!e.interactive&&n.interactive?Ft(t,r):e.interactive&&!n.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,r),!e.inertia&&n.inertia?It(r):e.inertia&&!n.inertia&&function(t){t.removeAttribute("data-inertia")}(r),e.theme!==n.theme&&(Wt(r,"remove",e.theme),Wt(r,"add",n.theme))}(h.popper,e,n),h.popperChildren=Pt(h.popper),h.popperInstance&&(h.popperInstance.update(),ht.some(function(e){return Et(t,e)})&&(h.popperInstance.destroy(),O(),h.state.isVisible||h.popperInstance.disableEventListeners(),h.props.followCursor&&r&&v(r)))}function F(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:kt(h.props.duration,0,mt.duration[0]);if(!h.state.isDestroyed&&h.state.isEnabled&&(!Vt||h.props.touch))return h.reference.isVirtual||document.documentElement.contains(h.reference)?void(h.reference.hasAttribute("disabled")||!1!==h.props.onShow(h)&&(h.popper.style.visibility="visible",h.state.isVisible=!0,h.props.interactive&&h.reference.classList.add("tippy-active"),Rt([h.popper,h.popperChildren.tooltip,h.popperChildren.backdrop],0),function(t){var e=!(S()||"initial"===h.props.followCursor&&Vt);h.popperInstance?(S()||(h.popperInstance.scheduleUpdate(),e&&h.popperInstance.enableEventListeners()),St(h.popperInstance.modifiers,h.props.flip)):(O(),e||h.popperInstance.disableEventListeners()),h.popperInstance.reference=h.reference;var n=h.popperChildren.arrow;if(S()){n&&(n.style.margin="0");var o=kt(h.props.delay,0,mt.delay);i.type&&v(o&&r?r:i)}else n&&(n.style.margin="");!function(t,e){var n=t.popper,i=t.options,r=i.onCreate,o=i.onUpdate;i.onCreate=i.onUpdate=function(t){!function(t){t.offsetHeight}(n),e(),o(t),i.onCreate=r,i.onUpdate=o}}(h.popperInstance,t);var a=h.props.appendTo;(d="parent"===a?h.reference.parentNode:Ot(a,[h.reference])).contains(h.popper)||(d.appendChild(h.popper),h.props.onMount(h),h.state.isMounted=!0)}(function(){h.state.isVisible&&(S()||h.popperInstance.update(),Vt&&"initial"===h.props.followCursor&&v(r),Rt([h.popper],n.updateDuration),Rt(I(),t),h.popperChildren.backdrop&&(h.popperChildren.content.style.transitionDelay=Math.round(t/12)+"ms"),h.props.sticky&&(Rt([h.popper],dt?0:h.props.updateDuration),function t(){h.popperInstance&&h.popperInstance.scheduleUpdate(),h.state.isMounted?requestAnimationFrame(t):Rt([h.popper],0)}()),_t(I(),"visible"),function(t,e){M(t,e)}(t,function(){h.popperChildren.tooltip.classList.add("tippy-notransition"),h.props.aria&&h.reference.setAttribute("aria-".concat(h.props.aria),h.popper.id),h.props.onShown(h),h.state.isShown=!0}))}))):z()}function R(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:kt(h.props.duration,1,mt.duration[1]);!h.state.isDestroyed&&h.state.isEnabled&&!1!==h.props.onHide(h)&&(h.popperChildren.tooltip.classList.remove("tippy-notransition"),h.props.interactive&&h.reference.classList.remove("tippy-active"),h.popper.style.visibility="hidden",h.state.isVisible=!1,h.state.isShown=!1,Rt(I(),t),_t(I(),"hidden"),function(t,e){M(t,function(){!h.state.isVisible&&d&&d.contains(h.popper)&&e()})}(t,function(){s||b(),h.props.aria&&h.reference.removeAttribute("aria-".concat(h.props.aria)),h.popperInstance.disableEventListeners(),h.popperInstance.options.placement=h.props.placement,d.removeChild(h.popper),h.props.onHidden(h),h.state.isMounted=!1}))}function z(t){h.state.isDestroyed||(h.state.isMounted&&R(0),P(),delete h.reference._tippy,h.props.target&&t&&bt(h.reference.querySelectorAll(h.props.target)).forEach(function(t){t._tippy&&t._tippy.destroy()}),h.popperInstance&&h.popperInstance.destroy(),h.state.isDestroyed=!0)}}var ie=!1;function re(t,e){te(e,mt),ie||(document.addEventListener("click",Qt,!0),document.addEventListener("touchstart",Ut,Xt),window.addEventListener("blur",Jt),ie=!0);var n,i=pt({},mt,e);n=t,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},setAttribute:function(e,n){t.attributes[e]=n},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var n in e)t[n]=e[n]}(t);var r=function(t){if(At(t))return[t];if(t instanceof NodeList)return bt(t);if(Array.isArray(t))return t;try{return bt(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce(function(t,e){var n=e&&ne(e,i);return n&&t.push(n),t},[]);return At(t)?r[0]:r}re.version="4.0.3",re.defaults=mt,re.setDefaults=function(t){Object.keys(t).forEach(function(e){mt[e]=t[e]})},re.hideAll=Yt,re.group=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.delay,i=void 0===n?t[0].props.delay:n,r=e.duration,o=void 0===r?0:r,a=!1;function s(t){a=t,d()}function p(e){e._originalProps.onShow(e),t.forEach(function(t){t.set({duration:o}),t.hide()}),s(!0)}function l(t){t._originalProps.onHide(t),s(!1)}function c(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function d(){t.forEach(function(t){t.set({onShow:p,onShown:c,onHide:l,delay:a?[0,Array.isArray(i)?i[1]:i]:i,duration:a?o:t._originalProps.duration})})}t.forEach(function(t){t._originalProps={duration:t.props.duration,onHide:t.props.onHide,onShow:t.props.onShow,onShown:t.props.onShown}}),d()},lt&&setTimeout(function(){bt(document.querySelectorAll("[data-tippy]")).forEach(function(t){var e=t.getAttribute("data-tippy");e&&re(t,{content:e})})}),function(t){if(lt){var e=document.createElement("style");e.type="text/css",e.textContent=t;var n=document.head,i=n.firstChild;i?n.insertBefore(e,i):n.appendChild(e)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 10px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-8px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 6px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-8px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 6px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-16px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-16px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:.9rem;padding:.3rem .6rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.2rem .4rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.4rem .8rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:24px;height:8px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}');var oe=re;n(6);oe(".tt-button",{content:document.querySelector(".tt-content"),delay:50,animation:"scale",animateFill:!1,trigger:"click",theme:"light"});new at(document.querySelector(".js-badger-accordion"));if(document.querySelector(".rellax"))new nt.a(".rellax",{speed:-2,center:!1,round:!0,vertical:!0});if(document.querySelector(".doc-slider"))K({container:".doc-slider",items:4,gutter:40,controls:!0,touch:!1,controlsContainer:".doc-slider__controls",nav:!1,responsive:{1280:{items:4,controls:!0},980:{items:3,controls:!0},763:{items:2},480:{items:1},0:{items:1}}});if(document.querySelector(".slider"))K({navContainer:".slider-controls",navAsThumbnails:!0,controls:!1,touch:!1});var ae=Q()(".offside-menu",{slidingElementsSelector:".offside__container",buttonsSelector:".offside__button, .offside__close",beforeOpen:function(){document.body.classList.add("offside-js--interact")},afterOpen:function(){document.body.classList.add("overflow-y")},beforeClose:function(){},afterClose:function(){document.body.classList.remove("offside-js--interact"),document.body.classList.remove("overflow-y")}});document.querySelector(".page-overlay").addEventListener("click",ae.closeAll),window.onload=function(){for(var t=document.querySelectorAll(".tabs__link"),e=document.querySelectorAll(".tabs__item"),n=0;n<t.length;n++)t[n].addEventListener("click",function(n){n.preventDefault();for(var i=this.hash.replace("#",""),r=0;r<e.length;r++){var o=e[r];o.classList.remove("is-visible"),t[r].classList.remove("is-active"),o.id===i&&o.classList.add("is-visible")}this.classList.add("is-active")})},tt.init(),document.getElementById("modal")&&document.addEventListener("wpcf7mailsent",function(t){},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,